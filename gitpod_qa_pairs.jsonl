{"prompt": "Q: How do I bitbucket server?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Each Gitpod user connects their account to Bitbucket server the first time they start a workspace.", "completion": ""}
{"prompt": "Q: How do I registering a bitbucket server?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Other Bitbucket Server users need to connect their own Gitpod account to their own Bitbucket Server account by starting a workspace.", "completion": ""}
{"prompt": "To start a workspace, paste the URL of a Bitbucket Server repository into the New Workspace popup (<Keybind>CtrlCmd + O</Keybind>) in Gitpod, or prefix the repository URL as described in [Getting started](/docs/introduction/getting-started).", "completion": ""}
{"prompt": "![Open in Gitpod form](../../../static/images/integrations/bbs-open-in-gitpod.png)", "completion": ""}
{"prompt": "The first time you do this, you'll be prompted to authorize with your Bitbucket Server instance.", "completion": ""}
{"prompt": "![Prompt to authorize with Bitbucket Server](../../../static/images/integrations/bbs-auth-prompt.png)", "completion": ""}
{"prompt": "The Bitbucket Server OAuth window will prompt for confirmation to access projects and repositories.", "completion": ""}
{"prompt": "![OAuth confirmation from Bitbucket Server](../../../static/images/integrations/bbs-oauth-popup.png)", "completion": ""}
{"prompt": "Once confirmed, the connection will be saved, and the workspace should open. Subsequent workspaces with repositories from the same Bitbucket Server instance should open without reconnecting.", "completion": ""}
{"prompt": "Q: How do I creating a project in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Bitbucket", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod works with any public or private repository on [Bitbucket](https://bitbucket.org/).", "completion": ""}
{"prompt": "To start a workspace from a Bitbucket project, prefix the Bitbucket project URL with `gitpod.io/#` as described in [Getting started](/docs/introduction/getting-started) or use the [browser extension](/docs/configure/user-settings/browser-extension) to add a convenient Gitpod button to every Bitbucket page.", "completion": ""}
{"prompt": "Q: How do I enable prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: GitHub Enterprise", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I github enterprise?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Each Gitpod user connects their account to GHE the first time they start a workspace.", "completion": ""}
{"prompt": "Q: How do I registering a github enterprise server?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: GHE users connect their Gitpod account to their GHE account by starting a workspace.", "completion": ""}
{"prompt": "To start a workspace, paste the URL of a GHE repository into the New Workspace popup (<Keybind>CtrlCmd + O</Keybind>) in Gitpod, or prefix the repository URL as described in [Getting started](/docs/introduction/getting-started).", "completion": ""}
{"prompt": "![Open in Gitpod form](../../../static/images/integrations/open-in-gitpod.png)", "completion": ""}
{"prompt": "The first time you do this, you will be prompted to authorize with your GHE instance.", "completion": ""}
{"prompt": "![Prompt to authorize with GitHub Enterprise](../../../static/images/integrations/github-enterprise-auth-prompt.png)", "completion": ""}
{"prompt": "The GHE OAuth window will appear, showing the name of the registered Gitpod OAuth app.", "completion": ""}
{"prompt": "![OAuth confirmation from GitHub Enterprise](../../../static/images/integrations/github-enterprise-oauth-popup.png)", "completion": ""}
{"prompt": "If you are trying to open a private or internal repository in GHE, you will be prompted to grant additional authorization before the workspace starts.", "completion": ""}
{"prompt": "![Private repo OAuth authorization from GitHub Enterprise](../../../static/images/integrations/github-enterprise-private-repo-scope-authorization.png)", "completion": ""}
{"prompt": "Q: How do I validating your ghe connection with gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To create a new project with a GHE repository in Gitpod, select the your GHE instance from the list of git providers.", "completion": ""}
{"prompt": "![New project with GitHub Enterprise](../../../static/images/integrations/new-project-with-github-enterprise.png)", "completion": ""}
{"prompt": "You should see your own repositories and those for all organizations to which you have access. Use the dropdown to switch between your personal account and other organization accounts. No additional GitHub app installation is required for each organization.", "completion": ""}
{"prompt": "![New project select GitHub Enterprise repo](../../../static/images/integrations/new-project-select-github-enterprise-repo.png)", "completion": ""}
{"prompt": "Selecting the repository will install a webhook and enable automatic prebuilds for the project.", "completion": ""}
{"prompt": "![New project on internal GitHub Enterprise repository](../../../static/images/integrations/new-project-on-internal-github-enterprise-repo.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: authentication", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "import Keybind from \"$lib/components/keybind.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod works well with public or private repositories from [github.com](https://github.com/).", "completion": ""}
{"prompt": "The first time you login to Gitpod with GitHub, you will be prompted to \"Authorize Gitpod\" to access your GitHub account. This creates a connection between Gitpod and your GitHub account, and installs an OAuth App in your GitHub [settings](https://github.com/settings/applications).", "completion": ""}
{"prompt": "Gitpod uses the name and email from your GitHub account ID to create a new Gitpod user account. This is sufficient to start a Gitpod workspace on a public repository.", "completion": ""}
{"prompt": "![GitHub prompt for Gitpod OAuth App permissions with user:email scope](../../../static/images/integrations/github-oauth-install.png)", "completion": ""}
{"prompt": "Q: How do I starting workspaces?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: GitHub requires `repo` scope permissions to open a workspace on a private repository, or to push code changes from a workspace back to your repository.", "completion": ""}
{"prompt": "You can grant these additional permissions for GitHub at https://gitpod.io/integrations using the context menu on the right.", "completion": ""}
{"prompt": "![Gitpod settings for GitHub integration permissions](../../../static/images/integrations/github-oauth-permissions.png)", "completion": ""}
{"prompt": "Q: How do I authorizing github webhooks?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you encounter errors setting up a Gitpod project on a private repository in a GitHub org, you may need to approve the Gitpod OAuth app for 3rd party access to the org.", "completion": ""}
{"prompt": "1. In https://github.com/settings/connections/applications/484069277e293e6d2a2a.", "completion": ""}
{"prompt": "3. Click on the Grant button.", "completion": ""}
{"prompt": "For more details, see [Issue #8076](https://github.com/gitpod-io/gitpod/issues/8076).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: authentication", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I gitlab?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can start a Gitpod workspace directly from the web pages of a GitLab repository. Simply click on the dropdown arrow next to the _Web IDE_ split button on the project or merge request page, and choose _Gitpod_. The Gitpod workspace will open in a new browser tab. The next time you visit a GitLab page, the last used action will be pre-selected.", "completion": ""}
{"prompt": "![GitLab Integration](../../../static/images/docs/beta/integrations/gitpod-button-project-page.png)", "completion": ""}
{"prompt": "To launch new Gitpod workspaces for issues, branches, specific commits, etc. you can also prefix any GitLab URL with `gitpod.io/#` as described in the [Getting started](/docs/introduction/getting-started) page, or use the [browser extension](/docs/configure/user-settings/browser-extension) to add a convenient _Gitpod_ button to every GitLab page.", "completion": ""}
{"prompt": "Q: How do I enabling prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To use Gitpod on a GitLab repository, you have to connect your GitLab account with your Gitpod account. In the following, we assume that you already have a valid account on the GitLab instance you want to connect to.", "completion": ""}
{"prompt": "Gitpod supports the following use cases:", "completion": ""}
{"prompt": "- [GitLab](#GitLab)", "completion": ""}
{"prompt": "- [Enabling Prebuilds](#enabling-prebuilds)", "completion": ""}
{"prompt": "- [Connecting Your GitLab.com Account](#connecting-your-gitlabcom-account)", "completion": ""}
{"prompt": "- [Disconnecting Your GitLab Account](#disconnecting-your-gitlab-account)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you have initially logged into Gitpod using `GitLab`, your Gitpod account is already connected to your `GitLab.com` account and you can skip this section.", "completion": ""}
{"prompt": "If you have logged into Gitpod with a different provider, you can manually add your GitLab account as follows:", "completion": ""}
{"prompt": "1. Open [the integrations page](https://gitpod.io/integrations/). Scroll to the section about \"Git Providers\" and click on the three dot button that pops up when you hover over the _GitLab_ item. Select _Connect_ from the popup menu.", "completion": ""}
{"prompt": "![GitLab integration connect menu item](../../../static/images/docs/beta/integrations/gitlab-integration-connect-menu-item.png)", "completion": ""}
{"prompt": "2. You will be redirected to GitLab's login page. Log in with your username and password or choose one of the OAuth providers from the list.", "completion": ""}
{"prompt": "3. Once logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click _Authorize_.", "completion": ""}
{"prompt": "![GitLab: Authorize Gitpod](../../../static/images/docs/beta/integrations/authorize-gitpod.png)", "completion": ""}
{"prompt": "4. You'll be directed back to Gitpod's settings page. A green bullet left to _GitLab_ signals you've successfully linked your GitLab account with Gitpod.", "completion": ""}
{"prompt": "![GitLab integration connected](../../../static/images/docs/beta/integrations/gitlab-integration-connected.png)", "completion": ""}
{"prompt": "Q: How do I connecting your self-hosted gitlab account?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. In the same browser, open a new tab and navigate to a repository of the GitLab installation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To disconnect a GitLab account from your Gitpod account:", "completion": ""}
{"prompt": "1. Open [the integrations page](https://gitpod.io/integrations/). Scroll to the section about \"Git Providers\" and click on the three dot button that pops up when you hover over the item of the GitLab provider you want to disconnect. Select _Disconnect_ from the popup menu.", "completion": ""}
{"prompt": "This will only invalidate the current access token in Gitpod. To disable access for good you have to revoke the access to Gitpod on the GitLab side.", "completion": ""}
{"prompt": "Q: How do I registering a self-hosted gitlab installation?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Authentication", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod comes with integrations for [GitLab](/docs/configure/authentication/gitlab), [GitHub](/docs/configure/authentication/github), and [Bitbucket](/docs/configure/authentication/bitbucket) projects. It also provides a [browser extension](/docs/configure/user-settings/browser-extension) or a [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) for Chromium-based browsers (Chrome, Edge, Brave) and Firefox.", "completion": ""}
{"prompt": "`youtube: nXMlnMEP784`", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->", "completion": ""}
{"prompt": "Send us a message through the [contact form](https://www.gitpod.io/contact/support) with your Gitpod account email. After you reach out, we will delete your account so that you can sign up again, which should resolve your issue.", "completion": ""}
{"prompt": "Q: How do I [how to get scm api token from gitpod's gitlab, github or bitbucket integration as environment variable](https://discord.com/channels/816244985187008514/1061997373817094236)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- Create a file called `.gitpod.Dockerfile` and put the following content in it:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "&& printf '%s\\n' 'if [[ \"${GITPOD_WORKSPACE_CONTEXT_URL:-}\" == *gitlab* ]]; then : \"gitlab\"; else : \"github\"; fi; scm_name=\"$_\"' > \"${file}\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- Follow [see in action](/docs/introduction/learn-gitpod/gitpod-yaml#see-it-in-action)", "completion": ""}
{"prompt": "Now you can use `$SCM_TOKEN` environment variable after you commit and create a new workspace, this variable will contain an API token based on the Git context (i.e. Gitlab/GitHub/Bitbucket)", "completion": ""}
{"prompt": "Q: How do I how to use a private github email or custom email for git commits?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- GIT_AUTHOR_EMAIL", "completion": ""}
{"prompt": "and set the custom email address as the value and `*/*` as the scope.", "completion": ""}
{"prompt": "Now all of your new workspaces should use them for Git commits. If you have a workspace running, you can restart it or run `eval \"$(gp env -e)\"` in it.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: billing", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I billing?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod usage is measured in **credits**.", "completion": ""}
{"prompt": "Larger [workspace classes](/docs/configure/workspaces/workspace-classes) use credits at a faster rate. E.g. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.", "completion": ""}
{"prompt": "Your invoice will show the total amount of credits consumed in a billing period.", "completion": ""}
{"prompt": "Q: How do I configure personal billing?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Organization owners can configure billing for an organization in their organization settings.", "completion": ""}
{"prompt": "> \ud83d\udca1 You may need to cancel your existing Professional or Unleashed organization-billing plan first.", "completion": ""}
{"prompt": "![Configure Team Billing](../../static/images/docs/billing/configure-team-billing.png)", "completion": ""}
{"prompt": "Once organization billing is configured, Gitpod will charge the organization billing account for usage by organization members, when they start workspaces on organization projects, and for prebuild usage on organization projects.", "completion": ""}
{"prompt": "![Active Team billing](../../static/images/docs/billing/active-team-billing.png)", "completion": ""}
{"prompt": "Q: How do I configure a usage limit?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can see the details of your personal usage when you click on \"View Usage \u2192\" in your personal billing settings. Organization owners can view usage details for their organization.", "completion": ""}
{"prompt": "![Active Team billing](../../static/images/docs/billing/view-team-usage-details.png)", "completion": ""}
{"prompt": "Q: How do I old pricing plans?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Organization billing](/docs/configure/billing/org-billing)", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->", "completion": ""}
{"prompt": "There are a few built-in Gitpod features that can optimize your prebuild costs, such as:", "completion": ""}
{"prompt": "- **Skip prebuilds** every X commits and use [last successful prebuild](https://www.gitpod.io/docs/configure/projects/last-successful-prebuild)", "completion": ""}
{"prompt": "- **Stop prebuilds** for all branches, PRs and etc. when on GitHub. See [this page](https://www.gitpod.io/docs/references/gitpod-yml/#github). (might not be necessary)", "completion": ""}
{"prompt": "Q: How do I with prebuilds enabled, does every push to my repository cost me credits??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Billing - Organization billing", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > The plans below have been superseded by our [new billing model](/docs/configure/billing).", "completion": ""}
{"prompt": "> This page is for users who are looking to manage or cancel their existing organization billing plans.", "completion": ""}
{"prompt": "Organization billing allows you to pay for your whole organization with a single subscription. You can choose between the **Organization Professional** plan, or the **Organization Unleashed** plan.", "completion": ""}
{"prompt": "With Organization billing, all plan seats will be managed automatically, by auto-subscribing new members, and unsubscribing members who leave.", "completion": ""}
{"prompt": "Organization billing can be accessed under Organization Settings if you are an organization owner.", "completion": ""}
{"prompt": "![Team billing New](../../../static/images/docs/team-billing-new.png)", "completion": ""}
{"prompt": "Once a plan is active, Organization billing will auto-subscribe new members, and the count will update automatically.", "completion": ""}
{"prompt": "Look for the green button to manage your payment details or to cancel your subscription.", "completion": ""}
{"prompt": "![Team billing New](../../../static/images/docs/team-billing-subscribed.png)", "completion": ""}
{"prompt": "Q: How do I good to know?", "completion": ""}
{"prompt": "- With Organization billing, all organization members, including owners, are auto-subscribed to the plan.", "completion": ""}
{"prompt": "- When new members join in the middle of a billing period, you will be billed pro-rata for the remaining fraction of the month.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Billing - Organization plans", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > The organization plans below have been superseded by our [new billing model](/docs/configure/billing).", "completion": ""}
{"prompt": "> This page is for users who are looking to manage or cancel their existing organization plans.", "completion": ""}
{"prompt": "Organization plans allow you to pay for your whole organization with a single subscription.", "completion": ""}
{"prompt": "Organization plans are accessed from [gitpod.io/orgs/](https://gitpod.io/orgs/) in your user settings.", "completion": ""}
{"prompt": "You can choose between the **Organization Professional** plan, or the **Organization Unleashed** plan, and you can specify how many seats you want for each organization. Each member of the Organization Plan will then be able to use Gitpod as if they had purchased their own Professional or Unleashed plan.", "completion": ""}
{"prompt": "![New Team Plan](../../../static/images/docs/team-plan-new.png)", "completion": ""}
{"prompt": "Once the payment process is complete, you can manage organization members, add more organization seats, and also invite organization members using a unique public URL.", "completion": ""}
{"prompt": "| Organization Plan Billing                                               | Manage Organization Plan Members                                                  |", "completion": ""}
{"prompt": "| ![Team Plan Billing](../../../static/images/docs/team-plan-billing.png) | ![Manage Team Plan Members](../../../static/images/docs/team-plan-membership.png) |", "completion": ""}
{"prompt": "You can either directly assign a seat by entering your organization member's GitHub, GitLab, or Bitbucket username, or use the `Invite Members` link from the more actions button to get a shareable link. Send the link to your organization so they can claim a seat.", "completion": ""}
{"prompt": "| Manage an organization                                    | Invite Members                                            |", "completion": ""}
{"prompt": "| ![New Team](../../../static/images/docs/teams-manage.jpg) | ![New Team](../../../static/images/docs/teams-invite.jpg) |", "completion": ""}
{"prompt": "Q: How do I good to know?", "completion": ""}
{"prompt": "- If you add seats in the middle of a monthly billing period, you will be charged for the whole period.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/billing\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section:", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configure gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [Workspaces](/docs/configure/workspaces) are the developer environments where you code in Gitpod.", "completion": ""}
{"prompt": "Workspaces can be created on their own, or as part of a [Project](/docs/configure/projects).", "completion": ""}
{"prompt": "- [Workspace Image](/docs/configure/workspaces/workspace-image)", "completion": ""}
{"prompt": "- [Ports](/docs/configure/workspaces/ports)", "completion": ""}
{"prompt": "- [Multi-repo](/docs/configure/workspaces/multi-repo)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [User settings](/docs/configure/user-settings) allow you to customize your own personal Gitpod experience.", "completion": ""}
{"prompt": "- [Browser Extension](/docs/configure/user-settings/browser-extension)", "completion": ""}
{"prompt": "- [Browser Bookmarklet](/docs/configure/user-settings/browser-bookmarklet)", "completion": ""}
{"prompt": "- [SSH](/docs/configure/user-settings/ssh)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [Projects](/docs/configure/projects) are the connection between Gitpod and one or more git repositories and allow you to manage [Prebuilds](/docs/configure/projects/prebuilds). Projects can be associated with your personal account, or associated with [Organizations](/docs/configure/orgs).", "completion": ""}
{"prompt": "- [Prebuilds](/docs/configure/projects/prebuilds)", "completion": ""}
{"prompt": "- [Last Successful Prebuild](/docs/configure/projects/last-successful-prebuild)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [Organizations](/docs/configure/orgs) in Gitpod allow you to share projects and their settings amongst many organization individuals.", "completion": ""}
{"prompt": "Q: How do I authentication?", "completion": ""}
{"prompt": "- [GitHub](/docs/configure/authentication/github)", "completion": ""}
{"prompt": "- [GitHub Enterprise](/docs/configure/authentication/github-enterprise)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Organizations", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Organizations are used to share [Projects](/docs/configure/projects) amongst organization members.", "completion": ""}
{"prompt": "There are two roles within a Gitpod organization **organization owners** and **organization members**. Organization members and owners can view branches and prebuilds for the projects within an organization. Organization members can open new workspaces directly from a branch in the dashboard. Organization owners can manage other organization members, reset user invite URLs, and manage [Organization billing](/docs/configure/billing/org-billing).", "completion": ""}
{"prompt": "To collaborate with others on projects you can create a **Organization** and invite others as organization members.", "completion": ""}
{"prompt": "Q: How do I view organizations?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To create a new organization:", "completion": ""}
{"prompt": "1. On the top bar, click on the scope selector and select _New Organization_.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once you create an organization you can invite members by using the unique invite URL from the Members page within an organization.", "completion": ""}
{"prompt": "Q: How do I change member permissions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can remove an organization member form the Members list using the more actions button while hovering over the user entry.", "completion": ""}
{"prompt": "Q: How do I filter members in an organization?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can leave an organization using the more actions button in the Members list while hovering over your user entry.", "completion": ""}
{"prompt": "Q: How do I roles?", "completion": ""}
{"prompt": "| --------------------------- | ----- | ------ |", "completion": ""}
{"prompt": "| Edit Organization Settings  | Yes   | No     |", "completion": ""}
{"prompt": "| View Organization Usage     | Yes   | No     |", "completion": ""}
{"prompt": "| Edit Project Variables      | Yes   | Yes    |", "completion": ""}
{"prompt": "| Add Projects                | Yes   | Yes    |", "completion": ""}
{"prompt": "| View Branches               | Yes   | Yes    |", "completion": ""}
{"prompt": "| Trigger Prebuilds           | Yes   | Yes    |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: projects", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I environment variables?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Below are some environment variables which are set automatically by Gitpod and are guaranteed to exist:", "completion": ""}
{"prompt": "- `GITPOD_WORKSPACE_ID`: The Universally Unique Identifier (UUID) associated with the workspace.", "completion": ""}
{"prompt": "- `GITPOD_REPO_ROOT`: Path to the directory where your git repository was cloned inside the workspace.", "completion": ""}
{"prompt": "> **Tip:** Try running **`env | grep GITPOD_`** on a workspace terminal to see all the Gitpod specific environment variables. These can be useful for scripting a dynamic workspace behavior.", "completion": ""}
{"prompt": "Q: How do I reserved prefix?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod supports encrypted, user-specific environment variables.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "mapping a user in your container to the gitpod user in your workspace is supported. This helps if you are using an unprivileged user with your containers", "completion": ""}
{"prompt": "should look like this:", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I ways of setting user-specific environment variables?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The `gp` CLI prints and modifies the persistent environment variables associated with your user for the current repository.", "completion": ""}
{"prompt": "To set the persistent environment variable `foo` to the value `bar` use:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Beware that this does not modify your current terminal session, but rather persists this variable for the next workspace on this repository.", "completion": ""}
{"prompt": "If you want to set that environment variable in your terminal, you can do so using -e:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "If you're using `fish` shell:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "To update the current terminal session with the latest set of persistent environment variables, use:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "If you're using `fish` shell:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "To delete a persistent environment variable use:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: unset foo", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "delete environment variables with a repository pattern of _/foo, foo/_ or _/_.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "gp env [flags]", "completion": ""}
{"prompt": "Flags:", "completion": ""}
{"prompt": "-h, --help     help for env", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I using the account settings?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Repository patterns follow the `owner/repository` pattern. You can use a wildcard on either of the two, e.g. `gitpod-io/*` would make that variable available in all repositories owned by `gitpod-io`.", "completion": ""}
{"prompt": "Subsequently `*/*` makes that variable available in every workspace.", "completion": ""}
{"prompt": "> **Beware:** while the variable values are stored encrypted, they are available as plain text inside a workspace. Be careful when sharing your live workspace or when using `*/*` as repository pattern.", "completion": ""}
{"prompt": "Q: How do I project-specific environment variables?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- The `gp env` command is only linked with [User-Specific Environment Variables](#user-specific-environment-variables) but not Project-Specific Environment Variables. That means, if you set an environment variable with the `gp env` command, it will be saved in [your account settings](https://gitpod.io/variables).", "completion": ""}
{"prompt": "> **Warning:** Care should be taken with secrets. Allowing secrets to be accessed from workspaces will expose those secrets to anyone who can open the workspace.", "completion": ""}
{"prompt": "Q: How do I task terminal-specific environment variables?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ```yaml", "completion": ""}
{"prompt": "- name: Example of setting an environment variable for a task terminal", "completion": ""}
{"prompt": "PRINT_ME: \"Hello World!\"", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Note: The values should be a static string or integer, you can't refer to an existing variable via `env` keyword.", "completion": ""}
{"prompt": "Q: How do I using the task shell?", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "export API_URL=\"$HOSTNAME\"", "completion": ""}
{"prompt": "# Print out the environment variable", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "mkdir -p ~/.local/bin", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export PATH=\"$HOME/.local/bin:$PATH\"", "completion": ""}
{"prompt": "# Now `fzf` can be called without full path from the task shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Note: You can use this method when you need to refer to other variables or want to use scripting to set them conditionally.", "completion": ""}
{"prompt": "See [`.gitpod.yml`](/docs/references/gitpod-yml#tasksnenv) for more details.", "completion": ""}
{"prompt": "Q: How do I providing one-time environment variables via url?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "The syntax for that is:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "The values are [URL encoded](https://www.w3schools.com/tags/ref_urlencode.asp) to allow any non-ascii characters in values.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can run the following command in your Gitpod Workspace terminal to save your environment variables (which you have configured in [Gitpod Environment Variables](https://gitpod.io/variables)) in a different file (e.g.: gitpod.env):", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: projects", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I incremental prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Updating the source code to the latest commit", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When incremental prebuilds are enabled for a project, and a new prebuild is being triggered, Gitpod will do the following:", "completion": ""}
{"prompt": "1. Retrieve the commit history of the current commit to be built (up to 100 ancestor commits)", "completion": ""}
{"prompt": "- A suitable \"base prebuild\" must have been successful (i.e. failed, canceled, or timed out prebuilds are not reused)", "completion": ""}
{"prompt": "- It must be based on the same project configuration as the current commit (for example, if the Docker image or the `init` tasks have recently been changed, older prebuilds are no longer relevant or useful and cannot be used as a \"base\")", "completion": ""}
{"prompt": "- If no suitable base prebuild is found, Gitpod will build the new prebuild from scratch (i.e. a non-incremental prebuild)", "completion": ""}
{"prompt": "Q: How do I when are incremental prebuilds useful??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "(time_to_load_older_prebuild + incremental_rebuild_duration) < full_prebuild_duration", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Your regular prebuilds take longer than 5 minutes (the longer they take, the bigger the potential speedup is)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: projects", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I projects?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The Projects page for a organization shows a card for each project.", "completion": ""}
{"prompt": "Cards show the name, repository URL, quick links to project branches and prebuilds, and the branch and timestamp of the latest prebuild.", "completion": ""}
{"prompt": "Q: How do I add a new project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Organization members can configure Prebuilds, and set the workspace class used for project workspaces, in project settings.", "completion": ""}
{"prompt": "![Project Settings](../../../static/images/docs/project-settings.png)", "completion": ""}
{"prompt": "Q: How do I remove a project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I [new project page is stuck at fetching repositories](https://discord.com/channels/816244985187008514/1056255866791272488)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Make sure correct scopes are set for those Git integration providers as well.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: projects", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I last successful prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Updating the source code to the latest commit", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- and it will be _ready quickly_: your IDE Terminal will run either no build at all (if none is needed), or just a quick incremental rebuild (faster than a full build \u267b\ufe0f)", "completion": ""}
{"prompt": "Q: How do I skip prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- On the other hand, if your prebuilds finish quickly, and you typically don't push new commits very often, it may be fine to not skip any prebuild (i.e. `skip prebuilds = 0`)", "completion": ""}
{"prompt": "Please feel free to adjust and experiment with this value.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: projects", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<OpenGraph", "completion": ""}
{"prompt": "description:", "completion": ""}
{"prompt": "title: \"Gitpod Prebuilds\",", "completion": ""}
{"prompt": "}}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Prebuilds reduce wait time, by installing dependencies or running builds **before** you start a new workspace.", "completion": ""}
{"prompt": "`youtube: DwkoOz1GSVg`", "completion": ""}
{"prompt": "Q: How do I .gitpod.yml?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "npm install", "completion": ""}
{"prompt": "npm start", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Use the following steps to enable prebuilds on your repository:", "completion": ""}
{"prompt": "- [Create a project](/docs/configure/projects/prebuilds#projects-and-prebuilds) for the repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: For prebuilds to run automatically, you also need a [project](/docs/configure#projects) for your repository.", "completion": ""}
{"prompt": "To create a new project:", "completion": ""}
{"prompt": "- Click on _New Project_ in the Projects page of one your organizations.", "completion": ""}
{"prompt": "<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ARepl extension example\" src=\"/images/docs/projects/prebuilds.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "- If necessary, you will be prompted for additional authorization to install and configure the Gitpod GitHub app,", "completion": ""}
{"prompt": "- Select the repository for your project.", "completion": ""}
{"prompt": "Q: How do I view prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Prebuilds can be triggered again which can be particularly useful when debugging an unexpected failure.", "completion": ""}
{"prompt": "To rerun a prebuild:", "completion": ""}
{"prompt": "1. Navigate to your project and select the **Prebuilds** tab.", "completion": ""}
{"prompt": "3. Select **Rerun Prebuild**.", "completion": ""}
{"prompt": "Q: How do I start workspace based on existing prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Select the prebuild you wish to start a workspace on top of.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod can trigger a prebuild whenever there is a commit to a repository. That prebuild will then be used for all new workspaces opened on that branch. This is ideal for working together on branches for testing or code reviews.", "completion": ""}
{"prompt": "Prebuild users will see a message in their workspace terminal like this:", "completion": ""}
{"prompt": "```txt", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I workspace directory only?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Environment variables which are defined in project settings will be visible in prebuilds. This is useful for prebuilds to access restricted services.", "completion": ""}
{"prompt": "**WARNING**", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: All prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.", "completion": ""}
{"prompt": "For a GitLab or Bitbucket repository, allow Gitpod to install repository webhooks, by granting `api` permissions in your [git provider integrations](https://gitpod.io/integrations)", "completion": ""}
{"prompt": "For GitLab, if you want to trigger new Gitpod prebuilds for specific branches only, you can configure this in your GitLab [project settings](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#branch-filtering).", "completion": ""}
{"prompt": "By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and for pull/merge requests coming from the same repository.", "completion": ""}
{"prompt": "> **Note**: Prebuilds are executed as the user who enabled them. This means that if you want to use", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `init`", "completion": ""}
{"prompt": "Note the absence of the `command` task. Since this task may potentially run indefinitely, e.g. if you start a dev server, Gitpod does not execute the `command` task during prebuilds.", "completion": ""}
{"prompt": "Prebuilds have a timeout of 1 hour. If your `before` and `init` tasks combined exceed 1 hour, your prebuild will fail. Subscribe to [this issue](https://github.com/gitpod-io/gitpod/issues/6283) for updates when this limit will be lifted.", "completion": ""}
{"prompt": "Each prebuild starts with a clean environment. In other words, Gitpod does not cache artifacts between prebuilds.", "completion": ""}
{"prompt": "Incremental Prebuilds use an earlier, successful Prebuild as the base. This can reduce the duration of your Prebuilds significantly, especially if they normally take more than ten minutes to complete. Incremental Prebuilds can be found under the project settings in your Gitpod dashboard.", "completion": ""}
{"prompt": "Q: How do I github-specific configuration?", "completion": ""}
{"prompt": "By default, prebuilds are run on push to the default branch and for each pull request coming from the same repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "github:", "completion": ""}
{"prompt": "# enable for the default branch (defaults to true)", "completion": ""}
{"prompt": "# enable for all branches in this repo (defaults to false)", "completion": ""}
{"prompt": "# enable for pull requests coming from this repo (defaults to true)", "completion": ""}
{"prompt": "# enable for pull requests coming from forks (defaults to false)", "completion": ""}
{"prompt": "# add a check to pull requests (defaults to true)", "completion": ""}
{"prompt": "# add a \"Review in Gitpod\" button as a comment to pull requests (defaults to false)", "completion": ""}
{"prompt": "# add a \"Review in Gitpod\" button to the pull request's description (defaults to false)", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I additional github integration?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: By default, Gitpod registers itself as a check to pull requests - much like a continuous integration system would do.", "completion": ""}
{"prompt": "The default behavior, however, would not make the checks fail when the prebuild failed.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "github:", "completion": ""}
{"prompt": "addCheck: prevent-merge-on-error", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "github:", "completion": ""}
{"prompt": "addCheck: false", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod can add a comment with an \"Open in Gitpod\" button to your pull requests.", "completion": ""}
{"prompt": "You can enable this behaviour in the `.gitpod.yml` file in your default branch:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I badge?", "completion": ""}
{"prompt": "This approach produces fewer GitHub notifications, but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.", "completion": ""}
{"prompt": "You can enable this behaviour in the `.gitpod.yml` file in your default branch:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "The `addComment` and `addBadge` behaviours are not mutually exclusive (i.e. enabling one does not disable the other).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is not necessarily best practice to have user specific environment variables in a prebuild `init` block, but sometimes there are build time requirements that mean certain tokens need setting or files need creating. Environment variables defined within your Gitpod Variables preferences are not imported by default, but they can be accessed with the following command within a `before` or `init` block:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: |", "completion": ""}
{"prompt": "echo \"Hello ${MY_VAR}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the authentication used by your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.", "completion": ""}
{"prompt": "Gitpod does not implement user authentication itself, but integrates with other auth provider using [OAuth2](https://oauth.net/2/).", "completion": ""}
{"prompt": "the same time making sure every user has proper access to their Git repository.", "completion": ""}
{"prompt": "Gitpod supports the following authentication providers:", "completion": ""}
{"prompt": "- github.com", "completion": ""}
{"prompt": "- gitlab.com", "completion": ""}
{"prompt": "- GitLab Enterprise Edition in version 11.7.x and higher", "completion": ""}
{"prompt": "- Custom Auth Provider \u2013 Inquiry TypeFox for a quote", "completion": ""}
{"prompt": "Q: How do I github?", "completion": ""}
{"prompt": "Follow the guide linked above and:", "completion": ""}
{"prompt": "- set \"Authentication callback URL\" to after replacing example.com with your domain name:", "completion": ""}
{"prompt": "https://example.com/auth/github/callback", "completion": ""}
{"prompt": "- copy the following values and configure them in `values.yaml`:", "completion": ""}
{"prompt": "- `clientSecret`", "completion": ""}
{"prompt": "Q: How do I gitlab?", "completion": ""}
{"prompt": "Follow the guide linked above and:", "completion": ""}
{"prompt": "- set \"Authentication callback URL\" to:", "completion": ""}
{"prompt": "https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback", "completion": ""}
{"prompt": "- set \"Scopes\" to `api`, `read_user` and `read_repository`.", "completion": ""}
{"prompt": "- `clientId` is the \"Application ID\" from the GitLab OAuth application", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the database used by your Gitpod installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.", "completion": ""}
{"prompt": "Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we'd recommend in a production setting) you can use that one. You have the following options:", "completion": ""}
{"prompt": "- Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "echo exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash", "completion": ""}
{"prompt": "cp gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```sql", "completion": ""}
{"prompt": "source db-init/00-testdb-user.sql;", "completion": ""}
{"prompt": "source db-init/02-create-and-init-sessions-db.sql;", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "db:", "completion": ""}
{"prompt": "port: 3306", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "mysql:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "1.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configure the docker registry used by your gitpod self-hosted installation?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "To this end, Gitpod requires a container registry where it can push the images it builds.", "completion": ""}
{"prompt": "By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we'd recommend in a production setting) you can use that one. You have the following options:", "completion": ""}
{"prompt": "- Integrated Docker registry: If not disabled, this Docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.", "completion": ""}
{"prompt": "- Own Docker registry: Gitpod can connect to your own Docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.", "completion": ""}
{"prompt": "This helm chart can either deploy its own registry (default but requires [HTTPS certs](./ingress)) or use an existing one.", "completion": ""}
{"prompt": "Q: How do I configuration?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "components:", "completion": ""}
{"prompt": "registryCerts: []", "completion": ""}
{"prompt": "# name must not end with a \"/\"", "completion": ""}
{"prompt": "secretName: image-builder-registry-secret", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "pullSecret:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "enabled: false", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "mkdir -p secrets", "completion": ""}
{"prompt": "cp ~/.docker/config.json secrets/registry-auth.json", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Prerequisites:", "completion": ""}
{"prompt": "- `gcloud` [installed](https://cloud.google.com/sdk/docs/quickstart) and [authenticated](https://cloud.google.com/sdk/gcloud/reference/auth/login)", "completion": ""}
{"prompt": "How to use Google Cloud Registry as Docker registry for Gitpod:", "completion": ""}
{"prompt": "1.  Go to <a class=\"no-nowrap\" href=\"https://console.cloud.google.com/gcr/images/%3Cyour-project-id%3E?project=%3Cyour-project-id%3E\">https://console.cloud.google.com/gcr/images/\\<your-project-id>?project=\\<your-project-id></your-project-id></your-project-id></a> and hit \"Enable Registry API\" (if not already enabled).", "completion": ""}
{"prompt": "1.  Execute the following commands:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding $PROJECT_ID --member=\"serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\" --role=roles/storage.admin", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in a `secrets/registry-auth.json` like this:", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"auths\": {", "completion": ""}
{"prompt": "\"auth\": \"<long-base64-string>\"", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configuring gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Configure the Docker registry used by your Gitpod Self-Hosted installation](./configuration/docker-registry)", "completion": ""}
{"prompt": "- [Configure the Kubernetes nodes in your Gitpod Self-Hosted installation](./configuration/nodes)", "completion": ""}
{"prompt": "- [Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation](./configuration/workspaces)", "completion": ""}
{"prompt": "- [Configure the VSX registry used by your Gitpod Self-Hosted installation](./configuration/vsx-registry)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configure the ingress to your gitpod installation?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- HTTPS certificates.", "completion": ""}
{"prompt": "Q: How do I 1. dns entries?", "completion": ""}
{"prompt": "As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "*.your-domain.com", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "*.gitpod.your-domain.com", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl describe svc proxy | grep -i ingress", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "components:", "completion": ""}
{"prompt": "loadBalancerIP: <your-IP>", "completion": ""}
{"prompt": "Specifying the `loadBalancerIP` make sure it stays the same across all redeploys.", "completion": ""}
{"prompt": "Q: How do I 2. https?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```text", "completion": ""}
{"prompt": "|- tls.crt", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The most accessible means of obtaining HTTPS certificates is using [Let's Encrypt](https://letsencrypt.org/). It provides free certificates to anybody who can prove ownership of a domain.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export DOMAIN=your-domain.com", "completion": ""}
{"prompt": "export WORKDIR=$PWD/letsencrypt", "completion": ""}
{"prompt": "certbot certonly \\", "completion": ""}
{"prompt": "--work-dir $WORKDIR/work \\", "completion": ""}
{"prompt": "--manual \\", "completion": ""}
{"prompt": "--email $EMAIL \\", "completion": ""}
{"prompt": "--agree-tos \\", "completion": ""}
{"prompt": "-d *.$DOMAIN \\", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: mkdir -p secrets/https-certificates", "completion": ""}
{"prompt": "cp $WORKDIR/config/live/privkey.pem secrets/https-certificates/tls.key", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the Kubernetes nodes in your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.", "completion": ""}
{"prompt": "Configure the nodes (computers or virtual machines) that Kubernetes runs Gitpod's workspace pods on.", "completion": ""}
{"prompt": "Q: How do I assign workload to nodes?", "completion": ""}
{"prompt": "Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:", "completion": ""}
{"prompt": "- `gitpod.io/workload_meta=true` which marks the \"meta\" nodes and", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod relies on the node's filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in `/data` and Theia is copied to `/theia`. Depending on your node setup the root filesystem maybe **read-only** or **slow**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "imageBuilder:", "completion": ""}
{"prompt": "# Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon", "completion": ""}
{"prompt": "hostDindData: /mnt/disks/ssd0/docker", "completion": ""}
{"prompt": "# Workspace data is stored on the nodes. This setting configures where on the node the workspace data lives.", "completion": ""}
{"prompt": "hostWorkspaceArea: /mnt/disks/ssd0/workspaces", "completion": ""}
{"prompt": "2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.", "completion": ""}
{"prompt": "> Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configure the storage used by your gitpod installation?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Bring your own storage bucket: Configure Gitpod to either connect to:", "completion": ""}
{"prompt": "- a Google Cloud Storage compatible storage solution", "completion": ""}
{"prompt": "Q: How do I a) configure custom minio instance?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "components:", "completion": ""}
{"prompt": "remoteStorage:", "completion": ""}
{"prompt": "minio:", "completion": ""}
{"prompt": "accessKey: enterKeyHere", "completion": ""}
{"prompt": "tmpdir: /tmp", "completion": ""}
{"prompt": "# Disable built-in minio instance", "completion": ""}
{"prompt": "enabled: false", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1.  Consult the chart's documentation at https://helm.min.io/", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "accessKey: add-a-radom-access-key-here", "completion": ""}
{"prompt": "# insert custom config here", "completion": ""}
{"prompt": "3.  Redeploy Gitpod using `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configure the vsx registry used by your gitpod self-hosted installation?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To connect to private OpenVSX registry, perform the following steps:", "completion": ""}
{"prompt": "1.  Merge the following into your `values.custom.yaml`:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "openVsxProxy:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Replace `open-vsx.org` with the domain your registry is available at.", "completion": ""}
{"prompt": "2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.", "completion": ""}
{"prompt": "Q: How do I additional resources?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.", "completion": ""}
{"prompt": "Q: How do I sizing?", "completion": ""}
{"prompt": "If you want to change the default sizing (~ 8GiB per workspace) you should", "completion": ""}
{"prompt": "1.  Merge the following into your `values.custom.yaml`:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "# desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.", "completion": ""}
{"prompt": "# Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which", "completion": ""}
{"prompt": "workspaceSizing:", "completion": ""}
{"prompt": "cpu: \"1m\"", "completion": ""}
{"prompt": "storage: \"5Gi\"", "completion": ""}
{"prompt": "cpu: \"5\"", "completion": ""}
{"prompt": "dynamic:", "completion": ""}
{"prompt": "# Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).", "completion": ""}
{"prompt": "# For example:", "completion": ""}
{"prompt": "#   - budget: 90000", "completion": ""}
{"prompt": "#   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000", "completion": ""}
{"prompt": "#     limit: 400", "completion": ""}
{"prompt": "#   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000", "completion": ""}
{"prompt": "#     limit: 200", "completion": ""}
{"prompt": "# if there are no buckets configured, the dynamic CPU limiting is disabled.", "completion": ""}
{"prompt": "buckets: []", "completion": ""}
{"prompt": "controlPeriod: \"15m\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Gitpod Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](./latest) instead.", "completion": ""}
{"prompt": "Gitpod, just as you know it from [gitpod.io](https://gitpod.io), can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.", "completion": ""}
{"prompt": "- [Requirements for Gitpod Self-Hosted](./helm-deprecated/requirements)", "completion": ""}
{"prompt": "- [Configuring Gitpod Self-Hosted](./helm-deprecated/configuration)", "completion": ""}
{"prompt": "- [Updating Gitpod Self-Hosted](./helm-deprecated/updating)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I install gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Install Gitpod Self-Hosted on Kubernetes", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.", "completion": ""}
{"prompt": "This section describes how to install Gitpod on any Kubernetes cluster using [Helm](https://helm.sh). This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository [charts.gitpod.io](https://charts.gitpod.io), charts for branch-builds can be found [here](#install-branch-build), and the source of the charts is in our [public git repository](https://github.com/gitpod-io/gitpod/blob/main/chart/).", "completion": ""}
{"prompt": "For some platforms we offer [Terraform](https://www.terraform.io/) scripts that ease the infrastructure setup. Once the script has created the necessary infrastructure it will output a `values.terraform.yaml` that contains infrastructure-specific configuration for the `helm` deployment.", "completion": ""}
{"prompt": "Q: How do I prerequisites?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To install Gitpod in your Kubernetes cluster, follow these steps:", "completion": ""}
{"prompt": "1. Create a file `values.custom.yaml` with the following content (please replace the keys/secrets, for instance with `openssl rand -hex 20`):", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "authentication:", "completion": ""}
{"prompt": "password: your-registry-password", "completion": ""}
{"prompt": "auth:", "completion": ""}
{"prompt": "password: your-secret-rabbitmq-password", "completion": ""}
{"prompt": "accessKey: your-random-access-key", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You should replace the keys with 2 different random strings unique for your installation.", "completion": ""}
{"prompt": "1. Run the following commands in your local terminal:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "1. Configure [domain and https](../configuration/ingress).", "completion": ""}
{"prompt": "1. Run `kubectl get pods` and verify that all pods are in state `RUNNING`. If some are not, please see the [Troubleshooting Guide](../troubleshooting).", "completion": ""}
{"prompt": "1. Go to `https://<your-domain.com>` and follow the steps to complete the installation.", "completion": ""}
{"prompt": "Q: How do I upgrade?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: By default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use and/or a bigger audience:", "completion": ""}
{"prompt": "- [**Database**](../configuration/database): Configure where Gitpod stores all internal runtime data.", "completion": ""}
{"prompt": "- [**Docker Registry**](../configuration/docker-registry): Configure where Gitpod stores workspace images.", "completion": ""}
{"prompt": "Q: How do I customization?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [**Workspaces**](../configuration/workspaces): Configure workspace sizing.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I installation requirements for gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod Self-Hosted runs well on:", "completion": ""}
{"prompt": "- Amazon Elastic Kubernetes Service", "completion": ""}
{"prompt": "- K3s", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: These platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?", "completion": ""}
{"prompt": "- [Red Hat\u00ae OpenShift\u00ae](https://github.com/gitpod-io/gitpod/issues/5409)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: We strongly recommend deploying a dedicated kubernetes cluster just for Gitpod Self-Hosted.", "completion": ""}
{"prompt": "Here are the minimum requirements:", "completion": ""}
{"prompt": "- Either Ubuntu 18.04 with \u2265 v5.4 kernel or Ubuntu 20.04 with \u2265 v5.4 kernel.", "completion": ""}
{"prompt": "- Kubernetes \u2265 1.18.", "completion": ""}
{"prompt": "- helm \u2265 3.6.", "completion": ""}
{"prompt": "Q: How do I minimum compute resources?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I dns?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "your-domain.com", "completion": ""}
{"prompt": "*.ws.your-domain.com", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.your-domain.com", "completion": ""}
{"prompt": "*.ws.gitpod.your-domain.com", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Gitpod is designed to serve traffic directly to your local network or internet.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Gitpod requires trusted HTTPS certificates. While there is no hard requirement on any certificate authority, we recommend using an [ACME certificate](https://caddyserver.com/docs/automatic-https#acme-challenges) issuer (such as [ZeroSSL](https://zerossl.com) or [LetsEncrypt](https://letsencrypt.org)) to automatically renew and install certificates as we do for [gitpod.io](https://gitpod.io).", "completion": ""}
{"prompt": "- The HTTPS certificates for your domain must include `your-domain.com`, `*.your-domain.com` and `*.ws.your-domain.com`. Beware that wildcard certificates are valid for one level only (i.e. `*.a.com` is not valid for `c.b.a.com`)", "completion": ""}
{"prompt": "Q: How do I storage?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Gitpod uses a MySQL database to store user data.", "completion": ""}
{"prompt": "- For production settings, we recommend operating your own MySQL database (version v5.7 or newer).", "completion": ""}
{"prompt": "Q: How do I supported web browsers?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Google Chrome", "completion": ""}
{"prompt": "- Microsoft Edge (Chromium)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/helm-deprecated", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I troubleshooting gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: `kubectl describe pod ws-daemon-...` gives:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1.  `ssh` onto the node, `mount | grep rootfs` and find the directory where your containers are stored. Common paths are:", "completion": ""}
{"prompt": "- `/run/containerd/io.containerd.runtime.v1.linux/k8s.io`", "completion": ""}
{"prompt": "- `/run/containerd/io.containerd.runtime.v2.task/k8s.io`", "completion": ""}
{"prompt": "2.  _Merge_ the following into your `values.custom.yaml`:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "wsDaemon:", "completion": ""}
{"prompt": "nodeRoots:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "3.  Do an `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.", "completion": ""}
{"prompt": "> Example: For `k3s` a common configuration looks like this:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "wsDaemon:", "completion": ""}
{"prompt": "containerd:", "completion": ""}
{"prompt": "nodeRoots:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I 2. `helm install` fails with: \"minio access key is required, please add a value to your values.yaml\"?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1.  Follow the [Upgrade Guide](./updating).", "completion": ""}
{"prompt": "Q: How do I 3. after upgrade, the `minio` pod is stuck in `containercreating`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1.  `kubectl scale deployments/minio --replicas=0`", "completion": ""}
{"prompt": "1.  `kubectl scale deployments/minio --replicas=1`", "completion": ""}
{"prompt": "1.  Wait until the pod comes up.", "completion": ""}
{"prompt": "Q: How do I 3. `agent-smith` daemonset fails in deployment?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Add the following to your `values.yaml` file to disable agent-smith:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "agentSmith:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I 4. workspaces stopping once container image downloaded?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "find /lib/modules/ -name '*shiftfs*'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Add the following to your `values.yaml` file to use fuse-overlayfs:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "wsDaemon:", "completion": ""}
{"prompt": "fsShift: fuse", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!-- svelte-ignore a11y-img-redundant-alt -->", "completion": ""}
{"prompt": "![Request createWorkspace failed with message: 7 PERMISSION_DENIED: cannot resolve workspace image: not authorized Unknown Error](../../../static/images/docs/self-hosted/troubleshooting/registry-unauthorized.jpeg)", "completion": ""}
{"prompt": "If you are using the internal Docker registry, you will need to specify the username and password so your Gitpod instance can access it.", "completion": ""}
{"prompt": "Q: How do I solution?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "components:", "completion": ""}
{"prompt": "authentication:", "completion": ""}
{"prompt": "password: gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Updating Gitpod Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Deprecated Content**", "completion": ""}
{"prompt": "> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.", "completion": ""}
{"prompt": "Q: How do I upgrading gitpod from v0.9.0 to v0.10.0?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod by default ships with an in-cluster docker-registry. If you use that one (instead of an external one), add the following to your `values.custom.yaml`:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "authentication:", "completion": ""}
{"prompt": "password: your-registry-password", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "helm del gitpod", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I certificate file names changed?", "completion": ""}
{"prompt": "To adjust this in your existing installation:", "completion": ""}
{"prompt": "1. execute the following inside your config folder:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "mv secrets/https-certificates/privkey.pem secrets/https-certificates/tls.key", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With version 0.10.0 there is one change that requires user action regarding the RabbitMQ messagebus:", "completion": ""}
{"prompt": "Q: How do I rabbitmq now requires explicitly set password and username?", "completion": ""}
{"prompt": "To do so add the following to your `values.custom.yaml`:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "auth:", "completion": ""}
{"prompt": "password: your-secret-rabbitmq-password", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With version 0.7.0 there are two major changes that require a user action. Both relate to the remote storage.", "completion": ""}
{"prompt": "Q: How do I built-in minio is now accessible at minio.your-gitpod-domain.com?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "minio:", "completion": ""}
{"prompt": "secretKey: add-a-radom-secret-key-here", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component `wsDaemon` to the new component `contentService`. See the [Storage Guide](./configuration/storage) for an example.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Install Gitpod in an Air-Gapped Network", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Before you can start with the installation, you need to prepare the following:", "completion": ""}
{"prompt": "1. You need to have a Docker registry available in your network where you can push images to and where your Kubernetes cluster can pull images from.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. KOTS Airgap Bundle `kotsadm.tar.gz` <br/> (provides you with the Docker images you need for the Gitpod KOTS installer)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Unpack the KOTS CLI package `kots_linux_amd64.tar.gz`, rename the binary `kots` to `kubectl-kots`, and copy it to `/usr/local/bin/` (or to any other folder that is in your `PATH`).", "completion": ""}
{"prompt": "Now, you should be able to run the following command:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I install gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "$ kubectl kots admin-console push-images \\", "completion": ""}
{"prompt": "<registry> \\", "completion": ""}
{"prompt": "--registry-password <password>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------ | --------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| `<username>` | The username for the registry that has write access (is allowed to push).                                 |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "$ kubectl kots install gitpod \\", "completion": ""}
{"prompt": "--kotsadm-registry <registry> \\", "completion": ""}
{"prompt": "--registry-password <password>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------- | ------------------------------------------------------------------------ |", "completion": ""}
{"prompt": "| `<registry>`  | The hostname of your registry, e.g. `my-registry.example.com:443`.       |", "completion": ""}
{"prompt": "| `<password>`  | The password to the username.                                            |", "completion": ""}
{"prompt": "You will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "\u2022 Go to http://localhost:8800 to access the Admin Console", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- username and password (read access), as well as", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I component customization?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "In this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and has the [required components](../requirements) installed and configured (at least cert-manager is needed).", "completion": ""}
{"prompt": "This guide assumes that you are using our default installation method from our [installation guide](../installing-gitpod).", "completion": ""}
{"prompt": "Q: How do I rationale?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: All web traffic enters the application through the `Proxy` component. By default, this is a `LoadBalancer` type which will expose the application through the cloud provider's load balancer.", "completion": ""}
{"prompt": "Under certain circumstances, this may be undesirable. Under the \"Advanced\" section, you may select a different service type - all [Kubernetes service types](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) are supported, except `ExternalName`. If you are using anything other than `LoadBalancer`, you are responsible for configuring your network to route traffic through to the `proxy` service.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I applying custom annotations, labels and environment variables?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "In this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and has the [required components](../requirements) installed and configured (at least cert-manager is needed).", "completion": ""}
{"prompt": "This guide assumes that you are using our default installation method from our [installation guide](../installing-gitpod).", "completion": ""}
{"prompt": "Q: How do I rationale?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Before you start, you will need to create a YAML file that is subsequently used to describe your customizations. The structure is based upon the standard Kubernetes resource definition.", "completion": ""}
{"prompt": "Once created, this file can be uploaded to the Installation Admin UI during installation under the advanced features section (bottom).", "completion": ""}
{"prompt": "![kots-advanced-customization](../../static/images/docs/self-hosted/kots-advanced-customization.png)", "completion": ""}
{"prompt": "Q: How do I annotations and labels?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: For environment variables, these must match `metadata.name`. `apiVersion` and `kind` are ignored as these are only implemented on resources with containers.", "completion": ""}
{"prompt": "Any properties in `spec.env` are then applied. These should have a `name` and `value` as per the Kubernetes specification.", "completion": ""}
{"prompt": "Q: How do I example configuration?", "completion": ""}
{"prompt": "customization:", "completion": ""}
{"prompt": "kind: \"*\"", "completion": ""}
{"prompt": "name: \"*\"", "completion": ""}
{"prompt": "appliedToAll: value", "completion": ""}
{"prompt": "labels:", "completion": ""}
{"prompt": "hello: world", "completion": ""}
{"prompt": "kind: \"Deployment\"", "completion": ""}
{"prompt": "name: \"ws-manager\"", "completion": ""}
{"prompt": "hello: ws-manager", "completion": ""}
{"prompt": "hello: ws-manager", "completion": ""}
{"prompt": "env:", "completion": ""}
{"prompt": "value: world", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "Q: How do I apps/v1/daemonset ws-daemon?", "completion": ""}
{"prompt": "kind: DaemonSet", "completion": ""}
{"prompt": "labels:", "completion": ""}
{"prompt": "component: ws-daemon # system-value", "completion": ""}
{"prompt": "hello: world", "completion": ""}
{"prompt": "appliedToAll: value", "completion": ""}
{"prompt": "name: ws-daemon", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: apiVersion: apps/v1", "completion": ""}
{"prompt": "metadata:", "completion": ""}
{"prompt": "app: gitpod", "completion": ""}
{"prompt": "appliedToAll: value", "completion": ""}
{"prompt": "annotations:", "completion": ""}
{"prompt": "hello: ws-manager", "completion": ""}
{"prompt": "spec:", "completion": ""}
{"prompt": "# The custom annotations/labels are inherited from the Deployment spec", "completion": ""}
{"prompt": "annotations:", "completion": ""}
{"prompt": "gitpod.io/checksum_config: xxxx", "completion": ""}
{"prompt": "labels:", "completion": ""}
{"prompt": "component: ws-manager", "completion": ""}
{"prompt": "hello: ws-manager", "completion": ""}
{"prompt": "spec:", "completion": ""}
{"prompt": "- env:", "completion": ""}
{"prompt": "value: world", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: This is an example configuration for working with [AWS Load Balancer Controllers](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/) of the [Network Load Balancer](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/) variety, when deployed in [AWS EKS](https://aws.amazon.com/eks/). This example creates a load balancer with a public IP, references two subnets: `[subnet-012e8ff1de0654321,subnet-0a6d28629bc123456]`, tunes timeouts, and ensures the tags `project:gitpod-docs` and `team:cs` are applied to the AWS resources it creates.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "customization:", "completion": ""}
{"prompt": "kind: \"Service\"", "completion": ""}
{"prompt": "name: \"proxy\"", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-scheme: \"internet-facing\"", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-subnets: \"subnet-012e8ff1de0654321,subnet-0a6d28629bc123456\"", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: \"project=gitpod-docs,team=cs\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This limitation has been removed as of [`2022.08.0`](https://github.com/gitpod-io/gitpod/releases/tag/2022.08.0).", "completion": ""}
{"prompt": "Labels are immutable on some Kubernetes resources, such as `Deployments`, `DaemonSets` and `StatefulSets`.", "completion": ""}
{"prompt": "If you wish to change a label on one of these resources, you must destroy that resource first. This can be achieved by running `kubectl delete <resource> --namespace <namespace> <name>` prior to running the KOTS deployment.", "completion": ""}
{"prompt": "In the event of there being multiple resources that need to be amended, you can run `helm uninstall --namespace <namespace> gitpod`. If you are using an in-cluster database or object storage, you should not run this command without taking a backup of your persistent volumes first.", "completion": ""}
{"prompt": "> **WARNING:** If deleting Kubernetes resources, your Gitpod instance is likely to become inaccessible and unstable. This should not be attempted while it is being used for normal development as data loss is likely.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Private Registries", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Note:** this will apply to your entire installation. If you are using a private registry for your image, please ensure you add it to the allow list and provide credentials for it - for guidance, see [using private registries](/docs/configure/self-hosted/latest/advanced/private-registries).", "completion": ""}
{"prompt": "Currently, the default workspace image can only be set via the [config patch](/docs/configure/self-hosted/latest/config-patches). In the future, we plan to also allow you to set this via the installation UI.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "workspaceImage: string", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I setting up your eks cluster with dual alb + nlb load balancers?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "If you are unable to use an AWS classic load balancer (CLB) (e.g. because you want to use SSL Certificates generated by AWS) you need to set up an Application Load Balancer (ALB) for HTTPS traffic (e.g. when using VS Code in the browser). If you wish to use Desktop IDEs together with Gitpod Self-Hosted, which use SSH for networking, and thus require a Level 4 load balancer, you also need to create a Network Load balancer (NLB) (which is a Level 4 load balancer that can handle ssh traffic). AWS' ALB is a level 7 load balancer and can only handle HTTPS traffic.", "completion": ""}
{"prompt": "This guide shows how to install both an ALB and an NLB into an EKS cluster. It is meant to be used as a supplement to the [Single Cluster Reference Architecture (AWS)](../reference-architecture/single-cluster-ref-arch) which only installs a CLB by default. You will configure your DNS to point ssh traffic to the NLB and HTTPS traffic to the ALB.", "completion": ""}
{"prompt": "> **Note:** This guide assumes that you will be using AWS to manage your SSL certificates.", "completion": ""}
{"prompt": "Q: How do I setting up an alb and nlb?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Because we need to use an internal CA for communication that has to be distributed to the nodes, we need to ensure all managed nodes have `/etc/containerd/certs.d` in their `/etc/containerd/config.toml` to load the self-signed certificate used for internal communication.", "completion": ""}
{"prompt": "```toml", "completion": ""}
{"prompt": "config_path = \"/etc/containerd/certs.d\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "apt-get update && apt-get install -y python3-pip", "completion": ""}
{"prompt": "/usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1", "completion": ""}
{"prompt": "from mergedeep import merge", "completion": ""}
{"prompt": "merge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})", "completion": ""}
{"prompt": "toml.dump(c, f)", "completion": ""}
{"prompt": "service containerd restart", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "cat << CONFIG >> /etc/containerd/config.toml", "completion": ""}
{"prompt": "[plugins.\"io.containerd.grpc.v1.cri\".registry]", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "<details>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "overrideBootstrapCommand: |", "completion": ""}
{"prompt": "set -x", "completion": ""}
{"prompt": "export NODEGROUP=services", "completion": ""}
{"prompt": "declare -a LABELS=(", "completion": ""}
{"prompt": "gitpod.io/workload_meta=true", "completion": ""}
{"prompt": ")", "completion": ""}
{"prompt": "export KUBELET_EXTRA_ARGS=\"$(printf -- \"--node-labels=%s\" $(IFS=$','; echo \"${LABELS[*]}\"))\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "pip3 install toml mergedeep", "completion": ""}
{"prompt": "import toml", "completion": ""}
{"prompt": "c = toml.load('/etc/containerd/config.toml')", "completion": ""}
{"prompt": "with open('/etc/containerd/config.toml', 'w') as f:", "completion": ""}
{"prompt": "EOF", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</details>", "completion": ""}
{"prompt": "Q: How do I 1. install aws load balancer controller?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "helm repo add eks https://aws.github.io/eks-charts", "completion": ""}
{"prompt": "helm upgrade aws-load-balancer-controller \\", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--install \\", "completion": ""}
{"prompt": "--namespace kube-system \\", "completion": ""}
{"prompt": "--set serviceAccount.create=false \\", "completion": ""}
{"prompt": "--set hostNetwork=true", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Ensure that you've created all the required components as per [the reference architecture guide](../reference-architecture/single-cluster-ref-arch): [Object Storage](../reference-architecture/single-cluster-ref-arch#object-storage), [OCI Image Registry](../reference-architecture/single-cluster-ref-arch#oci-image-registry), [Database](../reference-architecture/single-cluster-ref-arch#database). Then [install Gitpod](../reference-architecture/single-cluster-ref-arch#install-gitpod). While configuring your Gitpod installation, make sure to check 'use self-signed certificate'. Make sure that you select `node port` as the service type for the proxy service in the components section of the installation UI (this assumes you are using version 2022.07 or later):", "completion": ""}
{"prompt": "![proxy service type](../../static/images/docs/self-hosted/proxy-service-type-ui.png)", "completion": ""}
{"prompt": "You will also need to make sure that the \"allow login via SSH\" box is ticked:", "completion": ""}
{"prompt": "![ssh gateway](../../static/images/docs/self-hosted/ssh-gateway.png)", "completion": ""}
{"prompt": "Q: How do I 3. create alb-ingresss.yaml?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "kind: Ingress", "completion": ""}
{"prompt": "annotations:", "completion": ""}
{"prompt": "alb.ingress.kubernetes.io/actions.ssl-redirect: |-", "completion": ""}
{"prompt": "\"Type\": \"redirect\",", "completion": ""}
{"prompt": "\"Protocol\": \"HTTPS\",", "completion": ""}
{"prompt": "\"StatusCode\": \"HTTP_301\"", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS", "completion": ""}
{"prompt": "[{", "completion": ""}
{"prompt": "}, {", "completion": ""}
{"prompt": "}]", "completion": ""}
{"prompt": "alb.ingress.kubernetes.io/tags: Purpose=Gitpod,Service=proxy", "completion": ""}
{"prompt": "alb.ingress.kubernetes.io/target-node-labels: gitpod.io/workload_meta=true", "completion": ""}
{"prompt": "alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10", "completion": ""}
{"prompt": "alb.ingress.kubernetes.io/scheme: <SET THIS -> internet-facing or internal>", "completion": ""}
{"prompt": "name: gitpod", "completion": ""}
{"prompt": "defaultBackend:", "completion": ""}
{"prompt": "name: proxy", "completion": ""}
{"prompt": "number: 80", "completion": ""}
{"prompt": "- http:", "completion": ""}
{"prompt": "- backend:", "completion": ""}
{"prompt": "name: proxy", "completion": ""}
{"prompt": "number: 443", "completion": ""}
{"prompt": "pathType: Prefix", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Install the ALB (for HTTPS traffic) and NLB (for SSH traffic) using the .yaml file customized above as well as this one:", "completion": ""}
{"prompt": "**nlb-ssh-service.yaml**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "apiVersion: v1", "completion": ""}
{"prompt": "metadata:", "completion": ""}
{"prompt": "labels:", "completion": ""}
{"prompt": "component: ws-proxy-ssh", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-name: gitpod-ssh-gateway", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: \"instance\"", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp", "completion": ""}
{"prompt": "service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true", "completion": ""}
{"prompt": "spec:", "completion": ""}
{"prompt": "- name: ssh", "completion": ""}
{"prompt": "port: 22", "completion": ""}
{"prompt": "selector:", "completion": ""}
{"prompt": "component: ws-proxy", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "kubectl apply -f nlb-ssh-service.yaml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If installed properly, then this should be the shell output given the command below:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "NAME     CLASS    HOSTS   ADDRESS                                                   PORTS   AGE", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "NAME         TYPE           CLUSTER-IP       EXTERNAL-IP                                                       PORT(S)        AGE", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I 6. update dns records?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.domain.com           --> ALB ADDRESS", "completion": ""}
{"prompt": "*.ssh.ws.gitpod.domain.com  --> NLB ADDRESS", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I advanced installation of gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Here you can find advanced topics related to installing Gitpod:", "completion": ""}
{"prompt": "- [TLS configuration for Gitpod Self-Hosted](./advanced/tls)", "completion": ""}
{"prompt": "- [Configuring popular container registries](./advanced/resource-configuration)", "completion": ""}
{"prompt": "- [Using private image registries with Gitpod Self-Hosted](./advanced/private-registries)", "completion": ""}
{"prompt": "- [Applying custom annotations, labels and environment variables](./advanced/customization)", "completion": ""}
{"prompt": "<!-- The above should be removed as soon as we have most customers using the default method (a.k.a. replicated flow) -->", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Private Registries", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To access private registries, Gitpod needs to have the corresponding access credentials. These can be supplied in the KOTS installation UI:", "completion": ""}
{"prompt": "![registry credentials UI](../../static/images/docs/self-hosted/private-registry-credentials.png)", "completion": ""}
{"prompt": "Q: How do I allowlist?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "containerRegistry:", "completion": ""}
{"prompt": "- <your_registry-url.com>", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Resource Configuration", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I [amazon elastic container registry (ecr)](https://aws.amazon.com/ecr/)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This example uses the format `gcr.io`, which is the global hostnames. This can be swapped with any of the [regional hostnames](https://cloud.google.com/container-registry/docs/pushing-and-pulling) and it will work in the same way.", "completion": ""}
{"prompt": "Google Container Registry authentication requires specific configuration. The \"Container registry URL\" will be in a format similar to `gcr.io/<project-name>/gitpod`. In order for the authentication to work, you must also enter the \"Container registry server\". This will always be your GCR hostname, eg `gcr.io`.", "completion": ""}
{"prompt": "Q: How do I [google artifact registry (gar)](https://cloud.google.com/artifact-registry)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I tls configuration for gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "To run your own Gitpod instance, you need a TLS certificate for your Gitpod domain. There are three options to provide these TLS certificates.", "completion": ""}
{"prompt": "Q: How do I option 1: cert-manager?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: _We usually do not recommend this option for production usage._", "completion": ""}
{"prompt": "Let Gitpod generate self-signed certificates for your installation. This option can be used in case your load balancer does the TLS termination or for testing settings. For the latter case, you need to add the custom [CA](https://en.wikipedia.org/wiki/Certificate_authority) to your browser to let it accept the self-signed certificate. Use this command to export the CA:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "![kots-tls-self-signed](../../static/images/docs/self-hosted/kots-tls-self-signed.png)", "completion": ""}
{"prompt": "Q: How do I option 3: bring your own certificate?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: background", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I background?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "This section gives you relevant background information about Gitpod Self-Hosted:", "completion": ""}
{"prompt": "- [Disaster Recovery](disaster-recovery) - Best practices around disaster recovery", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: How to backup and restore Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is critical to consider what needs to be backed up and ensure you take the necessary steps to secure each of the listed elements. What needs to be backed up is closely aligned with [Gitpod\u2019s architecture](./reference-architecture/single-cluster-ref-arch#overview) and how it runs.", "completion": ""}
{"prompt": "Q: How do I database?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- **Google Cloud SQL:** You can rely on Cloud SQLs [backup and restore features](https://cloud.google.com/sql/docs/mysql/backup-recovery/backups) and run the instance in a [high availability configuration](https://cloud.google.com/sql/docs/mysql/high-availability) to decrease the chance of failure. You can also refer to the general [Google Cloud disaster recovery best practices](https://cloud.google.com/architecture/dr-scenarios-planning-guide).", "completion": ""}
{"prompt": "Q: How do I object storage?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- **Google Cloud Storage:** Consider using the [Multi-Regional Storage option](https://cloud.google.com/storage/docs/storage-classes) for additional availability.", "completion": ""}
{"prompt": "Q: How do I oci image registry?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Important:** KOTS Snapshots will **NOT** save any data from your Gitpod database, registry or object storage. It will also not backup any data outside of your `gitpod` namespace. It will backup:", "completion": ""}
{"prompt": "> - the KOTS dashboard", "completion": ""}
{"prompt": "> - the version of Gitpod installed", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [Velero](https://velero.io/) is an open source tool to safely backup and restore, perform disaster recovery, and migrate Kubernetes cluster resources and persistent volumes. It is used by KOTS to connect to your backup location. It supports many [data sources](https://docs.replicated.com/enterprise/snapshots-storage-destinations), including AWS, Azure and GCP storage solutions.", "completion": ""}
{"prompt": "Please follow the installation instructions as per the [Velero documentation](https://velero.io/docs/latest/basic-install). KOTS requires [Restic integration](https://velero.io/docs/v1.9/restic) to function correctly, which can be added by appending the `--use-restic` flag to the `velero install` command.", "completion": ""}
{"prompt": "Q: How do I triggering your first backup?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl kots backup --namespace gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl kots backup ls", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "NAME              STATUS       ERRORS    WARNINGS    STARTED                          COMPLETED                        EXPIRES", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I cluster configuration?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The following explains how you might restore Gitpod after its underlying cluster fails.", "completion": ""}
{"prompt": "1. Recreate your infrastructure. Ideally, you do this using something like a Terraform script.", "completion": ""}
{"prompt": "3. List your available backups using:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "4. Restore the backup using:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "5. Load the KOTS dashboard:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "6. Hit the \"Redeploy\" button.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I application config?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: reference", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I cluster requirements?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Gitpod is a Kubernetes application running with certain expectations on the characteristics of the cluster it is running on.", "completion": ""}
{"prompt": "![cluster requirements](../../static/images/docs/self-hosted/cluster-requirements.png)", "completion": ""}
{"prompt": "<!-- raw editable diagram can be found under static/images/docs/self-hosted/cluster-requirements.excalidraw -->", "completion": ""}
{"prompt": "Q: How do I reference architectures?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod requires Kubernetes as an orchestration technology in order to spin workspaces up and down--ideally in combination with cluster autoscaling to minimize cost. We strongly recommend deploying a dedicated Kubernetes cluster just for Gitpod Self-Hosted.", "completion": ""}
{"prompt": "> Kubernetes version `1.21` or above is required", "completion": ""}
{"prompt": "Gitpod Self-Hosted runs well on:", "completion": ""}
{"prompt": "- Amazon Elastic Kubernetes Service", "completion": ""}
{"prompt": "- Microsoft Azure Kubernetes Service", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: These platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?", "completion": ""}
{"prompt": "- [Red Hat\u00ae OpenShift\u00ae](https://github.com/gitpod-io/gitpod/issues/5409)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Your Kubernetes cluster must have node(s) with the following labels applied to them:", "completion": ""}
{"prompt": "- `gitpod.io/workload_meta=true`", "completion": ""}
{"prompt": "- `gitpod.io/workload_workspace_services=true`", "completion": ""}
{"prompt": "- `gitpod.io/workload_workspace_headless=true`", "completion": ""}
{"prompt": "It is recommended to have a minimum of two node pools, grouping the `meta` and `ide` nodes into one node pool and `workspace` related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime.", "completion": ""}
{"prompt": "Q: How do I node and container requirements?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Calico for the networking overlay and network policy", "completion": ""}
{"prompt": "- At least 4 vCPU and 16GB of RAM", "completion": ""}
{"prompt": "Q: How do I kubernetes privilege requirements?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod uses [`LoadBalancer` type services](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for `LoadBalancer` type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod services.", "completion": ""}
{"prompt": "All supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:", "completion": ""}
{"prompt": "- [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer)", "completion": ""}
{"prompt": "- Layer 4/7 (default): [Classic Load Balancer](https://aws.amazon.com/premiumsupport/knowledge-center/eks-kubernetes-services-cluster/)", "completion": ""}
{"prompt": "- [Microsoft Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/concepts-network)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Amazon Elastic Kubernetes Service (EKS)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Google Kubernetes Engine (GKE)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I how to create a cluster with k3s?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "In this guide, we show you how to set up a Kubernetes cluster with [K3s](https://k3s.io/) that is ready to install Gitpod. In this example we expect to have at least 2 nodes with Ubuntu 20.04 (a single node setup would work as well, see hint below):", "completion": ""}
{"prompt": "- `node0`: main node where the Gitpod service pods will be deployed to", "completion": ""}
{"prompt": "- optional: one or more additional worker nodes `node2` \u2026 `nodeN`", "completion": ""}
{"prompt": "On each node, we [install K3s](https://rancher.com/docs/k3s/latest/en/installation/). We configure K3s by setting the following environment variables on the nodes.", "completion": ""}
{"prompt": "K3s config for main node `node0`:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "export K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export INSTALL_K3S_EXEC=\"agent --node-label gitpod.io/workload_workspace_services=true --node-label gitpod.io/workload_workspace_regular=true --node-label gitpod.io/workload_workspace_headless=true\"", "completion": ""}
{"prompt": "export K3S_URL=\"https://node0:6443\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "$ curl -sfL https://get.k3s.io | sh -", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "\"container_settings\": { \"allow_ip_forwarding\": true }", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "[...]", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"cniVersion\": \"0.3.1\",", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"log_level\": \"info\",", "completion": ""}
{"prompt": "\"datastore_type\": \"kubernetes\",", "completion": ""}
{"prompt": "\"mtu\": __CNI_MTU__,", "completion": ""}
{"prompt": "\"type\": \"calico-ipam\"", "completion": ""}
{"prompt": "\"policy\": {", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "\"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"", "completion": ""}
{"prompt": "\"container_settings\": { \"allow_ip_forwarding\": true }", "completion": ""}
{"prompt": "[...]", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "/var/lib/rancher/k3s/server/manifests/", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Microsoft Azure Kubernetes Service (AKS)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- An Microsoft Azure load balancer.", "completion": ""}
{"prompt": "- An Microsoft Azure container registry.", "completion": ""}
{"prompt": "- Minio will be used until Microsoft [Azure storage gateway](https://github.com/gitpod-io/gitpod-azure-aks-guide/issues/1) is configured.", "completion": ""}
{"prompt": "- Installation of [cert-manager](https://cert-manager.io/) for self-signed SSL certificates", "completion": ""}
{"prompt": "Upon completion, this script will print the config for the resources created (including passwords) and what is the [next relevant step](./../installing-gitpod#install-gitpod) in the installation process. Note that you will be able to skip steps 2 and 3 in the getting started guide because the script can do these steps for you.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Config Patches", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the authentication used by your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the database used by your Gitpod installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the Docker registry used by your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configuring Gitpod Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the ingress to your Gitpod installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the Kubernetes nodes in your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the storage used by your Gitpod installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the VSX registry used by your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/configure/self-hosted/latest\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: operational-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I configuring workspace resources?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Configuring workspace resources and limits is essential to balancing the following factors:", "completion": ""}
{"prompt": "- **Workspace performance:** The amount of compute available to each workspace", "completion": ""}
{"prompt": "- **Your cost of compute:** The fewer resources your workspaces request, the more you can fit on the node - and the fewer nodes you have to pay for", "completion": ""}
{"prompt": "Q: How do I how to configure workspace requests and limits?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "workspace:", "completion": ""}
{"prompt": "requests:", "completion": ""}
{"prompt": "memory: 16Gi", "completion": ""}
{"prompt": "cpu: \"4\"", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "With this configuration, 3 workspaces should fit onto the aforementioned 16 CPU / 64 GB memory node (with CPU cores being the limiting factor). A workspace would always have 4 CPUs and 16 GB of RAM available. These numbers are also used when scheduling workspaces onto pods - workspaces are only scheduled onto nodes that have at least these amounts of resources available.", "completion": ""}
{"prompt": "> This is intentionally on the conservative side due to potential resource conflicts concerning I/O bandwidth.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Disaster Recovery", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Thinking about disaster recovery with Gitpod is essential for business continuity and compliance reasons given how critical Gitpod is within your business\u2019 practices: it is not only used to write code for new features but also e.g. to fix a security vulnerability.", "completion": ""}
{"prompt": "When evaluating different disaster recovery strategies, it is important to keep in mind the business impact of different strategies. This impact is often defined by these interconnected metrics:", "completion": ""}
{"prompt": "- **Recovery Time Objective (RTO):** this is the amount of time it takes to recover from a catastrophic failure. Applying this to Gitpod, this would be the time between a major outage that renders Gitpod unusable and the point at which Gitpod is restored and developers can develop again.", "completion": ""}
{"prompt": "- **Acceptable Cost:** Different disaster recovery strategies come with different cost profiles. You need to know the acceptable cost level for your business to help choose the right strategy.", "completion": ""}
{"prompt": "The accepted value of each key metric will depend on your business\u2019 risk appetite and acceptable cost levels. These metrics can be used to better understand and categorise the different disaster recovery options available with Gitpod.", "completion": ""}
{"prompt": "Q: How do I disaster recovery strategies?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With this strategy, you aim to replace a failed Gitpod instance or Kubernetes cluster by spinning up an entirely new cluster. You can find out more on how to do this in our [How to Backup and Restore Guide](backup-restore).", "completion": ""}
{"prompt": "This strategy has the benefit of being cost-effective because you only operate a single cluster at a time. However, the time to spin up a new cluster and install Gitpod can be high increasing the time to recover. Thus, depending on your recovery time objective, it may be beneficial to evaluate the strategies mentioned below.", "completion": ""}
{"prompt": "Q: How do I pilot light (medium rto)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<OpenGraph", "completion": ""}
{"prompt": "description:", "completion": ""}
{"prompt": "title: \"Gitpod Self-Hosted installation guide\",", "completion": ""}
{"prompt": "}}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The [Local Preview](/docs/configure/self-hosted/latest/local-preview) installation of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the [SaaS version](https://gitpod.io/workspaces/) and cannot easily spin up a Kubernetes cluster to use the Proof-of-Value [reference architecture](/docs/configure/self-hosted/latest/reference-architecture).", "completion": ""}
{"prompt": "It is intended for preview purposes only - we strongly encourage the Kubernetes-based installation below for continuous usage.", "completion": ""}
{"prompt": "Q: How do I prerequisites to install gitpod self-hosted?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod is a Kubernetes application that makes heavy use of various Kubernetes features. It is highly recommended to have sufficient Kubernetes experience in order to install Gitpod. These docs expect that you are able to create and maintain a Kubernetes cluster that meets our [requirements](./latest/requirements) on your own.", "completion": ""}
{"prompt": "- **Compatible Kubernetes cluster** <br />", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod expects a properly configured [cert-manager](https://cert-manager.io/) that runs in the cluster. It is used to issue internal certificates for the Gitpod installation and to create certificates for the Gitpod domain (unless you bring your own domain certificates).", "completion": ""}
{"prompt": "- **DNS setup** <br />", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "To install Gitpod, you need a license that you can get [here](/community-license).", "completion": ""}
{"prompt": "Q: How do I installing gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Refer to the [troubleshooting section](./latest/troubleshooting) for help with your Gitpod Self-Hosted Instance. You can also take a look at our [support page](/support) to learn how to reach our community and support team.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Installation Guides", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Reference Architectures](./reference-architecture) - Help with setting up your Kubernetes cluster to run Gitpod on", "completion": ""}
{"prompt": "- [Advanced Installation Guides](./advanced) - Help with advanced installation topics", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Installing Gitpod Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > These prerequisites are fulfilled already if you used one of the [reference architectures](./reference-architecture). We strongly encourage the use of these reference architectures. Please see the [requirements](./requirements) for more information on what Gitpod needs to function.", "completion": ""}
{"prompt": "<details>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<summary  class=\"text-p-medium\"><b>Cert-Manager installed on the cluster</b></summary>", "completion": ""}
{"prompt": "Once you have created your Kubernetes cluster you need to install [cert-manager](https://cert-manager.io/). cert-manager is needed even when you bring your own TLS certificate for your domain. Please consider the [cert-manager documentation](https://cert-manager.io/docs/) on how to install it.", "completion": ""}
{"prompt": "</details>", "completion": ""}
{"prompt": "<details>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `*.example.com`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To start with installing Gitpod, you need a terminal where you can run `kubectl` against your cluster. First, install the KOTS kubectl plugin:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now, you are ready to install Gitpod. Run the following command in your terminal:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "\u2022 Go to http://localhost:8800 to access the Admin Console", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> - Follow [these](/docs/configure/authentication/github-enterprise) steps to integrate [`GitHub.com`](http://github.com) with your self-hosted Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "import BigPill from \"$lib/components/big-pill.svelte\";", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I how to install the local preview of gitpod self-hosted?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "| <!-- Our markdown parser does not support tables without a header --> ||", "completion": ""}
{"prompt": "| Status:                                                               | <BigPill text=\"beta\" class=\"ml|", "completion": ""}
{"prompt": "| Limitations:                                                          | - Performance is limited by the capabilities of your machine. Your experience is likely to be better when using the SaaS version ([gitpod.io](/docs/introduction/getting-started)) or when running on one of our [reference architectures](./reference-architecture) <br /> - Minimum of 4 cores and 6GB of ram required. **Macs with Apple Silicon (e.g. M1) are currently not supported.** See [the relevant issue](https://github.com/gitpod-io/gitpod/issues/11309) for more information <br /> - [Prebuilds](/docs/configure/projects/prebuilds) are not supported because they require webhooks |", "completion": ""}
{"prompt": "The Local Preview of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the SaaS version ([gitpod.io](/docs/introduction/getting-started)) and cannot easily spin up a Kubernetes cluster to use the [Proof-of-Value Reference Architecture](./reference-architecture/proof-of-value). It allows you to try Gitpod Self-Hosted locally with minimal effort and resource requirements. As a result, this is **not intended for production** nor continuous usage. Please refer to the [installation guide](./installing-gitpod) for instructions on how to install Gitpod for continuous usage. <!-- To Do : replace link to getting started with reference architectures once these are fully ready-->", "completion": ""}
{"prompt": "This install method runs a [K3s](https://k3s.io/) cluster inside a Docker container. Self-signed certificates are automatically created and a Gitpod instance using these certificates will be installed into the `k3s` cluster. See our [TLS](./advanced/tls) page for more information about Gitpod and certificates.", "completion": ""}
{"prompt": "Q: How do I 1. running the docker container?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "docker run -p 443:443 --privileged --name gitpod -it --mount type=volume,source=gitpod,destination=/var/gitpod eu.gcr.io/gitpod-core-dev/build/local-preview", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `--privileged` to be able to run docker (and hence `k3s`) inside the container. This is necessary.", "completion": ""}
{"prompt": "- `--rm` to delete the Docker container after stopping.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Note:** It usually takes around 5 minutes to go from the `starting Gitpod` status to `Gitpod is running`. Among other things, this will depend on the speed of your internet connection. Once Gitpod is ready, it will look as follows:", "completion": ""}
{"prompt": "![gitpod is ready](../../static/images/docs/self-hosted/local-preview-ready.png)", "completion": ""}
{"prompt": "As this is a self-signed instance of Gitpod, the Gitpod root CA cert has to be imported into your browser manually to access the full functionality of Gitpod. The certificate can be retrieved by running the following:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This certificate is saved at `$HOME/gitpod-ca.crt` and can then be loaded into your browser. Most browsers also require a restart before they can start to use the imported certificate. For instructions on how to load the certificate, choose your setup below:", "completion": ""}
{"prompt": "<details>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "</details>", "completion": ""}
{"prompt": "<summary  class=\"text-p-medium\">Edge on Windows</summary>", "completion": ""}
{"prompt": "<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/ee3051ac367140c3a2f60cd4e15a0192\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>", "completion": ""}
{"prompt": "</details>", "completion": ""}
{"prompt": "<details>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<summary  class=\"text-p-medium\">Google Chrome on MacOS</summary>", "completion": ""}
{"prompt": "<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/39e870e6f91c4f5bad1550f3647fed29\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>", "completion": ""}
{"prompt": "</details>", "completion": ""}
{"prompt": "<details >", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> - Follow [these](/docs/configure/authentication/github-enterprise) steps to integrate [`GitHub.com`](http://github.com) with your self-hosted Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: troubleshooting", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I manage cluster nodes?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Sometimes nodes become unhealthy, or you need to prevent the autoscaler from removing the node from your cluster.", "completion": ""}
{"prompt": "Q: How do I avoiding node scale-down?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: $ kubectl annotate node <nodename> cluster-autoscaler.kubernetes.io/scale-down-disabled=true", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Prevent new workspaces from being scheduled to a node if they become unhealthy:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Monitoring Gitpod Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Several components of Gitpod expose metrics using the [Prometheus exposition format](https://prometheus.io/docs/concepts/data_model/), but for this guide, we'll focus on the most important one that makes sure that Workspaces are starting and running reasonably.", "completion": ""}
{"prompt": "Gitpod is all about Workspaces, so the information that you want to keep an eye on is:", "completion": ""}
{"prompt": "- How many workspaces are currently running.", "completion": ""}
{"prompt": "- Workspaces are starting in a reasonable time frame.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To have all useful data available and presented in a friendly way, it is recommend building [Grafana Dashboards](https://grafana.com/grafana/dashboards/) with the most important metrics (the ones shown in this guide). If you prefer, you can [import](https://grafana.com/docs/grafana/latest/dashboards/export-import/#import-dashboard) [one of our examples](https://github.com/gitpod-io/gitpod/blob/main/operations/observability/mixins/self-hosted/dashboards/examples/overview.json) as a baseline to your own dashboards.", "completion": ""}
{"prompt": "Alerting can be done with [Prometheus itself](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). If you are using the Prometheus-Operator as we recommended, you can also use the [PrometheusRule](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusrulespec) CRD to simplify alerting configuration. The [Alertmanager](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#alertmanagerspec) CRD can be used to configure alert routing to different popular platform such as [PagerDuty](https://www.pagerduty.com/) or [Slack](https://slack.com/).", "completion": ""}
{"prompt": "Q: How do I what you should keep an eye on?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To discover how many workspaces are currently running, use the [PromQL query](https://prometheus.io/docs/prometheus/latest/querying/basics/) below:", "completion": ""}
{"prompt": "```promql", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "`gitpod_ws_manager_workspace_phase_total` is a [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge). Although not suitable for alerting (because the amount of workspaces say little about your installation's health), with this query, you're able to tell how many workspaces, prebuilds and imagebuilds are running. This can be good information to tell how saturated your Gitpod instance is.", "completion": ""}
{"prompt": "Q: How do I workspaces are starting?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "sum(gitpod_ws_manager_workspace_phase_total{phase=\"PENDING\"}) by (type)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To ensure a good user experience, you'll also want to make sure that Workspaces are starting swiftly! [Histograms](https://prometheus.io/docs/concepts/metric_types/#histogram) are used to capture this information. With histograms, it's possible to measure different percentiles and capture a high-level overview and outliers at the same time.", "completion": ""}
{"prompt": "Example queries are shown below:", "completion": ""}
{"prompt": "```promql", "completion": ""}
{"prompt": "Q: How do I 95th percentile?", "completion": ""}
{"prompt": "sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: histogram_quantile(0.5,", "completion": ""}
{"prompt": ")", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Last but not less important, you want to make sure that running workspaces do not fail and stop abruptly. `ws-manager` exposes a [counter](https://prometheus.io/docs/concepts/metric_types/#counter) that counts all workspace failures, making it possible to measure workspace failure rate (i.e. how many workspaces are failing per second).", "completion": ""}
{"prompt": "The query is shown below:", "completion": ""}
{"prompt": "```promql", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "The goal is that this metric stays as close to 0 as possible. If it starts to increase it means something is going wrong! Alerting can be set for high error rates, but just like the ones above the threshold will come from experience operating Gitpod. It is suggested to periodically review the threshold as your installation increases or decreases usage.", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: operational-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I operational guides?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "This section has the guides you need to operate Gitpod:", "completion": ""}
{"prompt": "- [How to update Gitpod](./updating) - This guide shows you how to update Gitpod", "completion": ""}
{"prompt": "- [How to configure workspace resources](./configuring-workspace-resources) - This guide shows you how to configure workspace resources to ensure performance and reliability", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: troubleshooting", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I prevent workspace starts?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "It may be necessary for you to prevent users from starting Gitpod workspaces (in a `<namespace>`). Please see the [update guide](./updating) for more information.", "completion": ""}
{"prompt": "> It is required to prevent workspace starts when updating Gitpod and using the [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) because it is not highly-available.", "completion": ""}
{"prompt": "This can be done with `kubectl`, after which, users won't be able to start workspaces until the `ws-manager` pod is running again.", "completion": ""}
{"prompt": "> **Caution:** You must [stop running workspaces](./stop-workspaces) and wait for them to terminate before proceeding. Failure to do so can result in user data loss, because the workspaces will not be able to reliably back-up.", "completion": ""}
{"prompt": "To scale-down the `ws-manager` component and prevent workspace starts:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After which, users will receive an error when trying to start workspaces. Once Gitpod is redeployed, this change will be reset automatically and workspaces will be allowed to start again.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "layout: false", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. **Regular Workspaces Node Pool**: Gitpod deploys the actual workspaces (where the actual developer work is happening) to these nodes.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ---------------------------- | ------------------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Regular Workspace Node Pool  | `gitpod.io/workload_workspace_regular=true`                                                                         |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ---------------------------- | ----------------- | ------------- | ----------------- |", "completion": ""}
{"prompt": "| Regular Workspace Node Pool  | `n2d-standard-16` | `m6i.4xlarge` | `Standard_D16_v4` |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------------------- |", "completion": ""}
{"prompt": "| roles/logging.logWriter       |", "completion": ""}
{"prompt": "| roles/container.admin         |", "completion": ""}
{"prompt": "Run the following commands to create the service account:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "GKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/storage.admin\"", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After that, we [create a **Kubernetes cluster**](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-regional-cluster).", "completion": ""}
{"prompt": "|                           |                                                                                                             |", "completion": ""}
{"prompt": "| Image Type                | `UBUNTU_CONTAINERD`                                                                                         |", "completion": ""}
{"prompt": "| Cluster Version           | Choose latest from [regular channel](https://cloud.google.com/kubernetes-engine/docs/release-notes-regular) |", "completion": ""}
{"prompt": "| Disable                   | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                    |", "completion": ""}
{"prompt": "| Max Pods per Node         | 10                                                                                                          |", "completion": ""}
{"prompt": "| Min Nodes                 | 0                                                                                                           |", "completion": ""}
{"prompt": "| Addons                    | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                               |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "CLUSTER_NAME=gitpod", "completion": ""}
{"prompt": "GKE_VERSION=1.22.12-gke.1200", "completion": ""}
{"prompt": "gcloud container clusters \\", "completion": ""}
{"prompt": "--disk-type=\"pd-ssd\" --disk-size=\"50GB\" \\", "completion": ""}
{"prompt": "--machine-type=\"e2-standard-2\" \\", "completion": ""}
{"prompt": "--region=\"${REGION}\" \\", "completion": ""}
{"prompt": "--num-nodes=1 \\", "completion": ""}
{"prompt": "--enable-autoscaling \\", "completion": ""}
{"prompt": "--no-enable-autoupgrade \\", "completion": ""}
{"prompt": "--enable-network-policy \\", "completion": ""}
{"prompt": "--metadata=disable-legacy-endpoints=true \\", "completion": ""}
{"prompt": "--default-max-pods-per-node=110 \\", "completion": ""}
{"prompt": "--max-nodes=1 \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Unfortunately, you cannot create a cluster without the default node pool. Since we need a custom node pool, you need to remove the default one.", "completion": ""}
{"prompt": "<!-- Can we re-use the default node pool instead? \u2192 https://github.com/gitpod-io/website/pull/2106#discussion_r893885815 -->", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--cluster=\"${CLUSTER_NAME}\" --region=\"${REGION}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------- | ----------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Machine Type      | `n2d-standard-4`                                                                    |", "completion": ""}
{"prompt": "| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |", "completion": ""}
{"prompt": "| Number of nodes   | 1                                                                                   |", "completion": ""}
{"prompt": "| Max Nodes         | 50                                                                                  |", "completion": ""}
{"prompt": "| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |", "completion": ""}
{"prompt": "| Node Labels       | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`                   |", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "create \"workload-services\" \\", "completion": ""}
{"prompt": "--disk-type=\"pd-ssd\" \\", "completion": ""}
{"prompt": "--image-type=\"UBUNTU_CONTAINERD\" \\", "completion": ""}
{"prompt": "--num-nodes=1 \\", "completion": ""}
{"prompt": "--enable-autorepair \\", "completion": ""}
{"prompt": "--metadata disable-legacy-endpoints=true \\", "completion": ""}
{"prompt": "--node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true\" \\", "completion": ""}
{"prompt": "--min-nodes=1 \\", "completion": ""}
{"prompt": "--region=\"${REGION}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------- | ----------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Machine Type      | `n2d-standard-16`                                                                   |", "completion": ""}
{"prompt": "| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |", "completion": ""}
{"prompt": "| Number of nodes   | 1                                                                                   |", "completion": ""}
{"prompt": "| Max Nodes         | 50                                                                                  |", "completion": ""}
{"prompt": "| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |", "completion": ""}
{"prompt": "| Node Labels       | `gitpod.io/workload_workspace_regular=true`                                         |", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "create \"workload-regular-workspaces\" \\", "completion": ""}
{"prompt": "--disk-type=\"pd-ssd\" \\", "completion": ""}
{"prompt": "--image-type=\"UBUNTU_CONTAINERD\" \\", "completion": ""}
{"prompt": "--num-nodes=1 \\", "completion": ""}
{"prompt": "--enable-autorepair \\", "completion": ""}
{"prompt": "--metadata disable-legacy-endpoints=true \\", "completion": ""}
{"prompt": "--node-labels=\"gitpod.io/workload_workspace_regular=true\" \\", "completion": ""}
{"prompt": "--min-nodes=1 \\", "completion": ""}
{"prompt": "--region=\"${REGION}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------- | ----------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Machine Type      | `n2d-standard-16`                                                                   |", "completion": ""}
{"prompt": "| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |", "completion": ""}
{"prompt": "| Number of nodes   | 1                                                                                   |", "completion": ""}
{"prompt": "| Max Nodes         | 50                                                                                  |", "completion": ""}
{"prompt": "| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |", "completion": ""}
{"prompt": "| Node Labels       | `gitpod.io/workload_workspace_headless=true`                                        |", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "create \"workload-headless-workspaces\" \\", "completion": ""}
{"prompt": "--disk-type=\"pd-ssd\" \\", "completion": ""}
{"prompt": "--image-type=\"UBUNTU_CONTAINERD\" \\", "completion": ""}
{"prompt": "--num-nodes=1 \\", "completion": ""}
{"prompt": "--enable-autorepair \\", "completion": ""}
{"prompt": "--metadata disable-legacy-endpoints=true \\", "completion": ""}
{"prompt": "--node-labels=\"gitpod.io/workload_workspace_headless=true\" \\", "completion": ""}
{"prompt": "--min-nodes=1 \\", "completion": ""}
{"prompt": "--region=\"${REGION}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud container clusters get-credentials --region=\"${REGION}\" \"${CLUSTER_NAME}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl create clusterrolebinding cluster-admin-binding \\", "completion": ""}
{"prompt": "--user=\"$(gcloud config get-value core/account)\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "> **Note:** By default, when Gitpod is being installed using the instructions here, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow [the Setting up your EKS cluster with dual ALB + NLB load balancers guide](../advanced/eks-with-alb-and-nlb) _alongside_ this reference architecture guide.", "completion": ""}
{"prompt": "For `eksctl`, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.", "completion": ""}
{"prompt": "The example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.", "completion": ""}
{"prompt": "- `cert-manager` provided for the required cert-manager tooling. If using DNS-01 challenges for Let's Encrypt with a Route53 zone, then enable the cert-manager `wellKnownPolicies` or ensure one exists with permissions to modify records in the zone", "completion": ""}
{"prompt": "- `cluster-autoscaler` connects to the AWS autoscaler", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<summary  class=\"text-p-medium\">Note on AMI Usage</summary>", "completion": ""}
{"prompt": "In this reference example, the Ubuntu2004 AMI family is used instead of listing a specific AMI ID. This simplifies portability and allows for the use of the built-in bootstrap command instead of having to create a custom one. If you want to do more customization of your bootstrap command or use a static AMI, first, replace `amiFamily: Ubuntu2004` with `ami: ami-customid` where `ami-customid` is from Ubuntu's EKS AMI list or the output from the below command. You will then replace `preBootstrapCommands` with your bootstrap script under a new section labeled `overrideBootstrapCommand`.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--filters 'Name=name,Values=ubuntu-eks/k8s_1.22/images/*' \\", "completion": ""}
{"prompt": "--executable-users all \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Refer to `eksctl`'s documentation on [AMI Family](https://eksctl.io/usage/custom-ami-support/) for more information on its behavior.", "completion": ""}
{"prompt": "</details>", "completion": ""}
{"prompt": "<br/>", "completion": ""}
{"prompt": "**`gitpod-cluster.yaml`**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "kind: ClusterConfig", "completion": ""}
{"prompt": "name: gitpod", "completion": ""}
{"prompt": "version: \"1.22\"", "completion": ""}
{"prompt": "tags:", "completion": ""}
{"prompt": "project: gitpod", "completion": ""}
{"prompt": "iam:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- metadata:", "completion": ""}
{"prompt": "namespace: kube-system", "completion": ""}
{"prompt": "awsLoadBalancerController: true", "completion": ""}
{"prompt": "name: ebs-csi-controller-sa", "completion": ""}
{"prompt": "wellKnownPolicies:", "completion": ""}
{"prompt": "- metadata:", "completion": ""}
{"prompt": "namespace: kube-system", "completion": ""}
{"prompt": "autoScaler: true", "completion": ""}
{"prompt": "name: cert-manager", "completion": ""}
{"prompt": "wellKnownPolicies:", "completion": ""}
{"prompt": "- metadata:", "completion": ""}
{"prompt": "namespace: external-dns", "completion": ""}
{"prompt": "externalDNS: true", "completion": ""}
{"prompt": "Q: How do I uncomment and update for your region if you wish to use fewer availability zones?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I   - eu-west-1a?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I   - eu-west-1c?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I you can use an existing vpc by supplying private and/or public subnets. please check?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: vpc:", "completion": ""}
{"prompt": "nat:", "completion": ""}
{"prompt": "# HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using", "completion": ""}
{"prompt": "gateway: Single", "completion": ""}
{"prompt": "# Cluster endpoints and public access", "completion": ""}
{"prompt": "# For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/", "completion": ""}
{"prompt": "privateAccess: true", "completion": ""}
{"prompt": "publicAccessCIDRs: [\"0.0.0.0/0\"]", "completion": ""}
{"prompt": "Q: How do I logging settings?", "completion": ""}
{"prompt": "clusterLogging:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: managedNodeGroups:", "completion": ""}
{"prompt": "amiFamily: Ubuntu2004", "completion": ""}
{"prompt": "instanceTypes: [\"m6i.xlarge\"]", "completion": ""}
{"prompt": "minSize: 1", "completion": ""}
{"prompt": "maxPodsPerNode: 110", "completion": ""}
{"prompt": "volumeSize: 300", "completion": ""}
{"prompt": "volumeIOPS: 6000", "completion": ""}
{"prompt": "ebsOptimized: true", "completion": ""}
{"prompt": "propagateASGTags: true", "completion": ""}
{"prompt": "iam:", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore", "completion": ""}
{"prompt": "tags:", "completion": ""}
{"prompt": "# Important - If you change the name of your EKS cluster from the", "completion": ""}
{"prompt": "# your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)", "completion": ""}
{"prompt": "# For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.io/workload_meta: \"true\"", "completion": ""}
{"prompt": "gitpod.io/workload_workspace_services: \"true\"", "completion": ""}
{"prompt": "preBootstrapCommands:", "completion": ""}
{"prompt": "- echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "amiFamily: Ubuntu2004", "completion": ""}
{"prompt": "instanceTypes: [\"m6i.4xlarge\"]", "completion": ""}
{"prompt": "minSize: 1", "completion": ""}
{"prompt": "maxPodsPerNode: 110", "completion": ""}
{"prompt": "volumeSize: 512", "completion": ""}
{"prompt": "volumeIOPS: 6000", "completion": ""}
{"prompt": "ebsOptimized: true", "completion": ""}
{"prompt": "propagateASGTags: true", "completion": ""}
{"prompt": "iam:", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore", "completion": ""}
{"prompt": "tags:", "completion": ""}
{"prompt": "# Important - If you change the name of your EKS cluster from the", "completion": ""}
{"prompt": "# your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)", "completion": ""}
{"prompt": "# For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.io/workload_workspace_regular: \"true\"", "completion": ""}
{"prompt": "preBootstrapCommands:", "completion": ""}
{"prompt": "- echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh", "completion": ""}
{"prompt": "- name: headless-workspaces", "completion": ""}
{"prompt": "spot: false", "completion": ""}
{"prompt": "desiredCapacity: 2", "completion": ""}
{"prompt": "maxSize: 50", "completion": ""}
{"prompt": "disableIMDSv1: false", "completion": ""}
{"prompt": "volumeType: gp3", "completion": ""}
{"prompt": "volumeThroughput: 500", "completion": ""}
{"prompt": "privateNetworking: true", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "attachPolicyARNs:", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "k8s.io/cluster-autoscaler/enabled: \"true\"", "completion": ""}
{"prompt": "# default cluster name (\"gitpod\"), update the tag below to match", "completion": ""}
{"prompt": "#", "completion": ""}
{"prompt": "k8s.io/cluster-autoscaler/gitpod: \"owned\"", "completion": ""}
{"prompt": "labels:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh", "completion": ""}
{"prompt": "- sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "eksctl create cluster --without-nodegroup --config-file gitpod-cluster.yaml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2022-06-24 09:54:59 [\u2139]  eksctl version 0.102.0-dev+3229f126.2022-06-17T12:44:20Z", "completion": ""}
{"prompt": "2022-06-24 09:54:59 [\u2139]  setting availability zones to [eu-west-1c eu-west-1a eu-west-1b]", "completion": ""}
{"prompt": "2022-06-24 09:54:59 [\u2139]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19", "completion": ""}
{"prompt": "2022-06-24 09:54:59 [\u2139]  using Kubernetes version 1.22", "completion": ""}
{"prompt": "2022-06-24 10:11:30 [\u2714]  EKS cluster \"gitpod\" in \"eu-west-1\" region is ready", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl get pods -n kube-system", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "NAME                       READY   STATUS    RESTARTS   AGE", "completion": ""}
{"prompt": "coredns-5947f47f5f-srm5t   0/1     Pending   0          26m", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: This is following the instructions provided by [Tigera](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks).", "completion": ""}
{"prompt": "To install Calico, first remove the default AWS-provided networking component:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Install the Calico manifest:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now configure Calico for EKS-specific support with the following command:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I additional network configuration?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "[", "completion": ""}
{"prompt": "\"<VPC ID similar to: vpc-09a109f23dad0a298>\",", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Create the new security group (we do not need to have rules added to it yet) using the vpc-id from above, note how tags are auto-populated to the security group as well:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--vpc-id <!add VPC ID from above here!> --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-services-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"Tags\": [", "completion": ""}
{"prompt": "\"Key\": \"project\",", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "\"Key\": \"department\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "securityGroups:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Store the `GroupID` for easier reuse when creating the RDS instance later in this guide:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "If you destroy this cluster and recreate it, you will need to redo the above step as the old security group would have been deleted along with the VPC.", "completion": ""}
{"prompt": "Q: How do I ssh access to nodegroups?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To ensure that if there are problems deploying the services nodegroup (you provided an incorrect security group ID for example) it can be deleted easily and not require having to delete a partially deployed workspaces nodegroup, create it before the workspaces nodegroup.", "completion": ""}
{"prompt": "Create the services nodegroups with `eksctl create nodegroup --include=services --config-file gitpod-cluster.yaml`:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "2022-06-24 13:42:01 [\u2139]  nodegroup \"regular-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]", "completion": ""}
{"prompt": "2022-06-24 13:42:03 [\u2139]  combined include rules: services", "completion": ""}
{"prompt": "2022-06-24 13:42:03 [\u2139]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod\"", "completion": ""}
{"prompt": "2022-06-24 13:46:22 [\u2714]  created 1 managed nodegroup(s) in cluster \"gitpod\"", "completion": ""}
{"prompt": "2022-06-24 13:46:24 [\u2139]  all nodegroups have up-to-date cloudformation templates", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "eksctl create nodegroup --include=regular-workspaces,headless-workspaces --config-file gitpod-cluster.yaml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2022-06-24 13:55:08 [\u2139]  nodegroup \"services\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]", "completion": ""}
{"prompt": "2022-06-24 13:55:08 [\u2139]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]", "completion": ""}
{"prompt": "2022-06-24 13:55:13 [\u2139]  combined include rules: regular-workspaces,headless-workspaces", "completion": ""}
{"prompt": "2022-06-24 13:55:13 [\u2139]  will create a CloudFormation stack for each of 2 managed nodegroups in cluster \"gitpod\"", "completion": ""}
{"prompt": "2022-06-24 13:59:10 [\u2714]  created 2 managed nodegroup(s) in cluster \"gitpod\"", "completion": ""}
{"prompt": "2022-06-24 13:59:13 [\u2139]  all nodegroups have up-to-date cloudformation templates", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl get nodes -o=custom-columns=\"NAME:.metadata.name,\\", "completion": ""}
{"prompt": "RUNTIME:.status.nodeInfo.containerRuntimeVersion,\\", "completion": ""}
{"prompt": "KERNEL:.status.nodeInfo.kernelVersion,\\", "completion": ""}
{"prompt": "K8S:.status.nodeInfo.kubeletVersion,\\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Because of how EKS launches instances, coredns may end up running on a single node, which is against best practices. Before continuing to the next steps, restart coredns to ensure it is running on two nodes.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I enable cluster autoscaling?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "CLUSTER_NAME=\"gitpod\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "helm repo update", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--install \\", "completion": ""}
{"prompt": "--reset-values \\", "completion": ""}
{"prompt": "--set cloudProvider=aws \\", "completion": ""}
{"prompt": "--set autoDiscovery.clusterName=$CLUSTER_NAME \\", "completion": ""}
{"prompt": "--set rbac.serviceAccount.name=cluster-autoscaler \\", "completion": ""}
{"prompt": "--set extraArgs.skip-nodes-with-local-storage=false \\", "completion": ""}
{"prompt": "--set extraArgs.expander=least-waste \\", "completion": ""}
{"prompt": "--set extraArgs.scale-down-utilization-threshold=0.2 \\", "completion": ""}
{"prompt": "autoscaler autoscaler/cluster-autoscaler", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In the future to delete this cluster any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working [with existing VPCs](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration) in `eksctl`.", "completion": ""}
{"prompt": "The order resources to delete if created:", "completion": ""}
{"prompt": "- RDS First", "completion": ""}
{"prompt": "- Services Nodegroup", "completion": ""}
{"prompt": "- eksctl delete cluster", "completion": ""}
{"prompt": "Full removal of these installed components would look something like this (commands are grouped for brevity):", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "Q: How do I delete rds resources?", "completion": ""}
{"prompt": "aws ec2 delete-security-group --group-id sg-0e538ccac25bb1387", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: eksctl delete nodegroup --name services --cluster gitpod --disable-eviction --parallel 4 --max-grace-period 0s --wait", "completion": ""}
{"prompt": "Q: How do I delete the security group added for rds?", "completion": ""}
{"prompt": "eksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait", "completion": ""}
{"prompt": "Q: How do I the following removal steps are optional; if you plan on creating another gitpod installation then the s3 bucket,?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I delete s3 resources?", "completion": ""}
{"prompt": "aws s3 rb s3://${S3_BUCKET_NAME} --force", "completion": ""}
{"prompt": "Q: How do I delete iam resources?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: aws iam list-access-keys --user-name gitpod-s3-access", "completion": ""}
{"prompt": "aws iam delete-user --user-name gitpod-s3-access", "completion": ""}
{"prompt": "Q: How do I ensure that nothing else is attached to this policy?", "completion": ""}
{"prompt": "aws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "AKS_VERSION=$(az aks get-versions \\", "completion": ""}
{"prompt": "--query \"orchestrators[?contains(orchestratorVersion, '1.24.')].orchestratorVersion | [-1]\" -o tsv)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "az aks create \\", "completion": ""}
{"prompt": "--nodepool-name \"services\" \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\" \\", "completion": ""}
{"prompt": "--network-plugin kubenet \\", "completion": ""}
{"prompt": "--enable-cluster-autoscaler \\", "completion": ""}
{"prompt": "--min-count \"1\" \\", "completion": ""}
{"prompt": "--max-pods \"110\" \\", "completion": ""}
{"prompt": "--node-vm-size \"Standard_D4_v4\" \\", "completion": ""}
{"prompt": "gitpod.io/workload_meta=true \\", "completion": ""}
{"prompt": "gitpod.io/workload_workspace_services=true \\", "completion": ""}
{"prompt": "--vm-set-type \"VirtualMachineScaleSets\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "az aks nodepool add \\", "completion": ""}
{"prompt": "--cluster-name \"${CLUSTER_NAME}\" \\", "completion": ""}
{"prompt": "--kubernetes-version \"${AKS_VERSION}\" \\", "completion": ""}
{"prompt": "--enable-cluster-autoscaler \\", "completion": ""}
{"prompt": "--max-count \"50\" \\", "completion": ""}
{"prompt": "--node-osdisk-size \"512\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Create a node pool for headless workspaces.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--name \"headlessws\" \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\" \\", "completion": ""}
{"prompt": "--labels gitpod.io/workload_workspace_headless=true \\", "completion": ""}
{"prompt": "--node-count \"1\" \\", "completion": ""}
{"prompt": "--max-count \"50\" \\", "completion": ""}
{"prompt": "--node-osdisk-size \"512\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After the cluster and node pools have been created, fetch the AKS credentials. These credentials will be used to install external-dns, cert-manager, and install Gitpod itself.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--name \"${CLUSTER_NAME}\" \\", "completion": ""}
{"prompt": "--overwrite-existing", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Gitpod uses a **relational database management system** to store structural data. Gitpod supports MySQL. The database is a central component in Gitpod where all metadata about users and workspaces as well as settings of the Gitpod instance (such as auth providers) are stored. That makes the database a critical component. In case of a database outage, you will not be able to log in, use the Gitpod dashboard, or start workspaces.", "completion": ""}
{"prompt": "In this reference architecture, we use managed MYSQL databases provided by cloud providers.", "completion": ""}
{"prompt": "> Gitpod requires your database instance to have a database named `gitpod` in it.", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-database\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "MYSQL_INSTANCE_NAME=gitpod-mysql", "completion": ""}
{"prompt": "--database-version=MYSQL_5_7 \\", "completion": ""}
{"prompt": "--storage-auto-increase \\", "completion": ""}
{"prompt": "--region=\"${REGION}\" \\", "completion": ""}
{"prompt": "--enable-bin-log", "completion": ""}
{"prompt": "gcloud sql instances patch \"${MYSQL_INSTANCE_NAME}\" --database-flags \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After that, we create the database named `gitpod` as well as a dedicated Gitpod database user with a random password.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "MYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)", "completion": ""}
{"prompt": "--instance=\"${MYSQL_INSTANCE_NAME}\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Finally, you need to create a service account that has the `roles/cloudsql.client` role:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "MYSQL_SA_EMAIL=\"${MYSQL_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Save the service account key to the file `./mysql-credentials.json`:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "./mysql-credentials.json", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "We will create an RDS MySQL `db.m5g.large` instance running MySQL 5.7. Before deploying an RDS instance, additional configuration has to be done to the VPC created by the `eksctl` command:", "completion": ""}
{"prompt": "Q: How do I create an rds security group?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws ec2 describe-subnets \\", "completion": ""}
{"prompt": "--query 'Subnets[?MapPublicIpOnLaunch==`true`] | [*].[SubnetId, AvailabilityZone, CidrBlock, MapPublicIpOnLaunch]'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "[", "completion": ""}
{"prompt": "\"<SubnetID, similar to: subnet-0686443f3f2782453>\",", "completion": ""}
{"prompt": "\"192.168.64.0/19\",", "completion": ""}
{"prompt": "],", "completion": ""}
{"prompt": "\"<SubnetID, similar to: subnet-010ea25d0e398f6df>\",", "completion": ""}
{"prompt": "\"192.168.0.0/19\",", "completion": ""}
{"prompt": "],", "completion": ""}
{"prompt": "\"<SubnetID, similar to: subnet-0f0370a5697d85df2>\",", "completion": ""}
{"prompt": "\"192.168.32.0/19\",", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Using the three subnet IDs, create an RDS subnet group, with the name `gitpod-rds`:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--db-subnet-group-name gitpod-rds \\", "completion": ""}
{"prompt": "--subnet-ids '[ \"<SubnetID 1 from above, similar to: subnet-0686443f3f2782453>\", \"SubnetID 2 from above, similar to: subnet-010ea25d0e398f6df>\", \"SubnetID 3 from above, similar to: subnet-0f0370a5697d85df2>\" ]' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now you will need to create a security group for the RDS instance, running a similar command as before. Note you can get your vpc-id via:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Create the security group for the RDS instance:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--vpc-id <your VPC ID, similar to: vpc-09a109f23dad0a298> \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should return an output that is similar to:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "\"GroupId\": \"<GroupID similar to: sg-0e538ccac25bb1387>\",", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"Value\": \"gitpod\"", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"Value\": \"demo\"", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You can now update the ingress policy for the RDS group to allow for incoming connections from the Services nodegroup on port 3306, the MySQL port. This uses the services security group ID stored in an environment variable in the cluster section above:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--group-id <RDS securitygroup ID from above> \\", "completion": ""}
{"prompt": "--source-group ${SERVICES_SECURITYGROUP_ID}\\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now you can create a password to use for MySQL. This will be required for the creation of the RDS instance and later for use by the Gitpod installer:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "echo $MYSQL_GITPOD_PW", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws rds create-db-instance \\", "completion": ""}
{"prompt": "--db-instance-identifier gitpod-instance \\", "completion": ""}
{"prompt": "--db-subnet-group-name gitpod-rds \\", "completion": ""}
{"prompt": "--multi-az \\", "completion": ""}
{"prompt": "--allocated-storage 20 \\", "completion": ""}
{"prompt": "--master-username gitpod \\", "completion": ""}
{"prompt": "--engine-version 5.7 \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should return an output similar to the following:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "\"DBInstance\": {", "completion": ""}
{"prompt": "\"DBInstanceClass\": \"db.m5.large\",", "completion": ""}
{"prompt": "\"DBInstanceStatus\": \"creating\",", "completion": ""}
{"prompt": "\"DBName\": \"gitpod\",", "completion": ""}
{"prompt": "\"PreferredBackupWindow\": \"22:11-22:41\",", "completion": ""}
{"prompt": "\"DBSecurityGroups\": [],", "completion": ""}
{"prompt": "[...]", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws rds describe-db-instances \\", "completion": ""}
{"prompt": "--query 'DBInstances[0].[DBInstanceStatus,Endpoint.Address]'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "[", "completion": ""}
{"prompt": "\"<instance endpoint, similar to: gitpod-instance.coynfywwqpjg.eu-west-1.rds.amazonaws.com>\"", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Store the MySQL instance endpoint for later use in the Gitpod installer:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"azure\">", "completion": ""}
{"prompt": "This section will create an Azure MySQL server instance and database for Gitpod. This external database is required to run a Gitpod cluster for production purposes. Using a dedicated MySQL instance for Gitpod is recommended but a pre-existing MySQL instance may be used if it can host databases named `gitpod` and `gitpod-sessions`.", "completion": ""}
{"prompt": "First, set a MySQL server name. Azure MySQL server names must be universally unique; we recommend using a random value to avoid conflicts. Note this value for later use.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "echo \"$MYSQL_INSTANCE_NAME\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export MYSQL_GITPOD_USERNAME=\"gitpod\"", "completion": ""}
{"prompt": "echo \"$MYSQL_GITPOD_PASSWORD\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "az mysql server create \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\" \\", "completion": ""}
{"prompt": "--admin-user \"${MYSQL_USERNAME}\" \\", "completion": ""}
{"prompt": "--auto-grow Enabled \\", "completion": ""}
{"prompt": "--sku-name GP_Gen5_2 \\", "completion": ""}
{"prompt": "--storage-size 20480 \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After creating the MySQL server create a database called `gitpod`. When Gitpod is installed it will create an additional database called `gitpod-sessions`.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--name gitpod \\", "completion": ""}
{"prompt": "--server-name \"${MYSQL_INSTANCE_NAME}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "> See the [Azure MySQL firewall API documentation](https://docs.microsoft.com/en-us/azure/mysql/single-server/concepts-firewall-rules#connecting-from-azure) for more information.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--name \"Azure_Resources\" \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\" \\", "completion": ""}
{"prompt": "--end-ip-address \"0.0.0.0\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Congratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions in the [installation guide](../installing-gitpod#install-gitpod).", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-install\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ---------------- | ----------------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------------------------- | -------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Container registry URL      | `gcr.io/${PROJECT_NAME}/gitpod`<br/>(replace `${PROJECT_NAME}` with your GCP project name)               |", "completion": ""}
{"prompt": "| Container registry username | `_json_key`                                                                                              |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------------------ | -------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Google Cloud SQL Proxy   | yes                                                                                          |", "completion": ""}
{"prompt": "| Username                 | value of `${MYSQL_GITPOD_USERNAME}`                                                          |", "completion": ""}
{"prompt": "| GCP service account key  | Upload file `./mysql-credentials.json`                                                       |", "completion": ""}
{"prompt": "Select `GCP` as object storage provider.", "completion": ""}
{"prompt": "| Object storage      |                                     |", "completion": ""}
{"prompt": "| Storage provider    | GCP                                 |", "completion": ""}
{"prompt": "| Project ID          | value of `${PROJECT_NAME}`          |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------------------------- | ----------------------- |", "completion": ""}
{"prompt": "| cert-manager                | yes                     |", "completion": ""}
{"prompt": "| Issuer type                 | Select \u201ccluster issuer\u201d |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "If you followed the steps to create your infrastructure on the AWS portion of this guide, you need to use the following config settings for your Gitpod installation:", "completion": ""}
{"prompt": "| General Settings |                         |", "completion": ""}
{"prompt": "| Domain name      | value of `$DOMAIN_NAME` |", "completion": ""}
{"prompt": "Select the in-cluster registry checkbox, and select the **S3** storage provider.", "completion": ""}
{"prompt": "| Container registry |                                                                                                      |", "completion": ""}
{"prompt": "| Storage region     | The S3 bucket region (such as `eu-west-1`)                                                           |", "completion": ""}
{"prompt": "| S3 bucket name     | value of `${S3_BUCKET_NAME}`                                                                         |", "completion": ""}
{"prompt": "| S3 secret key      | value of `SecretAccessKey`                                                                           |", "completion": ""}
{"prompt": "Unselect the **Use MySQL in-cluster** checkbox and also make sure that the **Use Google Cloud SQL Proxy** checkbox is not selected.", "completion": ""}
{"prompt": "| Database |                                  |", "completion": ""}
{"prompt": "| Hostname | value of `${MYSQL_RDS_ENDPOINT}` |", "completion": ""}
{"prompt": "| Password | value of `${MYSQL_GITPOD_PW}`    |", "completion": ""}
{"prompt": "Select **S3** as the object storage provider.", "completion": ""}
{"prompt": "| Object storage   |                                                                                                      |", "completion": ""}
{"prompt": "| Storage region   | The S3 bucket region (such as `eu-west-1`)                                                           |", "completion": ""}
{"prompt": "| S3 bucket name   | value of `${S3_BUCKET_NAME}`                                                                         |", "completion": ""}
{"prompt": "| S3 secret key    | value of `SecretAccessKey`                                                                           |", "completion": ""}
{"prompt": "Keep cert-manager selected for the TLS certificates options.", "completion": ""}
{"prompt": "| TLS certificates            |                         |", "completion": ""}
{"prompt": "| Self-signed TLS certificate | no                      |", "completion": ""}
{"prompt": "| Issuer name                 | `gitpod-issuer`         |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ---------------- | ----------------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------------------------- | ------------------------------------- |", "completion": ""}
{"prompt": "| Container registry URL      | Value of `${AZURE_REGISTRY_URL}`      |", "completion": ""}
{"prompt": "| Container registry username | Value of `${AZURE_REGISTRY_USERNAME}` |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------------------ | ---------------------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| Google Cloud SQL Proxy   | unchecked                                                                                                              |", "completion": ""}
{"prompt": "| Username                 | Value of `${MYSQL_GITPOD_USERNAME}@${MYSQL_INSTANCE_NAME}`                                                             |", "completion": ""}
{"prompt": "| Password                 | Use default value (`3306`)                                                                                             |", "completion": ""}
{"prompt": "Select **Azure** as the object storage provider.", "completion": ""}
{"prompt": "| Object storage   |                                                                                                      |", "completion": ""}
{"prompt": "| Storage region   | value of `${LOCATION}`                                                                               |", "completion": ""}
{"prompt": "| Access key       | value of `${STORAGE_ACCOUNT_KEY}`                                                                    |", "completion": ""}
{"prompt": "Keep cert-manager selected for the TLS certificates options.", "completion": ""}
{"prompt": "| TLS certificates            |                         |", "completion": ""}
{"prompt": "| Self-signed TLS certificate | no                      |", "completion": ""}
{"prompt": "| Issuer name                 | `gitpod-issuer`         |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</CloudPlatformToggle>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "layout: false", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.example.com", "completion": ""}
{"prompt": "*.ws.gitpod.example.com", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The entry point for all traffic is the `proxy` component which has a service of type `LoadBalancer` that allows inbound traffic on ports 80 (HTTP) and 443 (HTTPS) as well as port 22 (SSH access to the workspaces).", "completion": ""}
{"prompt": "SSH access is required to work with desktop IDEs, such as [VS Code Desktop](/docs/references/ides-and-editors/vscode) and JetBrains via [JetBrains Gateway](/docs/integrations/jetbrains-gateway). To enable SSH, your **load balancer** needs to be capable of working with [L4 protocols](https://en.wikipedia.org/wiki/OSI_model#Layer_4:_Transport_layer).", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-networking\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "cloud.google.com/neg: '{\"exposed_ports\": {\"80\":{},\"443\": {}}}'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "It is suggested to create a dedicated VPC (and EKS instance) for Gitpod. `eksctl` can do this for you, but if VPCs have to be configured separately, follow `eksctl`\u2019s [suggestions](https://eksctl.io/usage/vpc-configuration/).", "completion": ""}
{"prompt": "> **Note**: You can also customize `eksctl`\u2019s [vpc](https://eksctl.io/usage/vpc-subnet-settings/#custom-subnet-topology) creation to suit your existing configurations.", "completion": ""}
{"prompt": "The VPC needs public and private subnets. All managed node groups and Gitpod services should run in the private subnet. Inbound access to the services should be through ALB/ELB services auto-provisioned by AWS based on the configuration used (standard LoadBalancer roles or creation of an Ingress). If running a jump host or VPN endpoint, it should be deployed in the public subnet.", "completion": ""}
{"prompt": "> By default, when Gitpod is being installed, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow [the Setting up your EKS cluster with dual ALB + NLB load balancers guide](../advanced/eks-with-alb-and-nlb) _alongside_ this reference architecture guide.", "completion": ""}
{"prompt": "If installing Calico, follow their [installation steps](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks) and ensure you modify the `hostNetwork: True` option on the cert-manager installation options later.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You also need to configure your **DNS server**. If you have your own DNS server for your domain, make sure the domain with all wildcards points to your load balancer.", "completion": ""}
{"prompt": "Creating a dedicated DNS zone is recommended when using cert-manager or external-dns but is not required. A pre-existing DNS zone may be used as long as the **cert-manager** and/or **external-dns** services are authorized to manage DNS records within that zone. If you are providing your own TLS certificates and will manually create A records pointing to Gitpod's public load balancer IP addresses then creating a zone is unnecessary.", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-dns\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "DNS_SA=gitpod-dns01-solver", "completion": ""}
{"prompt": "gcloud iam service-accounts create \"${DNS_SA}\" --display-name \"${DNS_SA}\"", "completion": ""}
{"prompt": "--member serviceAccount:\"${DNS_SA_EMAIL}\" --role=\"roles/dns.admin\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud iam service-accounts keys create --iam-account \"${DNS_SA_EMAIL}\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After that, we create a [managed zone](https://cloud.google.com/dns/docs/zones).", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "gcloud dns managed-zones create \"${CLUSTER_NAME}\" \\", "completion": ""}
{"prompt": "--description \"Automatically managed zone by kubernetes.io/external-dns\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<summary  class=\"text-p-medium\">Example on how to install External DNS with helm</summary>", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "helm repo update", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--create-namespace \\", "completion": ""}
{"prompt": "--namespace external-dns \\", "completion": ""}
{"prompt": "--set provider=google \\", "completion": ""}
{"prompt": "--set logFormat=json \\", "completion": ""}
{"prompt": "--wait \\", "completion": ""}
{"prompt": "bitnami/external-dns", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud dns managed-zones describe ${CLUSTER_NAME} --format json | jq '.nameServers'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "If a Route53 zone has not yet been created, you can do so with the following command (replace `gitpod.example.com.` with the intended zone):", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "export ROUTE53_CALLER=$(cat /proc/sys/kernel/random/uuid)", "completion": ""}
{"prompt": "--name \"${DOMAIN_NAME}.\" \\", "completion": ""}
{"prompt": "--hosted-zone-config Comment=\"gitpod-zone\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws route53 list-hosted-zones --query \"HostedZones[?Name==\\`$DOMAIN_NAME.\\`]\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "[", "completion": ""}
{"prompt": "\"Id\": \"/hostedzone/Z1230498123094\",", "completion": ""}
{"prompt": "\"CallerReference\": \"c43f5dfd-87d9-45fc-bb1f-33bf35d8244b\",", "completion": ""}
{"prompt": "\"Comment\": \"\",", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Store this hosted zone in a variable for later use by external-dns and cert-manager:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--dns-name \"$DOMAIN_NAME.\" \\", "completion": ""}
{"prompt": "--output json \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Then install external-dns so that DNS records will be automatically created for Gitpod services. This can be ignored if you are managing DNS records yourself.", "completion": ""}
{"prompt": "<!--", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "an AWS IAM role to to the external-dns service account. The helm chart assumes that the service", "completion": ""}
{"prompt": "- For security purposes external-dns runs with a [UID of 65534](https://github.com/kubernetes-sigs/external-dns/blob/v0.12.2/Dockerfile#L35-L37)", "completion": ""}
{"prompt": "is running as a non-root user the `fsGroup` setting must be set to change the ownership of the", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "helm repo update", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--create-namespace \\", "completion": ""}
{"prompt": "--namespace external-dns \\", "completion": ""}
{"prompt": "--wait \\", "completion": ""}
{"prompt": "--set aws.zoneType=public \\", "completion": ""}
{"prompt": "--set \"domainFilters[0]=$DOMAIN_NAME\" \\", "completion": ""}
{"prompt": "--set serviceAccount.name=external-dns \\", "completion": ""}
{"prompt": "external-dns \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "With Route53 created, you can now proceed to install cert-manager. Cert-manager is needed for Gitpod's internal networking even if you are managing DNS yourself.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"azure\">", "completion": ""}
{"prompt": "This section will create an Azure managed zone, grant the AKS cluster permission to manage records in that zone, and install external-dns.", "completion": ""}
{"prompt": "Begin by creating a new Azure managed zone. For example, if you plan on hosting Gitpod at `gitpod.svcs.example.com` then create a managed zone called `svcs.example.com`.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "az network dns zone create --name $DOMAIN_NAME --resource-group $RESOURCE_GROUP", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "ZONE_ID=$(az network dns zone show --name \"${DOMAIN_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"id\" -o tsv)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "--assignee \"${KUBELET_OBJECT_ID}\" \\", "completion": ""}
{"prompt": "--scope \"${ZONE_ID}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "> to authorizes the entire AKS cluster to manage DNS records in the given zone, including cert-manager and external-dns.", "completion": ""}
{"prompt": "Look up the AKS kubelet client identity; external-dns will use this identity when authenticating to the Azure API.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Then install the external-dns Helm chart:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "helm repo update", "completion": ""}
{"prompt": "--install \\", "completion": ""}
{"prompt": "--wait \\", "completion": ""}
{"prompt": "--create-namespace \\", "completion": ""}
{"prompt": "--reset-values \\", "completion": ""}
{"prompt": "--set azure.resourceGroup=\"${RESOURCE_GROUP}\" \\", "completion": ""}
{"prompt": "--set azure.tenantId=\"${AZURE_TENANT_ID}\" \\", "completion": ""}
{"prompt": "--set azure.userAssignedIdentityID=\"${KUBELET_CLIENT_ID}\" \\", "completion": ""}
{"prompt": "external-dns \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</CloudPlatformToggle>", "completion": ""}
{"prompt": "Q: How do I cert-manager?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"gcp\">", "completion": ""}
{"prompt": "Example on how to install cert-manager on GCP:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "helm repo update", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--create-namespace \\", "completion": ""}
{"prompt": "--namespace cert-manager \\", "completion": ""}
{"prompt": "--set installCRDs=true \\", "completion": ""}
{"prompt": "--wait \\", "completion": ""}
{"prompt": "jetstack/cert-manager", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "Due to the networking behavior and service accounts in EKS, cert-manager needs a different installation procedure. First, install cert-manager with the following command:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "helm repo update", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--create-namespace \\", "completion": ""}
{"prompt": "--namespace cert-manager \\", "completion": ""}
{"prompt": "--set installCRDs=true \\", "completion": ""}
{"prompt": "--set webhook.hostNetwork=true \\", "completion": ""}
{"prompt": "--set serviceAccount.create=false \\", "completion": ""}
{"prompt": "--wait \\", "completion": ""}
{"prompt": "jetstack/cert-manager", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl patch deployment cert-manager -n cert-manager -p \\", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "helm repo add jetstack https://charts.jetstack.io", "completion": ""}
{"prompt": "helm upgrade \\", "completion": ""}
{"prompt": "--atomic \\", "completion": ""}
{"prompt": "--cleanup-on-fail \\", "completion": ""}
{"prompt": "--namespace='cert-manager' \\", "completion": ""}
{"prompt": "--set installCRDs=true \\", "completion": ""}
{"prompt": "cert-manager \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In this reference architecture, we use cert-manager to also create **TLS certificates for the Gitpod domain**. Since we need wildcard certificates for the subdomains, you must use the [DNS-01 challenge](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge).", "completion": ""}
{"prompt": "Using a certificate issued by Let's Encrypt is recommended as it minimizes overhead involving TLS certificates and managing CA certificate trust, but is not required. If you already have TLS certificates for your Gitpod installation with suitable DNS names you can skip this step and use your own certificates during the installation.", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-cert-manager-tls\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "CLOUD_DNS_SECRET=clouddns-dns01-solver", "completion": ""}
{"prompt": "--namespace=cert-manager \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After that, we are telling cert-manager which service account it should use:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--overwrite \"iam.gke.io/gcp-service-account=${DNS_SA_EMAIL}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: apiVersion: cert-manager.io/v1", "completion": ""}
{"prompt": "metadata:", "completion": ""}
{"prompt": "spec:", "completion": ""}
{"prompt": "email: $LETSENCRYPT_EMAIL", "completion": ""}
{"prompt": "privateKeySecretRef:", "completion": ""}
{"prompt": "solvers:", "completion": ""}
{"prompt": "cloudDNS:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "\u2026 and run:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: apiVersion: cert-manager.io/v1", "completion": ""}
{"prompt": "metadata:", "completion": ""}
{"prompt": "spec:", "completion": ""}
{"prompt": "server: https://acme-v02.api.letsencrypt.org/directory", "completion": ""}
{"prompt": "privateKeySecretRef:", "completion": ""}
{"prompt": "solvers:", "completion": ""}
{"prompt": "dnsZones:", "completion": ""}
{"prompt": "dns01:", "completion": ""}
{"prompt": "region: us-east-1", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "> be careful to use the `us-east-1` region for all regions other than the Beijing and Ningxia Regions, and `cn-northwest-1`", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "AZURE_SUBSCRIPTION_ID=\"$(az account subscription list --query '[0].subscriptionId' --output tsv)\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "apiVersion: cert-manager.io/v1", "completion": ""}
{"prompt": "metadata:", "completion": ""}
{"prompt": "spec:", "completion": ""}
{"prompt": "server: https://acme-v02.api.letsencrypt.org/directory", "completion": ""}
{"prompt": "name: issuer-account-key", "completion": ""}
{"prompt": "- dns01:", "completion": ""}
{"prompt": "subscriptionID: $AZURE_SUBSCRIPTION_ID", "completion": ""}
{"prompt": "hostedZoneName: $DOMAIN_NAME", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl apply -f issuer.yaml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "> Refer to the [cert-manager AzureDNS DNS01](https://cert-manager.io/docs/configuration/acme/dns01/azuredns/) documentation for more information on cert-manager API authorization.", "completion": ""}
{"prompt": "</CloudPlatformToggle>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "layout: false", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- **Source Control Management (SCM)**, e.g. GitLab, GitHub, GitHub Enterprise, BitBucket, or BitBucket Server", "completion": ""}
{"prompt": "- **OCI Image Registry**, e.g. Google Artifact Registry.<br/>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "You need to prepare your workstation and your cloud provider (e.g. creating a project and preparing service accounts) to be able to replicate this reference architecture.", "completion": ""}
{"prompt": "Independent of the cloud provider you are using, you need to have `kubectl` installed on your workstation and configured to access your cluster after creation.", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-preparations\">", "completion": ""}
{"prompt": "<div slot=\"gcp\">", "completion": ""}
{"prompt": "In order to deploy Gitpod on the [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine) of the [Google Cloud Platform (GCP)](https://cloud.google.com/docs), you need to create and configure a project for your installation. In this guide, we give you examples of how to create the needed resources by using the command line tool `gcloud`. To follow these examples make sure you have [installed the `gcloud` CLI](https://cloud.google.com/sdk/docs/install) and [logged in to your Google Cloud account](https://cloud.google.com/sdk/gcloud/reference/auth/login). You can also use the [GCP Console](https://console.cloud.google.com/) or the API instead. In that case, please refer to the linked Google docs.", "completion": ""}
{"prompt": "First, [create a GCP project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) and [enable billing](https://cloud.google.com/billing/docs/concepts) (you have to enable billing to enable GKE). You can freely choose a name for your project (hereinafter referred to as environment variable `PROJECT_NAME`). You also need the billing account ID (referred to as `BILLING_ACCOUNT`). To see available lDs, run [`gcloud alpha billing accounts list`](https://cloud.google.com/sdk/gcloud/reference/alpha/billing/accounts/list).", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "gcloud projects create \"${PROJECT_NAME}\" --set-as-default", "completion": ""}
{"prompt": "BILLING_ACCOUNT=0X0X0X-0X0X0X-0X0X0X", "completion": ""}
{"prompt": "--billing-account \"${BILLING_ACCOUNT}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud config get-value project", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| containerregistry.googleapis.com | [Docker container images registry](https://cloud.google.com/container-registry)              | Enable this service such that Gitpod can push workspace images to that repository.           |", "completion": ""}
{"prompt": "| compute.googleapis.com           | [Google Compute Engine API](https://cloud.google.com/compute/docs/reference/rest/v1)         | The Google Compute Engine empowers to run virtual machines (VMs) for the Kubernetes cluster. |", "completion": ""}
{"prompt": "| dns.googleapis.com               | [Cloud DNS](https://cloud.google.com/dns/docs/reference/v1)                                  | Cloud DNS is used in this reference architecture so set up the domain name resolution.       |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud services enable cloudbilling.googleapis.com", "completion": ""}
{"prompt": "gcloud services enable iam.googleapis.com", "completion": ""}
{"prompt": "gcloud services enable container.googleapis.com", "completion": ""}
{"prompt": "gcloud services enable sqladmin.googleapis.com", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Subnets", "completion": ""}
{"prompt": "- EC2 Instances", "completion": ""}
{"prompt": "- Elastic Load Balancers", "completion": ""}
{"prompt": "Specifically for Gitpod's use, you will also need permissions to create these additional components:", "completion": ""}
{"prompt": "- Route53 DNS Zone for the intended Gitpod domain name (for use with Let's Encrypt certificate generation)", "completion": ""}
{"prompt": "- S3 Bucket: Hosting Gitpod's workspace images and object storage", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [EKS CLI `eksctl`](https://eksctl.io/) for creating the EKS cluster and nodegroups themselves", "completion": ""}
{"prompt": "Amazon has a brief run-through on how to [deploy a basic cluster](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html) using the `eksctl` tooling if you'd like to familiarize yourself before deploying the Gitpod reference architecture.", "completion": ""}
{"prompt": "Make sure you are logged in and are connected to the proper AWS account. Ensure AWS is configured and working with the command `aws sts get-caller-identity`. For later steps you will need to ensure that `kubectl` is [properly configured to authenticate to the newly provisioned EKS environment](https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html).", "completion": ""}
{"prompt": "**AWS Region Setting**", "completion": ""}
{"prompt": "All commands that follow assume you have set an environment variable of `AWS_REGION` to your appropriate region or have it configured in your profile already and so will not include `--region` or `--profile` when running the `aws` command. Refer to the [AWS CLI documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html) for more information.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"azure\">", "completion": ""}
{"prompt": "To deploy Gitpod on [Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes), you must have an Azure subscription and account with permission deploy AKS clusters and associated component services, including the following:", "completion": ""}
{"prompt": "- AKS Clusters", "completion": ""}
{"prompt": "- MySQL Databases", "completion": ""}
{"prompt": "- Azure Container Registries", "completion": ""}
{"prompt": "- Azure DNS managed domains (and rights to assign roles on managed zones)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Sign in with a Service Principal](https://learn.microsoft.com/en-us/cli/azure/authenticate-azure-cli#sign-in-with-a-service-principal) (recommended for production installations)", "completion": ""}
{"prompt": "**Tools**", "completion": ""}
{"prompt": "This guide uses the following tools:", "completion": ""}
{"prompt": "- [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli)", "completion": ""}
{"prompt": "If `kubectl` is not present the Azure CLI can be used to install `kubectl`:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**Location and Resource Group**", "completion": ""}
{"prompt": "Azure uses _resource groups_ to logically group related resources. This guide uses a dedicated resource group for the Gitpod AKS cluster and all component resources. Creating a new resource group for Gitpod resources is recommended but a pre-existing resource group may be used if necessary.", "completion": ""}
{"prompt": "Set environment variables indicating the resource group and location where Gitpod resources will be created:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "export LOCATION=\"centralus\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "az group create --location $LOCATION --name \"$RESOURCE_GROUP\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Kubernetes clusters pull their components from an **image registry**. In Gitpod, image registries are used for three different purposes:", "completion": ""}
{"prompt": "1. Pulling the actual Gitpod software (components like `server`, `image-builder`, etc.).", "completion": ""}
{"prompt": "3. Pushing individual workspace images that are built for workspaces during image start. That are for example custom images that are defined in a `.gitpod.Dockerfile` in the repo. These images are pulled by Kubernetes after image building to provision the workspace. This is the only case where Gitpod needs write access to push images.", "completion": ""}
{"prompt": "We use a different registry for each of the three items in this reference architecture. The Gitpod images (1) are pulled from a public Google Container Registry we provide. The workspace base image (2) is pulled from Docker Hub (or from the location that is set in the Dockerfile of the corresponding repo). For the individual workspace images (3), we create an image registry that is provided by the used cloud provider. You could also configure Gitpod to use the same registry for all cases. That is particularly useful for [air-gap installations](../advanced/air-gap) where you have access to an internal image registry only.", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-registry\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "ECR is currently not supported, so configuring the registry will require using an S3 bucket. You can reuse the same S3 bucket used for object storage or a separate one. The steps would be identical in creation, just use different names for both the bucket and the IAM user account.", "completion": ""}
{"prompt": "> Please refer to the [Object Storage](./single-cluster-ref-arch#object-storage) section for instructions on how to create an S3 bucket. You can re-use the bucket created there as your registry storage backe-end.", "completion": ""}
{"prompt": "To configure Gitpod to use the bucket created, ensure you select `In-cluster Registry`, and `S3 storage` in the installation UI. Then input the values of the bucket you've created. When setting the endpoint, please include the region such that `s3.amazonaws.com` becomes `s3.eu-west-1.amazonaws.com`.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"azure\">", "completion": ""}
{"prompt": "This section will create an Amazon Container Registry for workspace images.", "completion": ""}
{"prompt": "First, generate a name for the ACR instance. ACR instance names must be unique; using a random suffix is recommended but any unique registry name is sufficient.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Note the value of `$REGISTRY_NAME` for later use.", "completion": ""}
{"prompt": "Create the container registry:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--admin-enabled true \\", "completion": ""}
{"prompt": "--name \"${REGISTRY_NAME}\" \\", "completion": ""}
{"prompt": "--sku Premium", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "AZURE_REGISTRY_URL=$(az acr show \\", "completion": ""}
{"prompt": "--output tsv \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\")", "completion": ""}
{"prompt": "AZURE_REGISTRY_USERNAME=$(az acr credential show \\", "completion": ""}
{"prompt": "--output tsv \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\")", "completion": ""}
{"prompt": "AZURE_REGISTRY_PASSWORD=$(az acr credential show \\", "completion": ""}
{"prompt": "--output tsv \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\")", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Gitpod uses **object storage** to store blob data. This includes workspace backups that are created when a workspace stops and are used to restore state upon restart. Different user settings like IDE preferences are also stored this way.", "completion": ""}
{"prompt": "This reference architecture uses managed object storage commonly offered by all cloud providers.", "completion": ""}
{"prompt": "<CloudPlatformToggle id=\"cloud-platform-toggle-object-storage\">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------------------- |", "completion": ""}
{"prompt": "| roles/storage.objectAdmin |", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "OBJECT_STORAGE_SA_EMAIL=\"${OBJECT_STORAGE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Save the service account key to the file `./gs-credentials.json`:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "./gs-credentials.json", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<div slot=\"aws\">", "completion": ""}
{"prompt": "Below, we create one S3 bucket and one IAM User service account to access it. These credentials and the bucket are used for both object storage and storing the workspace images via a Registry frontend deployed in Gitpod (and when Gitpod is installed). The bucket has to have a globally unique name.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "echo ${S3_BUCKET_NAME}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Create an S3 bucket using the following command:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--bucket ${S3_BUCKET_NAME} \\", "completion": ""}
{"prompt": "--object-ownership BucketOwnerEnforced", "completion": ""}
{"prompt": "--bucket ${S3_BUCKET_NAME} \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I create an iam user for credentials with access just to this bucket?", "completion": ""}
{"prompt": "aws iam create-user \\", "completion": ""}
{"prompt": "--tags Key=project,Value=gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"s3:ListBucketMultipartUploads\",", "completion": ""}
{"prompt": "\"s3:GetBucketLocation\"", "completion": ""}
{"prompt": "\"Effect\": \"Allow\",", "completion": ""}
{"prompt": "\"Sid\": \"\"", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"s3:PutObject\",", "completion": ""}
{"prompt": "\"s3:GetObject\",", "completion": ""}
{"prompt": "\"s3:AbortMultipartUpload\"", "completion": ""}
{"prompt": "\"Effect\": \"Allow\",", "completion": ""}
{"prompt": "\"Sid\": \"\"", "completion": ""}
{"prompt": "],", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws iam create-policy \\", "completion": ""}
{"prompt": "--policy-document <file://S3_policy.json> \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in the following output:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "\"Policy\": {", "completion": ""}
{"prompt": "\"PolicyId\": \"ANPA2B3JAS5KQGN6MQRMW\",", "completion": ""}
{"prompt": "\"Path\": \"/\",", "completion": ""}
{"prompt": "\"AttachmentCount\": 0,", "completion": ""}
{"prompt": "\"IsAttachable\": true,", "completion": ""}
{"prompt": "\"UpdateDate\": \"2022-06-24T14:31:30+00:00\",", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"Value\": \"gitpod\"", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "aws iam attach-user-policy \\", "completion": ""}
{"prompt": "--policy-arn '<arn from above, similar to: arn:aws:iam::691173103445:policy/gitpod_s3_access_policy>'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Create an access key with the following command, and securely record the resulting `AccessKeyId` and `SecretAccessKey` fields:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in an output similar to the following:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "\"AccessKey\": {", "completion": ""}
{"prompt": "\"AccessKeyId\": \"<accessKeyId>\",", "completion": ""}
{"prompt": "\"SecretAccessKey\": \"<SecretAccessKey>\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "To test that these credentials provide write access to the S3 bucket, open a new shell session and configure it to use the `AccessKeyId` and `SecretAccessKey` you've just retrieved, and attempt to upload a file and then delete it:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "export AWS_SECRET_ACCESS_KEY=<SecretAccessKey>", "completion": ""}
{"prompt": "echo \"hello world\" > gitpod_test.txt", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: aws s3 ls s3://${S3_BUCKET_NAME}", "completion": ""}
{"prompt": "Q: How do I => 2022-06-24 15:50:20         12 gitpod_test.txt?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: aws s3 ls s3://${S3_BUCKET_NAME}", "completion": ""}
{"prompt": "Q: How do I => *nothing returns if empty*?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "unset AWS_ACCESS_KEY_ID", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"azure\">", "completion": ""}
{"prompt": "This section will create an Azure storage account for Gitpod object storage and backups.", "completion": ""}
{"prompt": "Generate a name for the Azure storage account. The Azure storage account name must be globally unique; using a random suffix is recommended but any unique value can be used.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "echo \"$STORAGE_ACCOUNT_NAME\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "az storage account create \\", "completion": ""}
{"prompt": "--kind StorageV2 \\", "completion": ""}
{"prompt": "--name \"${STORAGE_ACCOUNT_NAME}\" \\", "completion": ""}
{"prompt": "--sku Standard_LRS", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "KUBELET_PRINCIPAL_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)", "completion": ""}
{"prompt": "STORAGE_ACCOUNT_ID=$(az storage account show \\", "completion": ""}
{"prompt": "--output tsv \\", "completion": ""}
{"prompt": "--resource-group \"${RESOURCE_GROUP}\")", "completion": ""}
{"prompt": "az role assignment create \\", "completion": ""}
{"prompt": "--role \"Storage Blob Data Contributor\" \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Note the storage account key for later use.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "--account-name \"${STORAGE_ACCOUNT_NAME}\" \\", "completion": ""}
{"prompt": "--query '[?keyName==`key1`].value' \\", "completion": ""}
{"prompt": ")", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I reference architectures?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Below you will find reference architectures supported and recommended by Gitpod for different situations and all major cloud providers. They help you create the infrastructure needed to run Gitpod Self-Hosted and come in the form of a guide and terraform configuration. These are used to create the infrastructure for our nightly testing and fulfil the [requirements](../latest/requirements) Gitpod has on a cluster.", "completion": ""}
{"prompt": "> **Note:** You should see these reference architectures as a starting point for creating infrastructure that works with both Gitpod and your own infrastructure requirements and policies. However, the further you deviate from these recommended architectures, the higher the potential for Gitpod to not behave as expected.", "completion": ""}
{"prompt": "|                                                                                                                                                                            |                                                                                       |", "completion": ""}
{"prompt": "| [**Proof-of-Value Reference Architecture**](./reference-architecture/proof-of-value)<Pill variant=\"orange\" text=\"alpha\" class=\"ml-1.5\"/>                                   | Aimed at creating a minimal set of infrastructure for evaluation and testing purposes |", "completion": ""}
{"prompt": "| <p style=\"font-size: var(--p-small); font-weight: 500;\"> Multi-Cluster High-Availiability Reference Architecture <Pill variant=\"pink\" text=\"planned\" class=\"ml-1.5\"/></p>  |                                                                                       |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: \"Proof-of-Value Reference Architecture\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";", "completion": ""}
{"prompt": "import Networking from \"./_chunks/networking.md\";", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I proof-of-value reference architecture?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "|               |                                                                                                                                                                                                                                                                                                                  |", "completion": ""}
{"prompt": "| Status:       | <BigPill text=\"alpha\" variant=\"pink\" class=\"ml-1.5\" />                                                                                                                                                                                                                                                           |", "completion": ""}
{"prompt": "| Limitations:  | - Not intended for long-term, production usage <br/> - Higher risk of data loss due to in-cluster dependencies - if you lose your cluster, you may lose your data <br/> - Data is not carried over when moving to the [Single Cluster Reference Architecture](./single-cluster-ref-arch) for production purposes |", "completion": ""}
{"prompt": "Q: How do I overview?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <Preparations />", "completion": ""}
{"prompt": "Q: How do I kubernetes cluster?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `gitpod.io/workload_ide=true`", "completion": ""}
{"prompt": "- `gitpod.io/workload_workspace_regular=true`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ---------------- | ----------------- | ------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------------------- |", "completion": ""}
{"prompt": "| roles/monitoring.metricWriter |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "GKE_SA=gitpod-gke", "completion": ""}
{"prompt": "gcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"", "completion": ""}
{"prompt": "gcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After that, we [create a **Kubernetes cluster**](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-regional-cluster).", "completion": ""}
{"prompt": "|                   |                                                                                                                                                                                                                        |", "completion": ""}
{"prompt": "| Image Type        | `UBUNTU_CONTAINERD`                                                                                                                                                                                                    |", "completion": ""}
{"prompt": "| Cluster Version   | Choose latest from [regular channel](https://cloud.google.com/kubernetes-engine/docs/release-notes-regular)                                                                                                            |", "completion": ""}
{"prompt": "| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                                                                                                                               |", "completion": ""}
{"prompt": "| Number of nodes   | 1                                                                                                                                                                                                                      |", "completion": ""}
{"prompt": "| Max Nodes         | 50                                                                                                                                                                                                                     |", "completion": ""}
{"prompt": "| Addons            | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                                                                                                                                          |", "completion": ""}
{"prompt": "| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones)                                                                                                                                    |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "CLUSTER_NAME=gitpod", "completion": ""}
{"prompt": "GKE_VERSION=1.21.12", "completion": ""}
{"prompt": "gcloud container clusters \\", "completion": ""}
{"prompt": "--disk-type=\"pd-ssd\" \\", "completion": ""}
{"prompt": "--image-type=\"UBUNTU_CONTAINERD\" \\", "completion": ""}
{"prompt": "--cluster-version=\"${GKE_VERSION}\" \\", "completion": ""}
{"prompt": "--service-account \"${GKE_SA_EMAIL}\" \\", "completion": ""}
{"prompt": "--no-enable-basic-auth \\", "completion": ""}
{"prompt": "--enable-autorepair \\", "completion": ""}
{"prompt": "--enable-ip-alias \\", "completion": ""}
{"prompt": "--create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\", "completion": ""}
{"prompt": "--scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\", "completion": ""}
{"prompt": "--min-nodes=1 \\", "completion": ""}
{"prompt": "--addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gcloud container clusters get-credentials --zone=\"${ZONE}\" \"${CLUSTER_NAME}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "kubectl create clusterrolebinding cluster-admin-binding \\", "completion": ""}
{"prompt": "--user=\"$(gcloud config get-value core/account)\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `aws-load-balancer-controller` enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers", "completion": ""}
{"prompt": "- `ebs-csi-controller-sa` enables provisioning of the EBS volumes for PVC storage", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "apiVersion: eksctl.io/v1alpha5", "completion": ""}
{"prompt": "metadata:", "completion": ""}
{"prompt": "region: eu-west-1", "completion": ""}
{"prompt": "# Update tags on your other Gitpod AWS resources (such as securitygroup rules)", "completion": ""}
{"prompt": "tags:", "completion": ""}
{"prompt": "team: selfhosted", "completion": ""}
{"prompt": "project: gitpod-pov", "completion": ""}
{"prompt": "iam:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- metadata:", "completion": ""}
{"prompt": "namespace: kube-system", "completion": ""}
{"prompt": "awsLoadBalancerController: true", "completion": ""}
{"prompt": "name: ebs-csi-controller-sa", "completion": ""}
{"prompt": "wellKnownPolicies:", "completion": ""}
{"prompt": "- metadata:", "completion": ""}
{"prompt": "namespace: kube-system", "completion": ""}
{"prompt": "autoScaler: true", "completion": ""}
{"prompt": "name: cert-manager", "completion": ""}
{"prompt": "wellKnownPolicies:", "completion": ""}
{"prompt": "- metadata:", "completion": ""}
{"prompt": "namespace: external-dns", "completion": ""}
{"prompt": "externalDNS: true", "completion": ""}
{"prompt": "Q: How do I uncomment and update for your region if you wish to use fewer availability zones?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I   - eu-west-1a?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I   - eu-west-1c?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I you can use an existing vpc by supplying private and/or public subnets. please check?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: vpc:", "completion": ""}
{"prompt": "nat:", "completion": ""}
{"prompt": "# HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using", "completion": ""}
{"prompt": "gateway: Single", "completion": ""}
{"prompt": "# Cluster endpoints and public access", "completion": ""}
{"prompt": "# For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/", "completion": ""}
{"prompt": "privateAccess: true", "completion": ""}
{"prompt": "publicAccessCIDRs: [\"0.0.0.0/0\"]", "completion": ""}
{"prompt": "Q: How do I logging settings?", "completion": ""}
{"prompt": "clusterLogging:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: managedNodeGroups:", "completion": ""}
{"prompt": "amiFamily: Ubuntu2004", "completion": ""}
{"prompt": "instanceTypes: [\"m6i.4xlarge\"]", "completion": ""}
{"prompt": "minSize: 1", "completion": ""}
{"prompt": "maxPodsPerNode: 110", "completion": ""}
{"prompt": "volumeSize: 512", "completion": ""}
{"prompt": "volumeIOPS: 6000", "completion": ""}
{"prompt": "ebsOptimized: true", "completion": ""}
{"prompt": "propagateASGTags: true", "completion": ""}
{"prompt": "iam:", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy", "completion": ""}
{"prompt": "- arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore", "completion": ""}
{"prompt": "tags:", "completion": ""}
{"prompt": "# Important - If you change the name of your EKS cluster from the", "completion": ""}
{"prompt": "# your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)", "completion": ""}
{"prompt": "# For example: `k8s.io/cluster-autoscaler/gitpod-corp-pov: \"owned\"`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.io/workload_meta: \"true\"", "completion": ""}
{"prompt": "gitpod.io/workload_workspace_regular: \"true\"", "completion": ""}
{"prompt": "gitpod.io/workload_workspace_headless: \"true\"", "completion": ""}
{"prompt": "preBootstrapCommands:", "completion": ""}
{"prompt": "- echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "To ensure there are enough IPs and networking policy enforcement is in place, this proof of value reference architecture uses Calico for networking. To enable Calico in an EKS installation it must be done after the control plane has been provisioned and before the nodegroups have been created.", "completion": ""}
{"prompt": "First: Run `eksctl` with the `--without-nodegroup` flag to provision just the control plane defined in the `gitpod-cluster.yaml`:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in the following output:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "2022-08-11 22:10:23 [\u2139]  using region eu-west-1", "completion": ""}
{"prompt": "2022-08-11 22:10:23 [\u2139]  subnets for eu-west-1b - public:192.168.0.0/19 private:192.168.96.0/19", "completion": ""}
{"prompt": "2022-08-11 22:10:23 [\u2139]  subnets for eu-west-1c - public:192.168.64.0/19 private:192.168.160.0/19", "completion": ""}
{"prompt": "[...]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After this command finishes, check that `eksctl` also created the kubeconfig properly by running the command `kubectl get pods -n kube-system`. If deployed correctly one should see the list of pods in a pending state.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "coredns-5947f47f5f-79vqv   0/1     Pending   0          22m", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**Calico Installation**", "completion": ""}
{"prompt": "This is following the instructions provided by [Tigera](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks).", "completion": ""}
{"prompt": "To install Calico, first remove the default AWS-provided networking component:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Install the Calico manifest:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now configure Calico for EKS-specific support with the following command:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**SSH Access to nodegroups**", "completion": ""}
{"prompt": "`eksctl` allows for [ssh keys](https://eksctl.io/usage/schema/#managedNodeGroups-ssh) to be added to your nodegroups for troubleshooting. By default, the `gitpod-cluster.yaml` does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity [through multiple methods](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html) to each instance in your nodegroup.", "completion": ""}
{"prompt": "**Create the gitpod nodegroup**", "completion": ""}
{"prompt": "Once the Calico CNI has been provisioned the gitpod nodegroup can be created.", "completion": ""}
{"prompt": "Create the Gitpod nodegroup:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This should result in:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "2022-08-11 22:52:13 [\u2139]  combined include rules: default", "completion": ""}
{"prompt": "2022-08-11 22:52:13 [\u2139]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod-pov\"", "completion": ""}
{"prompt": "2022-08-11 22:56:53 [\u2139]  node \"ip-192-168-104-44.eu-west-1.compute.internal\" is ready", "completion": ""}
{"prompt": "2022-08-11 22:56:57 [\u2139]  checking security group configuration for all nodegroups", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You can verify that your installation was deployed properly with the custom `kubectl` command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting [our minimum requirements](../../latest/cluster-set-up) as intended.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "RUNTIME:.status.nodeInfo.containerRuntimeVersion,\\", "completion": ""}
{"prompt": "KERNEL:.status.nodeInfo.kernelVersion,\\", "completion": ""}
{"prompt": "K8S:.status.nodeInfo.kubeletVersion,\\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**Enable cluster autoscaling**", "completion": ""}
{"prompt": "Gitpod's resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to provision and remove EKS nodes on demand.", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "AWS_REGION=\"eu-west-1\"", "completion": ""}
{"prompt": "helm repo add autoscaler https://kubernetes.github.io/autoscaler", "completion": ""}
{"prompt": "helm upgrade \\", "completion": ""}
{"prompt": "--cleanup-on-fail \\", "completion": ""}
{"prompt": "--namespace kube-system \\", "completion": ""}
{"prompt": "--wait \\", "completion": ""}
{"prompt": "--set awsRegion=$AWS_REGION \\", "completion": ""}
{"prompt": "--set rbac.serviceAccount.create=false \\", "completion": ""}
{"prompt": "--set securityContext.fsGroup=65534 \\", "completion": ""}
{"prompt": "--set extraArgs.skip-nodes-with-system-pods=false \\", "completion": ""}
{"prompt": "--set extraArgs.balance-similar-node-groups=true \\", "completion": ""}
{"prompt": "--set extraArgs.v=2 \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**Deleting the cluster**", "completion": ""}
{"prompt": "When deleting this cluster following your proof of value evaluation, any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working [with existing VPCs](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration) in `eksctl`.", "completion": ""}
{"prompt": "Full removal of the installed components would look something like this (commands are grouped for brevity):", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I access account, key, and policy can be kept for later use.?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: aws s3 rm s3://${S3_BUCKET_NAME} --recursive", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: aws iam detach-user-policy --user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'", "completion": ""}
{"prompt": "Q: How do I delete access keys:?", "completion": ""}
{"prompt": "aws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: aws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</CloudPlatformToggle>", "completion": ""}
{"prompt": "Q: How do I networking?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Congratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions of the [installation guide](../installing-gitpod).", "completion": ""}
{"prompt": "If you followed the steps to create your infrastructure of this guide, you need to use the following config settings for your Gitpod installation:", "completion": ""}
{"prompt": "| General settings |                    |", "completion": ""}
{"prompt": "| Domain name      | value of `$DOMAIN` |", "completion": ""}
{"prompt": "Keep cert-manager selected for the TLS certificates options.", "completion": ""}
{"prompt": "| TLS certificates            | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |", "completion": ""}
{"prompt": "| Self-signed TLS certificate | no                                                                                                                                                                                                                       |", "completion": ""}
{"prompt": "| Issuer name                 | `gitpod-issuer`                                                                                                                                                                                                          |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------------------------------------------------------------- ||", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: installation-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "import Overview from \"./_chunks/overview.md\";", "completion": ""}
{"prompt": "import Cluster from \"./_chunks/cluster.md\";", "completion": ""}
{"prompt": "import Registry from \"./_chunks/registry.md\";", "completion": ""}
{"prompt": "import Storage from \"./_chunks/storage.md\";", "completion": ""}
{"prompt": "import BigPill from \"$lib/components/big-pill.svelte\";", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I single-cluster reference architecture for production purposes?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "|                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                                                                                                                                                             |", "completion": ""}
{"prompt": "| Status:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | <BigPill text=\"alpha\" class=\"ml-1.5\" />                                                                                                                                                                                                                                                                                                                                                                                     |", "completion": ""}
{"prompt": "| Limitations:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | - This is bound to a single cluster. Deploying in several regions currently requires setting up several Gitpod installations <br /> - Creates external dependencies for Gitpod componenents (object storage, registry, database) <br /> - This is not highly available and requires downtime to upgrade (high availability requires a governed workspace cluster, which is beyond the scope of this reference architecture) |", "completion": ""}
{"prompt": "| Cost Estimates: <Tooltip title=\"These cost estimates do not include egress. However, we typically see egress cost to be an <br />additional 15% on top of the estimates here.  These estimates are just examples, <br /> the exact cost will depend on your set-up and usage profile - your cost <em>will</em> deviate.  <br />With  the configuration in these estimates, you are able to run 36 concurrent basic <br />  workspaces - assuming the same density as currently used in Gitpod SaaS.\"/> | High-level cost estimates\\*: <br /> - [GCP](https://cloudpricingcalculator.appspot.com#!?id=53d776be-60fa-4fe9-a64b-ae4c80e74645) <br /> - [AWS](https://calculator.aws/#/estimate?id=6df1417288724042faf49eed70fb8ea0f6e80c13)                                                                                                                                                                                             |", "completion": ""}
{"prompt": "This guide describes a single-cluster reference architecture for Gitpod aimed at production environments: continuous deployments of Gitpod used in anger by your engineers. It consists of a Kubernetes cluster, cert-manager, external MySQL database, external OCI image registry, and external object storage. It includes instructions on how to set up this reference architecture on the officially supported cloud providers.", "completion": ""}
{"prompt": "This reference architecture can be used as a blueprint for your Gitpod installation: Start with this reference architecture and adapt it to your needs. The reference architecture as described in this guide is what Gitpod supports, and is used to test against every self-hosted Gitpod release.", "completion": ""}
{"prompt": "To use Gitpod, you also need a Git source code management system (SCM) like GitLab, GitHub, or Bitbucket. You will find the supported SCMs in the [product compatibility matrix](/docs/references/compatibility?admin) your own SCM is beyond the scope of this guide. However, you can simply use the cloud versions of GitLab, GitHub, or Bitbucket as well as the possible existing installation in your corporate network.", "completion": ""}
{"prompt": "Q: How do I overview?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <Preparations />", "completion": ""}
{"prompt": "Q: How do I kubernetes cluster?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <Networking />", "completion": ""}
{"prompt": "Q: How do I object storage?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <Registry />", "completion": ""}
{"prompt": "Q: How do I database?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <Install />", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Reference", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Product compatibility Matrix](/docs/references/compatibility?admin) - Information on which versions of components do and do not work with Gitpod", "completion": ""}
{"prompt": "- [Telemetry](./telemetry) - Information about the telemetry that is gathered", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: reference", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I self-hosted gitpod releases and versioning?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Q: How do I release policy?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod is committed to supporting the last 2 versions of self-hosted Gitpod with patches and security updates.", "completion": ""}
{"prompt": "Q: How do I roll out policy?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!-- ToDo: link to reference architecture once this is shipped -->", "completion": ""}
{"prompt": "For each release, we validate that core Gitpod workflows function as expected via a series of automated and manual tests. These tests are performed on different Gitpod installations running on our [reference architectures](../latest/reference-architecture). This should help ensure that Gitpod works for you, assuming your architecture is close to the reference architecture.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Gitpod Self-Hosted Requirements", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![cluster requirements](../../static/images/docs/self-hosted/cluster-requirements.png)", "completion": ""}
{"prompt": "<!-- raw editable diagram can be found under static/images/docs/self-hosted/cluster-requirements.excalidraw -->", "completion": ""}
{"prompt": "Q: How do I reference architectures?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Please refer to the [product compatibility matrix](/docs/references/compatibility?admin) for supported Kubernetes versions and distributions.", "completion": ""}
{"prompt": "Q: How do I node affinity labels requirements?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `gitpod.io/workload_ide=true`", "completion": ""}
{"prompt": "- `gitpod.io/workload_workspace_regular=true`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: These are the components expected on each node (see [product compatibility matrix](/docs/references/compatibility?admin) for supported versions):", "completion": ""}
{"prompt": "- Ubuntu Linux", "completion": ""}
{"prompt": "- Containerd", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Your Kubernetes cluster must allow Gitpod to run privileged pods, as Gitpod depends on these privileges to provide workspace isolation.", "completion": ""}
{"prompt": "Q: How do I load balancer requirements?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Amazon Elastic Kubernetes Engine:", "completion": ""}
{"prompt": "- Layer 4 only: [Network Load Balancing](https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html)", "completion": ""}
{"prompt": "- [K3s](https://rancher.com/docs/k3s/latest/en/networking/#service-load-balancer)", "completion": ""}
{"prompt": "Q: How do I required components?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------------------------------------------------------------------------------------------------------------------- | ------------------------------ |", "completion": ""}
{"prompt": "| [Database](/docs/configure/self-hosted/latest/requirements#database)                                                 | Use default or bring your own  |", "completion": ""}
{"prompt": "| [Source Control Management System](/docs/configure/self-hosted/latest/requirements#source-control-management-system) | Yes (cloud or self-hosted SCM) |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: By default, MinIO is installed in the cluster to store static content and to back an in-cluster image registry. During the installation process you can also configure Gitpod to use an external storage providers like S3.", "completion": ""}
{"prompt": "Q: How do I database?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod relies on an image registry to store images used to start workspaces. By default, a docker based image registry backed by MiniIO is installed in the cluster (this can be configured during the installation). However, Gitpod is also compatible with any registry that implements the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/) specification.", "completion": ""}
{"prompt": "Q: How do I source control management system?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [Cert-manager](https://cert-manager.io/) must be installed in your cluster before you can install Gitpod. It is used to create and manage certificates needed to secure communication between the various internal Gitpod components. It can also be used to fetch a TLS certificate for your Gitpod instance from Let's Encrypt for example. Please consider the [cert-manager documentation](https://cert-manager.io/docs/) on how to install it.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Resource Configuration", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I [amazon elastic container registry (ecr)](https://aws.amazon.com/ecr/)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This example uses the format `gcr.io`, which is the global hostnames. This can be swapped with any of the [regional hostnames](https://cloud.google.com/container-registry/docs/pushing-and-pulling) and it will work in the same way.", "completion": ""}
{"prompt": "Google Container Registry authentication requires specific configuration. The \"Container registry URL\" will be in a format similar to `gcr.io/<project-name>/gitpod`. In order for the authentication to work, you must also enter the \"Container registry server\". This will always be your GCR hostname, eg `gcr.io`.", "completion": ""}
{"prompt": "Q: How do I [google artifact registry (gar)](https://cloud.google.com/artifact-registry)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: troubleshooting", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I stop workspaces?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "Sometimes it becomes necessary to stop Gitpod workspaces (in a `<namespace>`). Usually this needs to be done when updating Gitpod. Please see the [update guide](./updating) for more information.", "completion": ""}
{"prompt": "This can be done with `kubectl`, and when done so, the IDE is closed, data in `/workspace` is backed up, and then the pod finally terminates.", "completion": ""}
{"prompt": "Q: How do I a single workspace?", "completion": ""}
{"prompt": "$ kubectl delete pods <workspace-or-headless-pod-name> -n <namespace>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Caution**: This will delete all actively running workspaces.", "completion": ""}
{"prompt": "Can be done prior to outage windows, or for troubleshooting.", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Support Bundles", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Something is wrong with your Gitpod installation? This guide shows you how you can create a support bundle.", "completion": ""}
{"prompt": "At first, you need to start the installation admin console. In a terminal with configured `kubectl` run the following command (`<namespace>` is the Kubernetes namespace your Gitpod installation has been installed to):", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Open your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation to access the admin console). Enter your password and click on \u201cTroubleshoot\u201d in the top menu. Click \u201cAnalyze Gitpod\u201d to create a support bundle that contains relevant logs and configs.", "completion": ""}
{"prompt": "![kots-troubleshoot](../../static/images/docs/self-hosted/kots-troubleshoot.png)", "completion": ""}
{"prompt": "Creating the support bundle will take some while. Once it is ready, you can inspect the content. Nothing will be shared with us unless you have explicitly chosen to do so.", "completion": ""}
{"prompt": "![kots-troubleshoot](../../static/images/docs/self-hosted/kots-support-bundle-analysis.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Telemetry in Gitpod Self-Hosted", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can preview your usage telemetry, control how much information you share, and enable/disable all usage telemetry on `Settings` tab on the `Admin` dashboard. To anonymize your usage telemetry, uncheck the **Include customer ID in telemetry** option. To fully disable telemetry, uncheck the **Enable usage telemetry** option.", "completion": ""}
{"prompt": "A preview of your usage telemetry is available on the settings page to provide transparency about the data we'd like to collect.", "completion": ""}
{"prompt": "![Enable Service Ping in Admin Settings](../../../static/images/docs/self-hosted/telemetry-setting.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Troubleshooting", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Gitpod provided Config Patches](./config-patches)", "completion": ""}
{"prompt": "- [Prevent workspace starts](/docs/configure/self-hosted/latest/prevent-workspace-starts)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "subsection: operational-guides", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I how to update your gitpod installation?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "At first, you must decide on an [update strategy](#update-strategies), and follow related instructions.", "completion": ""}
{"prompt": "After following instructions for your desired update strategy, you need to start the installation admin console. In a terminal with configured `kubectl` run the following command (`<namespace>` is the Kubernetes namespace your Gitpod installation has been installed to):", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Open\u00a0`http://localhost:8800`\u00a0(port\u00a0`8800`\u00a0is opened on your node on\u00a0`localhost`\u00a0only\u2014you may want to forward the port to your workstation to access the admin console). Enter your password. Click on \u201cCheck for update\u201d.", "completion": ""}
{"prompt": "> **Note:** For air gapped installations, you need to click `Upload a new version` to upload a new version and then deploy it. A new version is made available to you to download via the download portal provided to you by Gitpod.", "completion": ""}
{"prompt": "When an update is available, you will be asked to deploy the new version. You can run preflight checks on the new version and when you press deploy your current running version will be updated.", "completion": ""}
{"prompt": "In most cases, updates should work without further effort - and your existing data is carried over. In some cases (with breaking changes) we will provide instructions on how to upgrade to a specific version in our [Update Guides](../latest/upgrade-guides).", "completion": ""}
{"prompt": "> Gitpod allows you to [apply custom labels, annotations and environment variables to your resources](./advanced/customization). When using this feature, you will need to manually delete resources that have immutable labels on them for updates to take effect. See the [documentation](./advanced/customization#limitations) for full details.", "completion": ""}
{"prompt": "![kots-admin-dashboard](../../static/images/docs/self-hosted/kots-admin-dashboard.png)", "completion": ""}
{"prompt": "Q: How do I update strategies?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Important:** [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) is not highly-available, please [stop workspaces](./stop-workspaces) and [prevent workspace starts](./prevent-workspace-starts) prior to proceeding.", "completion": ""}
{"prompt": "In this strategy, you have scheduled maintenance windows where you take down your entire Gitpod installation, update it, test it, and then make it available again. Ideally, this is done during times of low demand, e.g. outside of work hours.", "completion": ""}
{"prompt": "Q: How do I secondary staging deployment (medium downtime, lower risk, higher cost)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Important:** Please check back soon, we're planning high-availability [reference architecture](../latest/reference-architecture).", "completion": ""}
{"prompt": "The [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) does not support live update. Please choose another update strategy.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: self-hosted/latest", "completion": ""}
{"prompt": "title: Upgrade Guides and Breaking Changes", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > \u26a0\ufe0f **Self-hosted as a product is no longer supported**", "completion": ""}
{"prompt": "> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I security?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - [Single Cluster Reference Architecture](https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch) changes:", "completion": ""}
{"prompt": "- Workspace Services (such as `ws-manager`) are deployed to the services nodepool to prevent potential service degradation from high `ws-daemon` memory use.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > There is no expected impact from these changes if using KOTS. These are documented for transparency purposes only.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I setting the service type of the proxy component?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: We've moved the configuration of the default workspace image and the default base image registry whitelist out of the experimental section of the [config-patch](../latest/config-patches) file. The latter was also renamed. Using them in the experimental section will still work for the time being (until approx. December 2022).", "completion": ""}
{"prompt": "**Before:**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "webApp:", "completion": ""}
{"prompt": "defaultBaseImageRegistryWhitelist:", "completion": ""}
{"prompt": "workspaceDefaults:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**After:**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "workspaceImage: <path to your default workspace image>", "completion": ""}
{"prompt": "privateBaseImageAllowList:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: user-settings", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I access tokens?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Each Access Token either has:", "completion": ""}
{"prompt": "- No Access.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: All Access Tokens have an expiration time. When a token expires, requests made with the token will fail with Unathorized. When a token expires, you can [regenerate](#regenerating-access-tokens) it.", "completion": ""}
{"prompt": "Q: How do I managing access tokens?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can list your Access Tokens in your user Settings, or by going to [gitpod.io/tokens](https://gitpod.io/tokens).", "completion": ""}
{"prompt": "![List Access Tokens](../../../static/images/docs/access-token-list.png)", "completion": ""}
{"prompt": "Q: How do I creating an access token?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Once you create an Access Token, it will be shown to you **once**. Make sure you store it in a secure place, you will not be able to retrieve it again.", "completion": ""}
{"prompt": "Q: How do I updating an access token?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Permission scopes", "completion": ""}
{"prompt": "When you update a token, the token secret remains unaffected and you can continue to use it, until it expires.", "completion": ""}
{"prompt": "Q: How do I regenerating access tokens?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- The new token will have a new expiration time.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Personal Access token can be deleted. Once deleted, the token is no longer valid for interaction with APIs.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: user-settings", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I browser bookmarklet?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "prefixing for you - as simple as that.", "completion": ""}
{"prompt": "1. Drag the following image to your bookmark bar.", "completion": ""}
{"prompt": "![Open in Gitpod](../../../static/images/docs/browser-bookmarklet.png)", "completion": ""}
{"prompt": "2. Select all of the code below and then copy it to your clipboard.", "completion": ""}
{"prompt": "```javascript", "completion": ""}
{"prompt": "\"use strict\";", "completion": ""}
{"prompt": "for (", "completion": ""}
{"prompt": "n < t.length;", "completion": ""}
{"prompt": ") {", "completion": ""}
{"prompt": "if (o.content.toLowerCase().includes(\"gitlab\")) return !0;", "completion": ""}
{"prompt": "if (", "completion": ""}
{"prompt": "o.content.toLowerCase().includes(\"bitbucket\")", "completion": ""}
{"prompt": "return !0;", "completion": ""}
{"prompt": "return !1;", "completion": ""}
{"prompt": "window.open(", "completion": ""}
{"prompt": "\"https://gitpod.io/#\" +", "completion": ""}
{"prompt": "window.location.pathname)", "completion": ""}
{"prompt": "})();", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you are using Gitpod Self-Hosted you can still use the browser bookmarklet by configuring it with your self-hosted URL by replacing the `gitpod.io` URL with your self-hosted URL in the bookmarklet code.", "completion": ""}
{"prompt": "```javascript", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I source code?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Browser Extension", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I browser extension?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "prefixing for you - as simple as that.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "We provide the extension for:", "completion": ""}
{"prompt": "- [Chrome](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) - also works for Edge, Brave and other Chromium-based browsers.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Right-click on the Gitpod extension icon.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you are using custom Gitpod instance (e.g. [dedicated](https://www.gitpod.io/dedicated)) you can still use the browser extension by configuring it with your instance URL", "completion": ""}
{"prompt": "After you have installed the extension go to the options panel and enter your custom Gitpod instance URL.", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Gitpod browser extension configuration\" src=\"/images/docs/beta/integrations/browser-extension-options.png\">", "completion": ""}
{"prompt": "Q: How do I open repositories with <keybind>.</keybind> (dot) keybind?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod's browser extension is open source. You can check out its [source code](https://github.com/gitpod-io/browser-extension), or even open it in Gitpod:", "completion": ""}
{"prompt": "[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/browser-extension)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: user-settings", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I browser settings?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Pop-ups, to preview your dev server in a new tab", "completion": ""}
{"prompt": "Each browser handles this slightly differently:", "completion": ""}
{"prompt": "- [Chrome](#chrome)", "completion": ""}
{"prompt": "- [Brave](#brave)", "completion": ""}
{"prompt": "- [Safari](#safari)", "completion": ""}
{"prompt": "Q: How do I chrome?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Navigate to the Clipboard site permissions at [chrome://settings/content/clipboard](chrome://settings/content/clipboard).", "completion": ""}
{"prompt": "1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".", "completion": ""}
{"prompt": "Q: How do I pop-ups?", "completion": ""}
{"prompt": "1. To the right of the \"Allowed to send pop-ups and use redirects\" heading, click the \"Add\" button.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I clipboard?", "completion": ""}
{"prompt": "1. To the right of the \"Allow\" heading, click the \"Add\" button.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Navigate to the Pop-ups site permissions at [edge://settings/content/popups](edge://settings/content/popups).", "completion": ""}
{"prompt": "1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".", "completion": ""}
{"prompt": "Q: How do I brave?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Navigate to the Clipboard site permissions at [brave://settings/content/clipboard](brave://settings/content/clipboard).", "completion": ""}
{"prompt": "1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".", "completion": ""}
{"prompt": "Q: How do I pop-ups?", "completion": ""}
{"prompt": "1. To the right of the \"Allowed to send pop-ups and use redirects\" heading, click the \"Add\" button.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I clipboard?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Navigate to the Pop-ups site permissions at [about:preferences#privacy](about:preferences#privacy).", "completion": ""}
{"prompt": "1. Paste `gitpod.io` in the _Address of website_ field and click \"Allow\".", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I clipboard?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: \ud83e\udd37\u200d\u2642\ufe0f We can't find a solution to whitelist all Gitpod workspaces. If we missed anything, please do let us know through the feedback widget below \ud83d\ude4f.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: user-settings", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I dotfiles?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod will recognize and run one of the following install scripts from your dotfiles repository.", "completion": ""}
{"prompt": "- install.sh", "completion": ""}
{"prompt": "- bootstrap.sh", "completion": ""}
{"prompt": "- script/bootstrap", "completion": ""}
{"prompt": "- setup", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > You can refer this [demo-dotfiles template](https://github.com/gitpod-io/demo-dotfiles) to bring your dotfiles to Gitpod.", "completion": ""}
{"prompt": "The example below has just one dotfile called `.bash_aliases`. If this file is present in a workspace home directory, it will be found by the '.bashrc' startup script in the Gitpod default image, so no additional install script is required.", "completion": ""}
{"prompt": "**.bash_aliases**", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "echo Here is my .bash_aliases dotfile", "completion": ""}
{"prompt": "alias gitsha='git rev-parse HEAD'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The dotfiles repository installation logs are saved to `/home/gitpod/.dotfiles.log` and can be viewed via", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you want to quickly test out dotfiles inside an existing workspace created from your `dotfiles` repository, you can run the below command snippet in your terminal as a workaround:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This will simulate a fake minimal workspace inside your existing Gitpod workspace using `docker`, where your dotfiles will be installed so you can easily test.", "completion": ""}
{"prompt": "For convenience, you can create a file called `debug.sh` in your dotfiles repository and paste the snippet there. You could then run `bash debug.sh` to use it.", "completion": ""}
{"prompt": "Q: How do I how to install symlinks from dotfiles when using a [custom installation script](#custom-installation-script)??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- In your [custom installation script](#custom-installation-script) (e.g. `install.sh`), use/append the below snippet:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "dotfiles_source=\"${current_dir}/home_files\"", "completion": ""}
{"prompt": "while read -r file; do", "completion": ""}
{"prompt": "relative_file_path=\"${file#\"${dotfiles_source}\"/}\"", "completion": ""}
{"prompt": "target_dir=\"${target_file%/*}\"", "completion": ""}
{"prompt": "if test ! -d \"${target_dir}\"; then", "completion": ""}
{"prompt": "fi", "completion": ""}
{"prompt": "printf 'Installing dotfiles symlink %s\\n' \"${target_file}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I [it it possible to cache the dotfiles installation?](https://discord.com/channels/816244985187008514/1072003259075657849)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "sudo apt install qemu-user-static & disown", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: User settings", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: User settings allow you to customize your own personal Gitpod experience.", "completion": ""}
{"prompt": "- [Browser Extension](/docs/configure/user-settings/browser-extension)", "completion": ""}
{"prompt": "- [Browser Bookmarklet](/docs/configure/user-settings/browser-bookmarklet)", "completion": ""}
{"prompt": "- [SSH](/docs/configure/user-settings/ssh)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: SSH", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Secure Shell Protocol (SSH) is the basis for connecting to your Gitpod workspace when using [VS Code Desktop](/docs/references/ides-and-editors/vscode), [JetBrains Gateway](/docs/integrations/jetbrains-gateway), or accessing via the [command-line](/docs/references/ides-and-editors/command-line) from a local machine.", "completion": ""}
{"prompt": "See [command-line](/docs/references/ides-and-editors/command-line) editors & IDEs documentation for more.", "completion": ""}
{"prompt": "Q: How do I manage your ssh keys?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: How to install a local SSH client depending on your operating system.", "completion": ""}
{"prompt": "| OS                                        | Instructions                                                                                                                     |", "completion": ""}
{"prompt": "| Windows 10 1803+ / Server 2016/2019 1803+ | Install the [Windows OpenSSH Client](https://docs.microsoft.com/windows-server/administration/openssh/openssh_install_firstuse). |", "completion": ""}
{"prompt": "| macOS                                     | Comes pre-installed.                                                                                                             |", "completion": ""}
{"prompt": "| RHEL / Fedora / CentOS                    | Run `sudo yum install openssh-clients`                                                                                           |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Check to see if you already have an SSH key on your **local** machine. The key is typically located at `~/.ssh/id_ed25519.pub` on macOS / Linux, and the `.ssh` directory in your user profile folder on Windows (for example `C:\\Users\\your-user\\.ssh\\id_ed25519.pub`).", "completion": ""}
{"prompt": "If you do not have a key, run the following command in a **local** terminal / PowerShell to generate an SSH key pair:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You will then be prompted to enter a secure passphrase, but you can leave that blank. You should now have a `id_ed25519.pub` file which contains your new public SSH key.", "completion": ""}
{"prompt": "> **Note**: If you are using a legacy system that doesn't support the Ed25519 algorithm, you can use rsa instead: `ssh-keygen -t rsa -b 4096`", "completion": ""}
{"prompt": "> **Tip:** Don't have `ssh-keygen`? Install [a supported SSH client](#installing-a-supported-ssh-client).", "completion": ""}
{"prompt": "Q: How do I ssh file and folder permissions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------------------------------- | --------------------------------- |", "completion": ""}
{"prompt": "| `.ssh/config` in your user folder         | `chmod 600 ~/.ssh/config`         |", "completion": ""}
{"prompt": "| Any other key file                        | `chmod 600 /path/to/key/file`     |", "completion": ""}
{"prompt": "**Windows:**", "completion": ""}
{"prompt": "The specific expected permissions can vary depending on the exact SSH implementation you are using. We recommend using the out of box [Windows 10 OpenSSH Client](https://docs.microsoft.com/windows-server/administration/openssh/openssh_overview).", "completion": ""}
{"prompt": "In this case, make sure that all of the files in the `.ssh` folder for your remote user on the SSH host is owned by you and no other user has permissions to access it. See the [Windows OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH) for details.", "completion": ""}
{"prompt": "For all other clients, consult your client's documentation for what the implementation expects.", "completion": ""}
{"prompt": "Q: How do I upload an ssh key to gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-light-theme.png)", "completion": ""}
{"prompt": "Paste your public key, and give your key a memorable title so that you can remember the name of the public key later if you choose to add multiple keys, e.g. \"Gitpod Bastion Host SSH Key\"", "completion": ""}
{"prompt": "![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod doesn't support editing an SSH key.", "completion": ""}
{"prompt": "To update an SSH key, delete the key and re-upload the SSH key to Gitpod.", "completion": ""}
{"prompt": "Q: How do I delete an ssh key from gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Deleting an SSH key from Gitpod](/images/docs/delete-ssh-key-dark-theme.png)", "completion": ""}
{"prompt": "Q: How do I ssh gateway?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: SSH Gateway is an intermediary service within Gitpod that proxies incoming SSH requests to the appropriate running workspaces.", "completion": ""}
{"prompt": "![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-dark-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you are running a [Self-Hosted](https://www.gitpod.io/self-hosted) Gitpod installation, you will need to ensure that:", "completion": ""}
{"prompt": "1. The installation has the SSH Gateway component configured and deployed", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [VS Code Desktop and SSH explained](/blog/vscode-desktop-ssh-updates#diagnosing--fixing-common-ssh-connection-issues) blog has a bunch of good troubleshooting notes, you may check them out.", "completion": ""}
{"prompt": "Q: How do I unix_listener: path \"/somewhere/xyz\" too long for unix domain socket?", "completion": ""}
{"prompt": "- Append the following to it:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "ControlPath /tmp/%r-gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Now try connecting via SSH or VSCode-Desktop again.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: workspaces", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: There are currently two ways to share a Gitpod workspace, either by creating a [workspace snapshot](#sharing-snapshots), a \"point in time\" capture of a workspace state that can be then opened by another user. Or, by [sharing a running workspace](#sharing-running-workspaces) which shares access to a single running workspace to multiple users.", "completion": ""}
{"prompt": "`youtube: HcKlXfKpolM`", "completion": ""}
{"prompt": "Q: How do I workspace snapshots?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <IdeToggle id=\"ide-toggle-ports\">", "completion": ""}
{"prompt": "<div slot=\"jetbrains\">", "completion": ""}
{"prompt": "To create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the Backend Control Center, or from the JetBrains IDE search. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"vscodedesktop\">", "completion": ""}
{"prompt": "To create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"vscodebrowser\">", "completion": ""}
{"prompt": "To create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"commandline\">", "completion": ""}
{"prompt": "You can run `gp snapshot` from any workspace to generate a snapshot URL.", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</IdeToggle>", "completion": ""}
{"prompt": "Q: How do I sharing running workspaces?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "1. Click the three dots menu to the right of the highlighted workspace.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> it is shared and running.", "completion": ""}
{"prompt": "> Every action involving Git in a shared workspace happens on behalf of the workspace owner's account without further authorization. This includes access to secrets used in a shared workspace.", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With Gitpod you can also use the following third-party integrations for real-time collaboration:", "completion": ""}
{"prompt": "- [Code Together](https://www.codetogether.com/) - Works on VS Code Desktop, VS Code Browser, and via JetBrains or Eclipse.", "completion": ""}
{"prompt": "- [Duckly](https://duckly.com/) - Works on VS Code Desktop and VS Code Browser.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: workspaces", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I workspaces?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Workspace Image](/docs/configure/workspaces/workspace-image)", "completion": ""}
{"prompt": "- [Ports](/docs/configure/workspaces/ports)", "completion": ""}
{"prompt": "- [Multi-repo](/docs/configure/workspaces/multi-repo)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Multi-repo", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).", "completion": ""}
{"prompt": "If your software project is comprised of multiple source control repositories it is possible to configure Gitpod to clone these additional repositories through the configuration keys of `additionalRepositories` and `mainConfiguration` in the [.gitpod.yml](/docs/references/gitpod-yml) file which removes the need to run multiple workspaces, and makes it easier to configure services which need to be aware of each other.", "completion": ""}
{"prompt": "Q: How do I cloning additional repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: additionalRepositories:", "completion": ""}
{"prompt": "# checkoutLocation is relative to /workspaces", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "When the above configuration is defined then the following additional steps happen when Gitpod workspace is started:", "completion": ""}
{"prompt": "1. If you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn\u2019t exist Gitpod checks out the default branch.", "completion": ""}
{"prompt": "1. The contents of `https://github.com/gitpod-io/demo-multi-repo-backend` is cloned to `/workspaces/backend`", "completion": ""}
{"prompt": "After all of the source control repositories have been cloned then the `before`, `init` and `command` [tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) are executed as per normal. If you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory the `checkoutLocation` location using the `before` task.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "Q: How do I example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend?", "completion": ""}
{"prompt": "- url: https://github.com/gitpod-io/demo-multi-repo-backend", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- name: backend", "completion": ""}
{"prompt": "# which is configured above as `/workspaces/backend`", "completion": ""}
{"prompt": "cd ../backend", "completion": ""}
{"prompt": "echo npm install", "completion": ""}
{"prompt": "echo npm run dev", "completion": ""}
{"prompt": "# changing of working directory is not required as these tasks will", "completion": ""}
{"prompt": "- name: frontend", "completion": ""}
{"prompt": "echo npm install", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Try it out at https://github.com/gitpod-io/demo-multi-repo-frontend", "completion": ""}
{"prompt": "Q: How do I delegating configuration?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: mainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontend", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![VSCode workspace folders](.../../../static/images/docs/vscode-workspace-folders.png)", "completion": ""}
{"prompt": "You might want to see the [`additionalRepositories`](#cloning-additional-repositories) on your VSCode.", "completion": ""}
{"prompt": "To do so:", "completion": ""}
{"prompt": "2. Now you can define the folder paths:", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "// The additional repos are cloned inside /workspace dir", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "\"path\": \"../backend\" // Additional repo", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I [single repo but instances of multiple branches](https://discord.com/channels/816244985187008514/1063202039955476540)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "before: |", "completion": ""}
{"prompt": "main_repo_dir=\"${GITPOD_REPO_ROOT}\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "extra_clone_branches=(", "completion": ""}
{"prompt": "docs", "completion": ""}
{"prompt": ")", "completion": ""}
{"prompt": "for reference in \"${extra_clone_branches[@]}\"; do {", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "printf 'INFO: %s\\n' \"Duplicating ${primary_repo_name} to ${dir} with ${reference} branch\"", "completion": ""}
{"prompt": "git -C \"${dir}\" checkout \"${reference}\" 2>&1 | grep -v \"Switched to branch '${reference}'\"", "completion": ""}
{"prompt": "} done", "completion": ""}
{"prompt": "# Send signal to awaiting task(s)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "gp sync-await multi_branch", "completion": ""}
{"prompt": "echo hello", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "And to have such a feature built-in, please react with a \" \ud83d\udc4d \" on this issue: https://github.com/gitpod-io/gitpod/issues/15608", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: workspaces", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I ports?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: By default, when a port is opening in a Gitpod workspace, Gitpod will:", "completion": ""}
{"prompt": "1. **Direct HTTP traffic** - When an application starts listening to an HTTP port, Gitpod detects the port and exposes it on a URL that requires authentication. Setting the port to \"public\" would make the port URL accessible to anyone on the internet (or the installed network if using self-hosted Gitpod).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in VS Code Browser\" src=\"/images/editors/port-notification-vscode.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Setting a port public/private in a JetBrains IDE</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can access the dedicated port URL by pre-pending the port number to the workspace URL.", "completion": ""}
{"prompt": "e.g `3000-yourworkspace.ws-eu45.gitpod.io`", "completion": ""}
{"prompt": "You can also print the port URL using the [gp url](/docs/references/gitpod-cli) command (e.g. `gp url 3000`).", "completion": ""}
{"prompt": "And if you prefer listing all open ports URLs at once, use [gp ports list](/docs/references/gitpod-cli) command.", "completion": ""}
{"prompt": "Q: How do I configuring port behaviors?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The port open event is triggered when a new port is detected as open within the workspace.", "completion": ""}
{"prompt": "Port opening behavior can only be set via the [`.gitpod.yml`](/docs/references/gitpod-yml)", "completion": ""}
{"prompt": "The property `onOpen` configures port opening behaviors:", "completion": ""}
{"prompt": "- `notify` (default) - Show a notification for newly detected ports.", "completion": ""}
{"prompt": "- `open-browser` - Open the port URL in a browser tab.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "ports:", "completion": ""}
{"prompt": "description: The main application web server", "completion": ""}
{"prompt": "onOpen: open-browser", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can give ports a `name` and a `description` (both optional). These properties will help you to add context about what the port is being used for.", "completion": ""}
{"prompt": "<IdeToggle id=\"ide-toggle-ports\">", "completion": ""}
{"prompt": "<div slot=\"vscodebrowser\">", "completion": ""}
{"prompt": "Every exposed port's information and its corresponding actions can be found in the <Action>PORTS</Action> tab inside of VS Code Browser.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>The <Action>PORTS</Action> tab in VS Code Browser with a single port's actions</figcaption>", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"vscodedesktop\">", "completion": ""}
{"prompt": "Every exposed port's information and its corresponding actions can be found in the <Action>EXPOSED PORTS</Action> tab inside of VS Code Desktop.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>The <Action>EXPOSED PORTS</Action> view in VS Code Desktop with a single port's actions</figcaption>", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"jetbrains\">", "completion": ""}
{"prompt": "You can execute <a href=\"/docs/references/gitpod-cli#list-1\"><code>gp ports list</code></a> in the terminal to output a table-formatted list of ports along with their status, URL, name and description.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Display ports info with the Gitpod CLI</figcaption>", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"commandline\">", "completion": ""}
{"prompt": "You can execute <a href=\"/docs/references/gitpod-cli#list-1\"><code>gp ports list</code></a> to output a table-formatted list of ports along with their status, URL, name and description.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Display ports info with the Gitpod CLI</figcaption>", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</IdeToggle>", "completion": ""}
{"prompt": "The property `visibility` configures who can access a port:", "completion": ""}
{"prompt": "- `private` (default) - Only allow users with workspace access to access the port.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Port visibility can be set in [`.gitpod.yml`](/docs/references/gitpod-yml), changed via the [Gitpod CLI](/docs/references/gitpod-cli), or manually changed within the IDE or editor.", "completion": ""}
{"prompt": "<IdeToggle id=\"ide-toggle-ports\">", "completion": ""}
{"prompt": "<div slot=\"jetbrains\">", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"vscodebrowser\">", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in VS Code Browser\" src=\"/images/editors/toggle-port-visibility-vscode.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<p>Using the <a href=\"/docs/references/gitpod-cli#visibility\">Gitpod CLI with ports visibility</a> in the terminal.</p>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: All port configurations can be applied to ranges as well as single ports.", "completion": ""}
{"prompt": "**Example:** Prevent notifications for ports between 3000 and 8999.", "completion": ""}
{"prompt": "Ports won't be shown in VS Code's <Action>PORTS</Action> view or in the [Gitpod CLI](/docs/references/gitpod-cli) until they are opened.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- port: 3000-8999", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I ports ordering?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: There are two types of port forwarding: local and remote.", "completion": ""}
{"prompt": "Local port forwarding allows you to forward a port running in your Gitpod workspace to access via your localhost hostname. Remote port forwarding exposes a locally running process to use in your workspace. Remote port forwarding is not currently supported.", "completion": ""}
{"prompt": "Q: How do I local port forwarding?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<p>To forward a port in JetBrains, navigate to the preferences page in the <a href=\"/docs/integrations/jetbrains-gateway\">JetBrains Gateway</a> client to select the port and protocol to be forwarded.</p>", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in a JetBrains IDE\" src=\"/images/jetbrains-gateway/port-forward-jetbrains.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<p>Using the <a href=\"/docs/references/ides-and-editors/local-companion\">Local Companion</a>, you can automatically forward all ports from your workspace to localhost. Setting up port forwarding for VS Code Browser allows you to use a project already configured with <code>localhost</code> without requiring any code changes.</p>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<p>With VS Code Desktop, all ports are automatically forwarded, allowing you to access any forwarded ports on your localhost address. You can also manually forward a port using the ports view.</p>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Port forwarding in VS Code Desktop</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Using [SSH command-line](/docs/references/ides-and-editors/command-line) access to your workspace, ports can also be forwarded manually using tools such as the OpenSSH remote login client.", "completion": ""}
{"prompt": "**Example:** Forwarding port `3000` to `localhost:3000`", "completion": ""}
{"prompt": "`ssh -L 3000:localhost:3000 <workspace-ssh-connection>`", "completion": ""}
{"prompt": "Q: How do I cross-origin resource sharing (cors)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Tasks", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!--", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "To get the most out of ephemeral developer environments, it is important to let Gitpod know how to build your project. We can achieve this by defining `tasks` in the [`.gitpod.yml`](/docs/references/gitpod-yml) configuration file.", "completion": ""}
{"prompt": "> **Note**: In your local developer environment, you likely set up your project only once. If you work in a team, you probably have written instructions on how to get started. With Gitpod, you automate these manual steps so that a new environment can be set up repeatedly by Gitpod.", "completion": ""}
{"prompt": "Tasks are shell scripts that run on top of the Docker image you configure (learn more about [custom Docker images](/docs/configure/workspaces/workspace-image)).", "completion": ""}
{"prompt": "`youtube: E95oV_iqUtI`", "completion": ""}
{"prompt": "Q: How do I execution order?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `init`: Use this for heavy-lifting tasks such as downloading dependencies or compiling source code.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> - User specific environment variables are not loaded automatically for `init` and `before` tasks but can be loaded if you want. [Learn more](/docs/configure/projects/prebuilds#user-specific-environment-variables-in-prebuilds)", "completion": ""}
{"prompt": "Q: How do I prebuild and new workspaces?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Start tasks for Prebuilds & New Workspace](../../../static/images/docs/beta/configure/start-tasks/prebuilds-new-workspace-dark-theme.png)", "completion": ""}
{"prompt": "The `init` task is where you want to do the heavy lifting, things like:", "completion": ""}
{"prompt": "- Download & install dependencies", "completion": ""}
{"prompt": "- Run your test suite", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When you restart a workspace, Gitpod already executed the `init` task ([see above](#prebuild-and-new-workspaces)) either as part of a Prebuild or when you started the workspace for the first time.", "completion": ""}
{"prompt": "As part of a workspace restart, Gitpod executes the `before` and `command` tasks:", "completion": ""}
{"prompt": "![Restart a workspace](../../../static/images/docs/beta/configure/start-tasks/restart-workspace-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When you start a snapshot, Gitpod already executed the `init` task ([see above](#prebuild-and-new-workspaces)) either as part of a Prebuild or when you or a team member started the snapshot's initial workspace for the first time.", "completion": ""}
{"prompt": "As part of starting a snapshot, Gitpod executes the `before` and `command` tasks:", "completion": ""}
{"prompt": "![Start a snapshot](../../../static/images/docs/beta/configure/start-tasks/start-snapshot-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can configure where terminals open using the `openMode` properties below.", "completion": ""}
{"prompt": "Snapshots will first try to reuse existing terminals in the layout, before opening new ones.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- name: Static Server", "completion": ""}
{"prompt": "- name: DB Server", "completion": ""}
{"prompt": "openMode: split-right", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can configure how the terminal should be opened relative to the previous task.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| openMode                 | Description                                                |", "completion": ""}
{"prompt": "| `openMode: tab-after`    | Opens in the same tab group right after the previous tab   |", "completion": ""}
{"prompt": "| `openMode: split-right`  | Splits and adds the terminal to the right                  |", "completion": ""}
{"prompt": "| `openMode: split-top`    | **Deprecated**. Splits and adds the terminal to the top    |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The examples below are common use cases you can get inspired by and adjust for your project's needs.", "completion": ""}
{"prompt": "> **Note**: `before` and `init` tasks need to terminate while `command` can run indefinitely (i.e. until cancelled with Ctrl + C). This is because `before` and `init` may run as part of a prebuild and if these tasks do not terminate, the prebuild will eventually fail with a timeout.", "completion": ""}
{"prompt": "Q: How do I one-line tasks?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "init: npm install", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I multi-line tasks?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "init: |", "completion": ""}
{"prompt": "npm run configure-database", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> **Note**: This doesn't stop execution on errors. If `npm install` in the example above fails, the `npm run configure-database` will still run. See [how to exit after failure](#immediately-exit-for-any-command-failure-within-a-task) below for a workaround.", "completion": ""}
{"prompt": "Q: How do I wait for commands to complete?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "init: >", "completion": ""}
{"prompt": "yarn install --check-files &&", "completion": ""}
{"prompt": "gp sync-done bundle # 'bundle' is an arbitrary name", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "init: gp sync-await bundle # wait for the above 'init' to finish", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "init: gp sync-await bundle", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "init: gp sync-await bundle", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I wait for a port to be available?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "init: npm install", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "npm run test", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you wish to halt an entire task with for an error within the task script, then you could do the following:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: |", "completion": ""}
{"prompt": "set -e # Tells bash to immediately exit on failure off a command", "completion": ""}
{"prompt": "yarn install --frozen-lockfile", "completion": ""}
{"prompt": "bundle exec nanoc compile", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Gitpod starts all your `tasks` inside separate `bash` (`$SHELL`) shells. Gitpod can only assert the exit status of the shell process of a task. Normally `bash` or other shells don't halt on a failure of a command unless you explicitly ask it to. `bash` only inherits the last exit status of a script run with it before it's own `exit`. Hence Gitpod can't determine if all of your commands inside the `init` task succeeded. To have that effect, you can put `set -e;` on top of task shell-commands and wrap your whole task-script with `()` to configure that particular task shell to halt and immediately exit with an error code for a failure of any command. This can be specially helpful for prebuilds (i.e `init` tasks)", "completion": ""}
{"prompt": "Q: How do I missing examples??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Workspace classes", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Workspace classes allow you to select the resources available to your workspaces.", "completion": ""}
{"prompt": "On gitpod.io, the options are:", "completion": ""}
{"prompt": "- **Standard**: up to 4 cores, up to 8GB RAM, 30GB storage", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can select workspace class directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url) and [Editor](/docs/references/ides-and-editors).", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Open New Gitpod Workspace with required workspace class \u2022 <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Large workspace classes use [credits](/docs/configure/billing#credits) at a faster rate. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I [how to select large workspace type for extended storage and cpu](https://discord.com/channels/816244985187008514/1061902096389111849)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->", "completion": ""}
{"prompt": "It is not quite feasible to build an entire AOSP tree right now due to current storage capacity limitations. Please react with a \"\ud83d\udc4d\" on https://github.com/gitpod-io/gitpod/issues/13950 and comment your requirements.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: workspaces", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I workspace image?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can define a public Docker image in your `.gitpod.yml` file with the following configuration:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "The official Gitpod Docker images are hosted on <a href=\"https://hub.docker.com/u/gitpod/\" target=\"_blank\">Docker Hub</a>.", "completion": ""}
{"prompt": "You can find the source code for these images in <a href=\"https://github.com/gitpod-io/workspace-images/\" target=\"_blank\">this GitHub repository</a>.", "completion": ""}
{"prompt": "Q: How do I docker image tags?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This is currently in [Alpha](/docs/help/public-roadmap/release-cycle).", "completion": ""}
{"prompt": "You may also use private Docker images.", "completion": ""}
{"prompt": "To do so you must provide the registry authentication details to Gitpod by setting `GITPOD_IMAGE_AUTH` with the following value `<registry-domain>:<base64-encoded 'username:password'>` as a [Project-level environment variable](/docs/configure/projects/environment-variables#project-specific-environment-variables).", "completion": ""}
{"prompt": "For example, if the registry is `docker.io`, the username is `foo` and the password is `bar`, the `GITPOD_IMAGE_AUTH` environment variable value may be calculated using the command `echo -n \"docker.io:\"; echo -n \"foo:bar\" | base64 -w0` which outputs `docker.io:Zm9vOmJhcg==`.", "completion": ""}
{"prompt": "Q: How do I use a custom dockerfile?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Next, create a `.gitpod.Dockerfile` file at the root of your project. The syntax is the regular `Dockerfile` syntax as <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\">documented on docs.docker.com</a>.", "completion": ""}
{"prompt": "A good starting point for creating a custom `.gitpod.Dockerfile` is the", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: FROM gitpod/workspace-full:2022-05-08-14-31-53", "completion": ""}
{"prompt": "Q: How do I install custom tools, runtime, etc.?", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> \u26a0\ufe0f **Caveat:** > `COPY` instructions in a Dockerfile is only evaluated once and then cached.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: FROM gitpod/workspace-base:2022-05-08-14-31-53", "completion": ""}
{"prompt": "Q: How do I install custom tools, runtime, etc.?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.?", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "When you launch a Gitpod workspace, the local console will use the `gitpod` user, so all local settings, config file, etc. should apply to `/home/gitpod` or be run using `USER gitpod` (we no longer recommend using `USER root`).", "completion": ""}
{"prompt": "You can however use `sudo` in your Dockerfile. The following example shows a typical `.gitpod.Dockerfile` inheriting from `gitpod/workspace-full`:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "Q: How do I you can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.?", "completion": ""}
{"prompt": "binwalk \\", "completion": ""}
{"prompt": "tmux", "completion": ""}
{"prompt": "Q: How do I apply user-specific settings?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: While it is recommended to extend one of the <a href=\"https://hub.docker.com/u/gitpod/\" target=\"_blank\">Gitpod-provided base images</a> for custom Dockerfiles to ensure the image has the required dependencies for a workspace, it is possible to configure a Dockerfile with a public (Debian/Ubuntu-based) image as its base.", "completion": ""}
{"prompt": "There are some requirements though for a public base image to work properly as a workspace. See the below Dockerfile as a reference. For instance, you'll need to set up the `gitpod` user with the right UID, and install `git` to enable your configured dotfiles for the workspace.", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I - git (and git-lfs), for git operations (to e.g. push your work).?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I - sudo, while not required, is recommended to be installed, since the?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I   and use `sudo` to install any other tools in a live workspace.?", "completion": ""}
{"prompt": "git \\", "completion": ""}
{"prompt": "sudo \\", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: RUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod", "completion": ""}
{"prompt": "USER gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I in the existing workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp rebuild", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once you validated the `.gitpod.Dockerfile` with the approach described in the previous chapter, it is time to start a new Gitpod workspace based on that custom image.", "completion": ""}
{"prompt": "The easiest way to try out your changes is as follows:", "completion": ""}
{"prompt": "1. Create a new branch.", "completion": ""}
{"prompt": "1. Open a pull / merge request and open it in your browser.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Sometimes you find yourself in situations where you want to manually rebuild a workspace image, for example if packages you rely on released a security fix.", "completion": ""}
{"prompt": "You can trigger a workspace image rebuild with the following URL pattern: `https://gitpod.io/#imagebuild/<your-repo-url>`.", "completion": ""}
{"prompt": "Q: How do I configure a custom shell?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "ENV SHELL=/usr/bin/zsh", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Currently we put some startup scripts for the workspace-images at `~/.bashrc.d`, that means if you change your SHELL from `bash` to something else, they will not auto run. You could run the following command from your SHELL to workaround:", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->", "completion": ""}
{"prompt": "This usually happens when you don't pin the image tag (AKA version) inside your [custom dockerfile](#use-a-custom-dockerfile).", "completion": ""}
{"prompt": "In such casues, it could be that there has been long gaps between the time you reuse a workspace or create a new one. We usually release new images every week so if there was more than one week between each start then the image will be rebuild every time.", "completion": ""}
{"prompt": "So, for example, if your `.gitpod.Dockerfile` looks like the following:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ```", "completion": ""}
{"prompt": "You could grab a timestamped tag from [here](https://hub.docker.com/r/gitpod/workspace-full/tags) for `gitpod/workspace-full`.", "completion": ""}
{"prompt": "And then your `.gitpod.Dockerfile` could look like:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ```", "completion": ""}
{"prompt": "Note: Please grab a recent tag from the linked page, don't copy paste the example from here.", "completion": ""}
{"prompt": "Also see [docker-image-tags](#docker-image-tags) for more info.", "completion": ""}
{"prompt": "Q: How do I [how to run a desktop app for gui development inside a gitpod workspace](https://discord.com/channels/816244985187008514/1069538137572909106)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- No display server running", "completion": ""}
{"prompt": "- `xdg-open` command not found", "completion": ""}
{"prompt": "Then you need to use the `gitpod/workspace-full-vnc` docker image. See [this page](https://github.com/gitpod-io/workspace-images/blob/axonasif/add_docs/chunks/tool-vnc/README.md#details) for more info.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: workspaces", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I workspace lifecycle?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The state of the workspace is indicated by the color of the workspace indicator. For example, in the Gitpod [dashboard](https://gitpod.io/workspaces), workspace state is shown on the workspace list.", "completion": ""}
{"prompt": "1. \ud83d\udfe0 **Starting** - Workspace provisioning, inaccessible to the user.", "completion": ""}
{"prompt": "3. \ud83d\udfe0 **Stopping** - Workspace being stopped, backups performing.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When you open a workspace, it will be in the \"starting\" state. This means that the workspace is being created and the initialization process is running.", "completion": ""}
{"prompt": "- Where a workspace is being provisioned and initialized.", "completion": ""}
{"prompt": "- Otherwise, source control is downloaded into the workspace.", "completion": ""}
{"prompt": "Q: How do I workspace running?", "completion": ""}
{"prompt": "- The workspace can be accessed by the user.", "completion": ""}
{"prompt": "Q: How do I workspace stopped?", "completion": ""}
{"prompt": "- Only files and directories inside `/workspace` are preserved.", "completion": ""}
{"prompt": "- A start is required before the workspace can be used.", "completion": ""}
{"prompt": "Q: How do I workspace deleted?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I workspace pinning?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can create a snapshot of a workspace to save its state. This is useful if you want to keep a workspace around for a longer period of time, than the default. Read more about [Snapshots](/docs/configure/workspaces/collaboration).", "completion": ""}
{"prompt": "Q: How do I workspace deletion?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Running workspaces will stop automatically after a period of inactivity.", "completion": ""}
{"prompt": "Q: How do I workspace inactivity?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Currently, all timeouts are dependent on an active editor connection. Closing your Gitpod connected editor or IDE will reduce the workspace timeout to 5 minutes.", "completion": ""}
{"prompt": "Q: How do I extending timeouts?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Contribute Content", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Creating content (blog posts, YouTube and TikTok videos, presentations and demos) that shares tips+tricks and your experiences with Gitpod is amongst one of the most impactful ways you can help contribute. Everyone at Gitpod including our founders, engineers and product managers loves [reading](https://ghuntley.com/anywhere/) and [watching](https://www.youtube.com/watch?v=XLOwNev0TM0&t=18s) content created by people in our community.", "completion": ""}
{"prompt": "Gitpod maintains an invitational showcase of community contributed guides which are used to highlight content that is hosted elsewhere. Please do not raise pull-requests to the website that adds guides or blog posts without prior discussion and consent.", "completion": ""}
{"prompt": "Instead follow the IndieWeb guidelines of [POSSE](https://indieweb.org/POSSE) when authoring content by posting first on your own site/channel. By posting content first on your own site/channel then a direct feedback cycle forms between you and your readership through ownership of your content that helps you to improve your content.", "completion": ""}
{"prompt": "After the content has been published please:", "completion": ""}
{"prompt": "1. Send a tweet that mentions the [@Gitpod](http://twitter.com/gitpod) Twitter account which will broadcast the content internally within the company.", "completion": ""}
{"prompt": "1. Add a link to the content at https://github.com/shaal/awesome-gitpod", "completion": ""}
{"prompt": "Thanks \ud83e\udde1", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: help/contribute", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I contribute documentation?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Submitting documentation updates via the \"Edit on Gitpod button\" (top right on every page) when you learn something that you think other developers would also benefit from.", "completion": ""}
{"prompt": "We \ud83e\udde1 the people who are involved in this project, and we\u2019d love to help you with onboarding. Drop by the `#contributing` channel on the [Gitpod Discord server](https://www.gitpod.io/chat) and _ask for help_.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: help/contribute", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I code style?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: We typically follow the [Uber Go Style Guide](https://github.com/uber-go/guide/blob/master/style.md) as our north star as the guide is comprehensive but not overburdening, easy to read and pretty good. Here's how our codebase differs:", "completion": ""}
{"prompt": "- Gitpod uses `xerrors` for error wrapping instead of `pkg/errors`", "completion": ""}
{"prompt": "Q: How do I typescript?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Commit Message Convention", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: We do not yet have an established convention but one is [currently being discussed](https://www.notion.so/gitpod/Commit-Message-Convention-f1dac0d4dba6405c9086077c0fd65814).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: help/contribute", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I contribute features & patches?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Commit message convention](features-and-patches/commit-message-convention)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Submitting a pull request", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Before you submit your pull request, please:", "completion": ""}
{"prompt": "- If you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "git checkout -b my-fix-branch main", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Create your patch, **including appropriate test cases and documentation**.", "completion": ""}
{"prompt": "- Commit your changes using a descriptive commit message that follows our [commit message conventions](commit-message-convention).", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.", "completion": ""}
{"prompt": "- Build your changes locally to ensure all the tests pass.", "completion": ""}
{"prompt": "- Push your branch to GitHub:", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "In GitHub, send a pull request to `gitpod-io:main`.", "completion": ""}
{"prompt": "If we suggest changes, then:", "completion": ""}
{"prompt": "- Make the required updates.", "completion": ""}
{"prompt": "- Commit your changes to your branch (e.g. `my-fix-branch`).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Before you submit your pull request, please:", "completion": ""}
{"prompt": "- If you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Re-run the test suite to ensure tests are still passing.", "completion": ""}
{"prompt": "- Push the changes to your GitHub repository (this will update your Pull Request).", "completion": ""}
{"prompt": "That's it! Thank you for your contribution!", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: help/contribute", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I contribute?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Participating in the Gitpod Discord community](https://www.gitpod.io/chat).", "completion": ""}
{"prompt": "- [Creating content that shares your experiences with Gitpod](contribute/content)", "completion": ""}
{"prompt": "- [Submitting documentation updates when you learn something that you think other developers would also benefit from](contribute/documentation).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Help", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - [Building Gitpod](/docs/help/public-roadmap/release-cycle)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Public roadmap", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The most up-to-date Gitpod roadmap can be found at www.gitpod.io/roadmap.", "completion": ""}
{"prompt": "To provide feedback or ask for feature requests, please [open an issue](https://github.com/gitpod-io/gitpod/issues/new/choose) in the Gitpod repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: public-roadmap", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I release cycle?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Early Access** - Available by invitation to gather user feedback -- changes likely.", "completion": ""}
{"prompt": "3. **Beta** - Feature and published APIs are relatively stable.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Troubleshooting", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: These logs contain information about the workspace, the session, and the Visual Studio Code environment. They are useful for diagnosing connection issues and other unexpected behavior.", "completion": ""}
{"prompt": "- Open the Visual Studio Code Command Palette (<Keybind>CtrlCmd + Shift + P</Keybind>) and type **Export logs**, select **Gitpod: Export all logs** from the list to download a zip file containing all of the logs.", "completion": ""}
{"prompt": "**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to troubleshooting@gitpod.io along with a link to a corresponding GitHub issue if needed.", "completion": ""}
{"prompt": "Q: How do I gitpod logs in jetbrains gateway?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: These logs contain information about the workspace, the session, and the JetBrains IDE. They are useful for diagnosing connection issues, issues from IDE Plugins, and any unexpected behavior from the client and the server.", "completion": ""}
{"prompt": "- Open the **Help** menu and select **Collect Host and Client logs** option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has been saved.", "completion": ""}
{"prompt": "**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to troubleshooting@gitpod.io along with a link to a corresponding GitHub issue if needed.", "completion": ""}
{"prompt": "**Note:** Ensure you are using the latest version of both [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway) and [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway), as issues from older versions might have already been fixed.", "completion": ""}
{"prompt": "Q: How do I why doesn't the \"clearurls\" browser extension work with gitpod??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- The bottom left Gitpod button is missing", "completion": ""}
{"prompt": "- Settings Sync does not work", "completion": ""}
{"prompt": "This issue can be resolved by disabling \"ETag filtering\" in ClearURLs\u2019 settings. An [issue has been created](https://gitlab.com/KevinRoebert/ClearUrls/-/issues/977) that requests to whitelist Gitpod by default and we would appreciate your upvotes on the issue.", "completion": ""}
{"prompt": "Q: How do I what should i do if jetbrains gateway and gitpod aren't working??", "completion": ""}
{"prompt": "2. Ensure you are using the latest version of the [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway)", "completion": ""}
{"prompt": "Q: How do I what can i do if i have unsynced data inside a workspace but it's not starting??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Find your workspace from the list", "completion": ""}
{"prompt": "![Download a workspace](../../../static/images/docs/troubleshooting/download_a_workspace.png)", "completion": ""}
{"prompt": "5. The downloaded workspace is a `tar` file which can be extracted with `tar -xf <your-workspace-filename-here>` command on a new Gitpod workspace or in your Linux/MacOS machine. You can use `7-zip` to extract if you're on windows and don't have `tar`.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: integrations", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I integrations?", "completion": ""}
{"prompt": "- [JetBrains Gateway](/docs/integrations/jetbrains-gateway)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: integrations", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I jetbrains gateway?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. View and open your 20 latest Gitpod workspaces", "completion": ""}
{"prompt": "All without leaving needing to leave your desktop.", "completion": ""}
{"prompt": "Q: How do I jetbrains ide support?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [GoLand](/docs/references/ides-and-editors/goland)", "completion": ""}
{"prompt": "- [PyCharm](/docs/references/ides-and-editors/pycharm)", "completion": ""}
{"prompt": "- [WebStorm](/docs/references/ides-and-editors/webstorm)", "completion": ""}
{"prompt": "- [CLion](/docs/references/ides-and-editors/clion)", "completion": ""}
{"prompt": "Q: How do I getting started?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.", "completion": ""}
{"prompt": "4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open your preferred JetBrains IDE for that workspace.", "completion": ""}
{"prompt": "Q: How do I how does jetbrains and gitpod work??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To start a workspace using JetBrains from your browser, you need to first set your preferred JetBrains IDE as your user preference.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Updating Gitpod IDE preferences to a JetBrains IDE</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When starting a new workspace from Gitpod in the browser (with a JetBrains IDE set as your preference) you will see a prompt to open JetBrains Gateway. Clicking the prompt will immediately launch JetBrains Gateway and begin downloading the IDE thin client. The downloaded thin client will exactly match the IDE running in your Gitpod workspace.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening JetBrains Gateway from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Since Gitpod and JetBrains works via JetBrains Gateway, you do not need to download a JetBrains IDE. Also, **you do not need to alter your plugin settings in your JetBrains IDE**. All setup and configuration for Gitpod and JetBrains is completed within JetBrains Gateway.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can also start, and connect to Gitpod workspaces directly from JetBrains Gateway. Click Gitpod in the left-hand side of JetBrains Gateway, and paste a source control context URL directly to start a new workspace, or click connect on a running or stopped workspace.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: By default the JetBrains Gateway Gitpod plugin points to `gitpod.io` as the default host for listing, opening and managing Gitpod workspaces.", "completion": ""}
{"prompt": "If you're using Gitpod [Self-Hosted](/docs/configure/self-hosted/latest), to update the host:", "completion": ""}
{"prompt": "1. Open JetBrains Gateway", "completion": ""}
{"prompt": "3. Search for \"Gitpod\" (or find it under \"tools\")", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting the Gitpod host in the JetBrains Gateway plugin\" src=\"/images/jetbrains-gateway/jetbrains-gateway-host.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I configuring jetbrains gateway networking?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. **JetBrains Gateway** - The JetBrains Gateway client is the component which fetches information about Gitpod workspaces, pulled from the Gitpod API via HTTPS.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![JetBrains networking setup](/images/editors/jetbrains-architecture-light-theme.png)", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Tailscale", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With Tailscale you can automatically and securely connect your Gitpod workspace to other development resources, whether in the cloud or on prem, such as a production database behind your company\u2019s firewall. You can also spin up several Gitpod workspaces that can talk to each other.", "completion": ""}
{"prompt": "[Tailscale](https://tailscale.com/) is built on top of the point-to-point open-source [WireGuard](https://www.wireguard.com/) protocol which powers an encrypted mesh network or `tailnet`. At Gitpod we are big fans of their product and recently announced an [official partnership](/blog/tailscale) with them.", "completion": ""}
{"prompt": "Q: How do I integration?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "USER root", "completion": ""}
{"prompt": "Q: How do I install jq (if not done already). required for the .gitpod.yml tasks below.?", "completion": ""}
{"prompt": "&& curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | sudo tee /etc/apt/sources.list.d/tailscale.list \\", "completion": ""}
{"prompt": "&& apt-get install -y tailscale jq \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "2. Start `tailscale` on workspace start and maintain the machine state across workspaces by adding the following tasks to your `.gitpod.yml`.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- name: tailscaled", "completion": ""}
{"prompt": "if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then", "completion": ""}
{"prompt": "sudo mkdir -p /var/lib/tailscale", "completion": ""}
{"prompt": "fi", "completion": ""}
{"prompt": "- name: tailscale", "completion": ""}
{"prompt": "if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then", "completion": ""}
{"prompt": "else", "completion": ""}
{"prompt": "# store the tailscale state into gitpod user", "completion": ""}
{"prompt": "fi", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Getting started", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import OpenGraph from \"$lib/components/open-graph.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "data={{", "completion": ""}
{"prompt": "\"Learn how to start your first workspace, set up a gitpod.yml configuration file and enable Prebuilds. Get started for free.\",", "completion": ""}
{"prompt": "keywords: \"get started, fast, free\",", "completion": ""}
{"prompt": "/>", "completion": ""}
{"prompt": "Q: How do I getting started?", "completion": ""}
{"prompt": "`youtube: ij1msCffQZA`", "completion": ""}
{"prompt": "Q: How do I start your first workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. In the browser's address bar, prefix the entire URL with `gitpod.io/#` and press Enter.", "completion": ""}
{"prompt": "- We recommend you [install the Gitpod browser extension](/docs/configure/user-settings/browser-extension) to make this a one-click operation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can add the following button to your Development/Setup Docs so that users can launch projects in Gitpod and begin working on them without having to go through the entire setup process.", "completion": ""}
{"prompt": "<img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Open with Gitpod\"/>", "completion": ""}
{"prompt": "```markdown", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> here, `your-repository-url` can be something like: `https://github.com/gitpod-samples/awesome-gitpod` or any of your Repository URLs.", "completion": ""}
{"prompt": "Q: How do I contribute with gitpod badge?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<a href=\"https://gitpod.io/#<your-repository-url>\">", "completion": ""}
{"prompt": "src=\"https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod\"", "completion": ""}
{"prompt": "/>", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Next, let's help Gitpod understand your repository to automate the developer environment and turn on prebuilds to supercharge your development workflow.", "completion": ""}
{"prompt": "Q: How do I help gitpod understand your repository?", "completion": ""}
{"prompt": "To develop, you still would have to install dependencies, run build scripts and start the development server every time you start a workspace... We can do better, so let's automate that!", "completion": ""}
{"prompt": "1. In the workspace terminal, make sure you are in your project's root directory (`pwd` should be `/workspace/<repo>`).", "completion": ""}
{"prompt": "1. Open the newly created `.gitpod.yml` file.", "completion": ""}
{"prompt": "Q: How do I init script?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: echo 'start script'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Next, let's adjust the `command` script. This is the script Gitpod executes when the workspace successfully started up. In most cases, this is where you start your application's development server, e.g. `npm run dev`.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: npm install", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I configure your app's ports?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: npm run dev", "completion": ""}
{"prompt": "- port: 3000", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "When Gitpod notices port 3000 is available, it automatically opens your application in a preview to the right of your editor - ready for you to develop and see your changes.", "completion": ""}
{"prompt": "Q: How do I commit `.gitpod.yml`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once you committed and pushed `.gitpod.yml`, **open a new browser tab** and navigate to your project's page on GitHub, GitLab or Bitbucket.", "completion": ""}
{"prompt": "> If you pushed to a branch, please make sure you switch to that branch before you continue.", "completion": ""}
{"prompt": "1. Open a new workspace (see [Start your first workspace](#start-your-first-workspace) above).", "completion": ""}
{"prompt": "1. Wait until the development server started and your application's preview is displayed on the right side of the editor.", "completion": ""}
{"prompt": "If for some reason the second workspace does not start, simply close the tab and navigate back to the first workspace. Fix the errors that caused the workspace to fail based on the error output you see, commit and push your changes and start yet another workspace to test the latest changes.", "completion": ""}
{"prompt": "Congratulations, again \ud83d\ude0a! You now have a basic Gitpod configuration and for each new workspace you start, Gitpod automatically runs the scripts you manually have to run locally.", "completion": ""}
{"prompt": "Q: How do I shut down your workspaces?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The automation you have experienced so far is nice, but there's more! Remember that `init` task we [configured earlier](#init-script)?", "completion": ""}
{"prompt": "You may have wondered why there are separate `init` and `command` tasks. This is because we can tell Gitpod to **run the `init` script every time new code is pushed to your project**. By the time you or one of your organization members starts a new workspace, the `init` task already finished and you don't have to wait for that - saving you precious time. We call this **prebuilds**.", "completion": ""}
{"prompt": "Q: How do I an intro to prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "1. _Gitpod notices the new code and kicks off a prebuild by cloning the source code and executing the `init` task. The result is saved as a prebuilt workspace._", "completion": ""}
{"prompt": "1. He opens a Gitpod workspace for that given pull request (learn more about [contexts](/docs/introduction/learn-gitpod/context-url)).", "completion": ""}
{"prompt": "1. By the time the workspace starts, Paul sees the development server starting up and the application's preview is ready for review.", "completion": ""}
{"prompt": "For each new commit to your project, Gitpod continuously creates prebuilt workspaces so that the project is always ready-to-code. If your project is open source, anyone gets to enjoy the efficiency of prebuilds regardless of whether they are part of your organization or not.", "completion": ""}
{"prompt": "Q: How do I configure prebuilds for your projects?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: At this point, you have a `.gitpod.yml` configuration file to automate repetitive tasks and prebuilds configured to let Gitpod execute many of these tasks continuously whenever new code is pushed to your project - freeing you from waiting to download, install & build your project and its dependencies.", "completion": ""}
{"prompt": "To explore more of what Gitpod has to offer, we recommend the following next topics:", "completion": ""}
{"prompt": "- [Configure](/docs/configure) to learn more about start tasks, environment variables and how to provide your own custom Docker image as the foundation for workspaces.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Agda template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Agda](https://github.com/gitpod-io/template-agda) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-agda-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-agda-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: C template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C](https://github.com/gitpod-io/template-c) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-c-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-c-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Clojure template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Clojure](https://github.com/gitpod-io/template-clojure) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-clojure-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-clojure-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Coq template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Coq](https://github.com/gitpod-io/template-coq) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-coq-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-coq-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: C++ CMake template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C++ CMake](https://github.com/gitpod-io/template-cpp) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-cpp-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-cpp-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Datasette template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Datasette](https://github.com/gitpod-io/template-datasette) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-datasette-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-datasette-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Deno template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Deno](https://github.com/gitpod-io/template-typescript-deno) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-typescript-deno-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-typescript-deno-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Docker Compose template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Docker Compose](https://github.com/gitpod-io/template-docker-compose) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-docker-compose-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-docker-compose-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: C# .NET template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C# .NET](https://github.com/gitpod-io/example-dotnet-core) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-dotnet-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-dotnet-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "- [.NET in Gitpod](/docs/introduction/languages/dotnet)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I drupal quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Drupal template](https://github.com/gitpod-io/template-php-drupal-ddev/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I elixir quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Elixir template](https://github.com/gitpod-io/template-elixir/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I elm quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Elm template](https://github.com/avh4/gitpod-template-elm/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I flask quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Flask template](https://github.com/gitpod-io/template-python-flask/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I flutter quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Flutter template](https://github.com/gitpod-io/template-flutter/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I go quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Go template](https://github.com/gitpod-io/template-golang-cli/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I grain quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Grain template](https://github.com/gitpod-io/template-grain/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I haskell quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [Haskell template](https://github.com/gitpod-io/template-haskell/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: quickstart", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I ihp quickstart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Introduce you to prebuilds", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Create a new repository based on the [IHP template](https://github.com/gitpod-io/template-ihp/generate).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).", "completion": ""}
{"prompt": "Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.", "completion": ""}
{"prompt": "Q: How do I step 3: first prebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.", "completion": ""}
{"prompt": "Other developers made their setup even more productive and supercharged their workflows with the following quick steps:", "completion": ""}
{"prompt": "1. **Installing the browser extension**", "completion": ""}
{"prompt": "You can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.", "completion": ""}
{"prompt": "The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "For our partner GitLab we have a native integration into their UI that you can enable here.", "completion": ""}
{"prompt": "2. **Add your favorite VS Code themes and extensions**", "completion": ""}
{"prompt": "You have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.", "completion": ""}
{"prompt": "Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.", "completion": ""}
{"prompt": "3. **Start throwing away workspaces like paper towels**", "completion": ""}
{"prompt": "You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.", "completion": ""}
{"prompt": "You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.", "completion": ""}
{"prompt": "Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \ud83e\udd13", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Git Integrations](/docs/integrations)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: getting-started", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<script lang=\"ts\">", "completion": ""}
{"prompt": "import QuickstartSearch from \"$lib/components/docs/quickstart/quickstart-search.svelte\";", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<OpenGraph", "completion": ""}
{"prompt": "description:", "completion": ""}
{"prompt": "title: \"Quickstart - Gitpod\",", "completion": ""}
{"prompt": "}}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to start using Gitpod on an example project that is hosted on GitHub in less than 5 minutes. For simplicity we use GitHub as the git hoster but the steps outlined work equally well for GitLab and Bitbucket. This section helps you understand the features and advantages of Gitpod in a learning environment. All templates are pre-configured to use Gitpod and ready-to-code:", "completion": ""}
{"prompt": "Q: How do I templates?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <PopularQuickstart />", "completion": ""}
{"prompt": "Q: How do I find your template?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can install the Gitpod browser extension in any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browser such as Google Chrome, Microsoft Edge, Brave, and others, or in [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/).", "completion": ""}
{"prompt": "The Gitpod extension adds a Gitpod button on every project and branch across GitLab, GitHub, and Bitbucket so that you can easily open a new workspace for any project.", "completion": ""}
{"prompt": "![Browser Extension](../../../static/images/docs/browser-extension-lense.png)", "completion": ""}
{"prompt": "If you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.", "completion": ""}
{"prompt": "Q: How do I next steps?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Java template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Java Spring](https://github.com/gitpod-io/spring-petclinic) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-java-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/spring-petclinic`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Julia template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Julia](https://github.com/gitpod-io/template-julia) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-julia-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-julia-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Laravel template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Laravel](https://github.com/gitpod-io/template-php-laravel-mysql) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-laravel-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-laravel-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: NextJS template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [NextJS](https://github.com/gitpod-io/template-nextjs) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-nextjs-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-nextjs-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Nix template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Nix](https://github.com/gitpod-io/template-nix) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-nix-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-nix-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: OCaml template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [OCaml](https://github.com/gitpod-io/template-ocaml) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-ocaml-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ocaml-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Perl template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Perl](https://github.com/gitpod-io/template-perl) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-perl-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-perl-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: PlanetScale template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [PlanetScale](https://github.com/Shulammite-Aso/template-planetscale) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-planetscale-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-planetscale-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Python template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Python](https://github.com/gitpod-io/template-python-django) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-python-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-python-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: React template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [React](https://github.com/gitpod-io/template-typescript-react) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-react-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-react-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Ruby on Rails template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Ruby on Rails](https://github.com/gitpod-io/template-ruby-on-rails-postgres) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-ruby-on-rails-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ruby-on-rails-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Rust template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Rust](https://github.com/gitpod-io/template-rust-cli) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-rust-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-rust-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Scala template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Scala](https://github.com/gitpod-io/template-scala) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-scala-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-scala-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Svelte template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [SvelteJS](https://github.com/gitpod-io/template-sveltejs) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-svelte-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-svelte-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: SvelteKit template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [SvelteKit](https://github.com/gitpod-io/template-sveltekit) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-sveltekit-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-svelte-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: TLA+ template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [TLA+](https://github.com/gitpod-io/template-tlaplus) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-tlaplus-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-nextjs-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Node/TypeScript/Express template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Node/TypeScript/Express](https://github.com/gitpod-io/template-typescript-node) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-typescript-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-typescript-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Wasp template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Wasp](https://github.com/gitpod-io/template-wasp) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-wasp-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install the gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-wasp-template>`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Wordpress template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Wordpress](https://github.com/gitpod-io/template-wordpress) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-wordpress-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-wordpress-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: X11 VNC template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [X11 VNC](https://github.com/gitpod-io/template-x11-vnc) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral developer environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-x11-vnc-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-x11-vnc-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Yasm template", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Learn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Yasm](https://github.com/gitpod-io/template-yasm) template.", "completion": ""}
{"prompt": "The following guide will:", "completion": ""}
{"prompt": "- Walk you through a real world example with an existing Gitpod config", "completion": ""}
{"prompt": "- Demonstrate the benefits of ephemeral development environments", "completion": ""}
{"prompt": "For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.", "completion": ""}
{"prompt": "Q: How do I step 1: clone git repository?", "completion": ""}
{"prompt": "- Name it e.g. `my-yasm-template`.", "completion": ""}
{"prompt": "Q: How do I step 2: install gitpod app?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.", "completion": ""}
{"prompt": "The revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-yasm-template`", "completion": ""}
{"prompt": "Gitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).", "completion": ""}
{"prompt": "Q: How do I step 4: enjoy being ready-to-code \ud83e\udd19?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:", "completion": ""}
{"prompt": "- [Getting started with your own project](/docs/configure)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Introduction", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "const res = await fetch(\"/api/changelogs\");", "completion": ""}
{"prompt": "throw new Error(res.statusText);", "completion": ""}
{"prompt": "const changelogEntries = await res.json();", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import { setContext } from \"svelte\";", "completion": ""}
{"prompt": "import Timeline, { contextKeyChangelogEntries } from \"$lib/components/docs/landing-page/timeline/timeline.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<OpenGraph", "completion": ""}
{"prompt": "description:", "completion": ""}
{"prompt": "title: \"Gitpod Documentation - Educate, Configure, Develop\",", "completion": ""}
{"prompt": "}}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <Timeline />", "completion": ""}
{"prompt": "To see all updates view our [changelog](/changelog)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I bash in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here are a few Bash example projects that are already automated with Gitpod:", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                        | Description                      | Try It                                                                                                                |", "completion": ""}
{"prompt": "| [inlets/inlets](https://github.com/inlets/inlets) | Reverse proxy and service tunnel | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/inlets/inlets) |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I vscode extensions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ShellCheck provides linting for common mistakes in your shell script.", "completion": ""}
{"prompt": "To use ShellCheck in Gitpod, first, we must install the `shellcheck` tool. Here is a simple Dockerfile to get you started:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You should also install the shellcheck VS Code extension in Gitpod, by adding a [.gitpod.yml](/docs/references/gitpod-yml) configuration file to your repository that looks like this (notice the `vscode` extensions section):", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- timonwong.shellcheck@0.9.0:hsU/Rd39aqPYowTqL+DbXg==", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![A Bash IDE demonstration](../../../static/images/docs/bashIDE.png)", "completion": ""}
{"prompt": "Just to name a few things Bash IDE adds: Code completion, hovers, and diagnostic reporting.", "completion": ""}
{"prompt": "To install Bash IDE to your repository add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Also the following in your", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- mads-hartmann.bash-ide-vscode@1.4.0:/qx+rdXE/fGTGWhelNf3aQ==", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - For more information about ShellCheck please see [shellcheck.net](https://shellcheck.net)", "completion": ""}
{"prompt": "Q: How do I known issues?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [It has been reported](https://github.com/gitpod-io/gitpod/issues/1461#issuecomment-621232166) that shellcheck extension fails to detect shellcheck from homebrew which results in:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: C++ in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod supports C++ right out of the box, but there are still ways to enhance your C++ experience within Gitpod.", "completion": ""}
{"prompt": "Q: How do I example repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------------------------------------------------------------ | ----------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |", "completion": ""}
{"prompt": "| [tinyraycaster](https://github.com/ssloy/tinyraycaster)            | old-school FPS in a weekend                                       | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/ssloy/tinyraycaster)                      |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I c++ tools?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I debugging?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "// Hover to view descriptions of existing attributes.", "completion": ""}
{"prompt": "\"configurations\": [", "completion": ""}
{"prompt": "\"type\": \"gdb\",", "completion": ""}
{"prompt": "\"name\": \"Debug Firefox (GDB)\",", "completion": ""}
{"prompt": "\"cwd\": \"${workspaceRoot}\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - <a class=\"no-nowrap\" href=\"https://community.gitpod.io/t/gitpod-and-c/622\">How to enable the `clang-tidy` linter in Gitpod</a>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I dart in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here are a few Dart example projects that are already automated with Gitpod:", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                                                | Description                                                 | Try it                                                                                                                             |", "completion": ""}
{"prompt": "| [Flutter Hello World Demo](https://github.com/gitpod-io/template-flutter) | The Flutter hello world demo template configured for Gitpod | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-flutter) |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I installing dart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN brew tap dart-lang/dart && brew install dart", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I dart?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here is a hello world example of a [Gitpodified](/guides/gitpodify) project running in the browser, try it!", "completion": ""}
{"prompt": "[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Dart)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I deno in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Add a Dockerfile to your project as [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN /home/gitpod/.deno/bin/deno completions bash > /home/gitpod/.bashrc.d/90-deno && \\", "completion": ""}
{"prompt": "echo 'export PATH=\"$DENO_INSTALL/bin:$PATH\"' >> /home/gitpod/.bashrc.d/90-deno", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "It'll run the latest Deno version and install the Bash completions.", "completion": ""}
{"prompt": "Q: How do I example repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------------------------------------------------------------------ | ----------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here is a useful extensions that you'll likely want to install in your Deno project.", "completion": ""}
{"prompt": "Q: How do I [deno](https://marketplace.visualstudio.com/items?itemname=denoland.vscode-deno)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: .NET in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I example repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------------------------------------------------------------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| [uno](https://github.com/unoplatform/uno)                       | Build Mobile, Desktop and WebAssembly apps with C# and XAML                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/unoplatform/uno)               |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To get all the .NET tools that you need pre-installed in your Gitpod workspaces, use the following base image in your [.gitpod.yml](/docs/references/gitpod-yml):", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "If your project requires a GUI or Virtual Desktop, please use this image instead:", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This will give you a full GUI Virtual Desktop for your .NET application! The Virtual Desktop will be running on port `6080`.", "completion": ""}
{"prompt": "Q: How do I compiling .net code in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To run your code after it has been compiled run `dotnet <FILE>` where `<FILE>` is the path to the EXE file you want to run. You can also run application with `dotnet run <FILE>` where `<FILE>` is the path to the C# or F# project file you want to compile and run.", "completion": ""}
{"prompt": "Q: How do I running .net code in watch-mode?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I c#?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- muhammad-sammy.csharp", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The [Ionide-fsharp](https://ionide.io/) extensin gives F# developers the following features:", "completion": ""}
{"prompt": "- A Widget for your F# needs", "completion": ""}
{"prompt": "- Shows errors inline", "completion": ""}
{"prompt": "- Goto definition", "completion": ""}
{"prompt": "- And more...", "completion": ""}
{"prompt": "![Ionide fsharp Example](../../../static/images/docs/Iondine_Example.png)", "completion": ""}
{"prompt": "To add this extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I go in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: This guide assumes familiarity with:", "completion": ""}
{"prompt": "[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).", "completion": ""}
{"prompt": "Q: How do I getting started / quick start?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I the default base image?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod uses the latest stable version of Go by default. If you want to use a different version, you can use the [Go Version Manager](https://github.com/moovweb/gvm) to install and manage multiple versions of Go or you can following their [official guide](https://go.dev/doc/manage-install).", "completion": ""}
{"prompt": "Q: How do I setting up a custom dcokerfile?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "touch .gitpod.yml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "touch .gitpod.Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "4. Update your `.gitpod.Dockerfile` to install your preferred [dependency versions](https://go.dev/project)", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "Q: How do I you can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ENV GO_VERSION=1.17", "completion": ""}
{"prompt": "Q: How do I for ref, see: https://github.com/gitpod-io/workspace-images/blob/61df77aad71689504112e1087bb7e26d45a43d10/chunks/lang-go/dockerfile#l10?", "completion": ""}
{"prompt": "ENV GOROOT=$HOME/go", "completion": ""}
{"prompt": "RUN curl -fsSL https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar xzs \\", "completion": ""}
{"prompt": "'export PATH=$GOPATH/bin:$PATH' > $HOME/.bashrc.d/300-go", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "git commit -m \"configuring gitpod with go\" && git push", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "go version", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If your project uses the [`dep` _(deprecated - v0.5.4)_](https://golang.github.io/dep/) dependency manager then you need to add a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) to your project. A basic example that extends the default workspace image might be something like:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Also, don't forget to reference the above Dockerfile in your `.gitpod.yml` configuration file, like so:", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "- premparihar.gotestexplorer", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I debugging your go applications in vs code?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Go debugging example\" src=\"/images/docs/GoDebug.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "So, basically in this video we:", "completion": ""}
{"prompt": "1. First, open the Go file that we want to debug", "completion": ""}
{"prompt": "3. Next, in the dropdown choose \"Go launch file\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "// Hover to view descriptions of existing attributes.", "completion": ""}
{"prompt": "\"configurations\": [", "completion": ""}
{"prompt": "\"name\": \"Launch file\",", "completion": ""}
{"prompt": "\"request\": \"launch\",", "completion": ""}
{"prompt": "\"program\": \"${file}\"", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Then, simply open the Go file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "To see a basic repository with Go debugging, please check out [gitpod-samples/template-golang-cli](https://github.com/gitpod-samples/template-golang-cli):", "completion": ""}
{"prompt": "[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-samples/template-golang-cli)", "completion": ""}
{"prompt": "Q: How do I debugging your go applications in goland?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Open the `main.go` file in the editor.", "completion": ""}
{"prompt": "4. Click on the `+` button and select `Go Application`.", "completion": ""}
{"prompt": "6. Click on the `Apply` button.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Older Go projects without module support need a <a href=\"https://golang.org/doc/code.html#Organization\" target=\"_blank\">specific workspace layout</a>:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "src/[repository-provider]/[repository-owner]/[repository-name]", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "how we do that for the example <a href=\"https://github.com/gitpod-io/definitely-gp/blob/master/go-gin-app/.gitpod.yml\" target=\"_blank\">go-gin-app</a> repository:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "checkoutLocation: \"src/github.com/demo-apps/go-gin-app\"", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "cd /workspace/src/github.com/demo-apps/go-gin-app &&", "completion": ""}
{"prompt": "go build -o app", "completion": ""}
{"prompt": "cd /workspace/src/github.com/demo-apps/go-gin-app &&", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "In more detail:", "completion": ""}
{"prompt": "- By default, Gitpod clones the repository into the directory `/workspace`, which becomes the", "completion": ""}
{"prompt": "change this behavior (the paths are taken relative to `/workspace`).", "completion": ""}
{"prompt": "- With `go get -v ./...` we retrieve the sources of the dependencies from GitHub.", "completion": ""}
{"prompt": "- Lastly, we start the application.", "completion": ""}
{"prompt": "Q: How do I example repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :----------------------------------------------------: | :-------------------------------------------------------: | ----------------------------------------------------------------------------------------------------------------------------: |", "completion": ""}
{"prompt": "| [go-swagger](https://github.com/go-swagger/go-swagger) | A simple yet powerful representation of your RESTful API  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/go-swagger/go-swagger) |", "completion": ""}
{"prompt": "| [gosh-terminal](https://github.com/gosh-terminal/gosh) |  A terminal implemented in Go where you can do anything   |    [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gosh-terminal/gosh) |", "completion": ""}
{"prompt": "Q: How do I further reading?", "completion": ""}
{"prompt": "- [JetBrains/GoLand Documentation](https://www.jetbrains.com/help/go) The stuff here also applies to Gitpod!", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: HTML & CSS in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod has great HTML and CSS support. In fact, Gitpod was made with web development in mind. And, depending on your needs, you may want to customize this experience further!", "completion": ""}
{"prompt": "Q: How do I example repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| [Devhints](https://github.com/rstacruz/cheatsheets)                        | TL;DR for developer documentation - a ridiculous collection of cheatsheets    | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/rstacruz/cheatsheets)             |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I [emmet](https://emmet.io/) &nbsp;support?", "completion": ""}
{"prompt": "Gitpod comes with [emmet](https://emmet.io/) support right out of the box giving you access to powerful snippets and completions", "completion": ""}
{"prompt": "Q: How do I live preview?", "completion": ""}
{"prompt": "With Gitpod you can open a preview for HTML files while you are coding. You can do this by opening a web server `python -m http.server 8000`.", "completion": ""}
{"prompt": "You can also automate this in your [`.gitpod.yml`](/docs/references/gitpod-yml) file, so that every time you start a new workspace your preview is ready to go. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- name: Start web server", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- port: 8000", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I try it!?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Languages", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import PopularLanguages from \"$lib/components/docs/languages/popular-languages.svelte\"", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I languages?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Java in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod comes with great support for Java. This guide walks you through how to fully configure a Java application using Gitpod.", "completion": ""}
{"prompt": "Q: How do I prerequisites?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: `youtube: ij1msCffQZA`", "completion": ""}
{"prompt": "To see a full working Java application, take a look at [gitpod-io/spring-petclinic](https://github.com/gitpod-io/spring-petclinic/). To update an existing Java application, follow the steps below in this guide.", "completion": ""}
{"prompt": "<a href=\"https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic\">", "completion": ""}
{"prompt": "</a>", "completion": ""}
{"prompt": "Q: How do I installing dependencies?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).", "completion": ""}
{"prompt": "Along with other languages and tools, this base image includes:", "completion": ""}
{"prompt": "- [SDKMAN!](https://sdkman.io/) `v5.16.0` (`sdk version`)", "completion": ""}
{"prompt": "- [Gradle](https://gradle.org/) `v7.5.1` (`gradle -version`)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: For alternative versions to those provided in the Gitpod base image, with [SDKMAN!](https://sdkman.io/usage#listversions) you can quickly update your dependencies: `sdk install <candidate> [version]`", "completion": ""}
{"prompt": "> **Important:** Dynamically swapping Java, Maven or Gradle versions manually is a quick way to explore Gitpod. However, for day-to-day development **strongly recommend to add explicit dependency versions in your gitpod.yml or Dockerfile**.", "completion": ""}
{"prompt": "Q: How do I updating java version?", "completion": ""}
{"prompt": "- `sdk install java 18.0.1.fx-zulu` - to install a specific version", "completion": ""}
{"prompt": "Q: How do I updating maven version?", "completion": ""}
{"prompt": "- `sdk install maven 3.8.6` - to install a specific version", "completion": ""}
{"prompt": "Q: How do I updating gradle version?", "completion": ""}
{"prompt": "- `sdk install gradle 7.4.1` - to install a specific version", "completion": ""}
{"prompt": "Q: How do I setting up a custom dockerfile?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "touch .gitpod.yml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "touch .gitpod.Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "4. Update your `.gitpod.Dockerfile` to install your dependency versions", "completion": ""}
{"prompt": "```Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "sdk install java 17.0.3-ms && \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "5. Commit and push both `gitpod.yml` and `.gitpod.Dockerfile`", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`", "completion": ""}
{"prompt": "For example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`", "completion": ""}
{"prompt": "7. Test your dependencies are correct in the new workspace", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.", "completion": ""}
{"prompt": "See [configure Docker](/docs/configure/workspaces/workspace-image) for more.", "completion": ""}
{"prompt": "Q: How do I build and run your application?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To build your application, you'll need to configure a [start task](/docs/configure/workspaces/tasks).", "completion": ""}
{"prompt": "Start tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.", "completion": ""}
{"prompt": "1. Add the command to build your application to your `.gitpod.yml`", "completion": ""}
{"prompt": "**Example with Gradle**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: gradle build", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "2. **Optional:** Validate by stopping and starting (restart) your workspace", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> **Tip:** If you're using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode), then your tasks will open as terminal windows. You can configure their layout using the [openMode](/docs/configure/workspaces/tasks#openmode) property.", "completion": ""}
{"prompt": "> **Note:** We are using the `init` property so that we can perform application building during a [prebuild](/docs/configure/projects/prebuilds), for increased performance. We'll discuss prebuilds more later on.", "completion": ""}
{"prompt": "See [start tasks](/docs/configure/workspaces/tasks) and [.gitpod.yml reference](/docs/references/gitpod-yml) for more.", "completion": ""}
{"prompt": "Q: How do I running a java application?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. **Use a run / launch configuration** - Alternatively, you can commit a [run/debug configuration in IntelliJ IDEA](/docs/introduction/languages/java#configuring-jetbrains-rundebug-configurations) or a [launch configuration in VS Code](/docs/introduction/languages/java#configuring-vs-code-launch-configurations) as a way to start your application.", "completion": ""}
{"prompt": "Q: How do I using start tasks to run java?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: gradle run", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: mvn exec:java", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp stop", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp tasks", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: `youtube: dehln1E8ylY`", "completion": ""}
{"prompt": "Gitpod supports encrypted, user-specific environment variables.", "completion": ""}
{"prompt": "Environment variables are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces. You can set environment variables using `gp env`, or in your project and account settings.", "completion": ""}
{"prompt": "See [environment variables](/docs/configure/projects/environment-variables) for more.", "completion": ""}
{"prompt": "Q: How do I configuring ports?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "ports:", "completion": ""}
{"prompt": "onOpen: open-browser", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Your development application might rely on the `localhost` hostname to effectively run.", "completion": ""}
{"prompt": "To ensure your localhost address works with Gitpod, you have two options:", "completion": ""}
{"prompt": "1. **Replace localhost references** - Swap `localhost` references within the application with the output of `gp url <port>`, typically via an [environment variable](/docs/configure/projects/environment-variables).", "completion": ""}
{"prompt": "**Example:** Using the `DEV_ENVIRONMENT_HOST` environment variable instead of localhost within the application, configured in the `command` of the `.gitpod.yml` start tasks.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- command: |", "completion": ""}
{"prompt": "java <application-entry>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in VS Code Desktop\" src=\"/images/editors/port-forwarding-vscode-desktop.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "With IntelliJ IDEA using [JetBrains Gateway](/docs/integrations/jetbrains-gateway) you can setup remote port-forwarding manually.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Port forwarding in a JetBrains IDE</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To set default plugins to be installed for all users starting a workspace for the project, add a list of the JetBrains plugin identifiers to your `.gitpod.yml` under `vscode.extensions`.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "See [.gitpod.yml reference](/docs/references/gitpod-yml) for more.", "completion": ""}
{"prompt": "Q: How do I configuring vs code launch configurations?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- vscjava.vscode-java-pack", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To share your run/debug configurations, you can commit their definitions to source control. Since the `.idea` folder contains lots of information used for IntelliJ (which can include sensitive information or secrets) you may wish to ignore the `.idea` from version control, and explicitly allow `.idea/runConfigurations`.", "completion": ""}
{"prompt": "Add run/debug configurations to git, by adding the following to your `.gitignore`.", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "!/.idea/runConfigurations", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To set default extensions to be installed for all users starting a workspace for the project, add a list of the VS Code extension identifiers to your `.gitpod.yml`.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "intellij:", "completion": ""}
{"prompt": "- com.intellij.lang.jsgraphql", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod prebuilds reduce wait time by installing dependencies or running builds before you start a new workspace. By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and pull/merge requests coming from the same repository. However, prebuilds save only the `workspace` directory, any files stored outside of the workspace directory will be lost. For Java applications, we recommend to execute build commands within an `init` startup task.", "completion": ""}
{"prompt": "`youtube: DwkoOz1GSVg`", "completion": ""}
{"prompt": "See [prebuilds](/docs/configure/projects/prebuilds) and [start tasks](/docs/configure/workspaces/tasks) for more.", "completion": ""}
{"prompt": "Q: How do I optimising jetbrains indexing?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I caching maven dependencies?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "mkdir /home/gitpod/.m2", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "printf '<settings>\\n  <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The default location of the gradle home is `$USER_HOME/.gradle`, however, since this location is by default outside of the `/workspace` directory caches will not be stored as part of a prebuild.", "completion": ""}
{"prompt": "If you are using the [workspace-full](https://github.com/gitpod-io/workspace-images) image, Gradle caching configuration is already enabled.", "completion": ""}
{"prompt": "To configure Gradle caching, add the following to your custom [Dockerfile](/docs/configure/workspaces/workspace-image).", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "See [prebuilds](/docs/configure/projects/prebuilds) for more.", "completion": ""}
{"prompt": "Q: How do I personalizing gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Dotfiles allow you to setup per-user configurations in your Gitpod workspace, such as modifying your shell and adding command aliases. To configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a public dotfiles repository in your Gitpod [preferences](https://gitpod.io/preferences).", "completion": ""}
{"prompt": "See [dotfiles](/docs/configure/user-settings/dotfiles) for more.", "completion": ""}
{"prompt": "Q: How do I browser extension?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <figure>", "completion": ""}
{"prompt": "<figcaption>Updating Gitpod IDE preferences to a JetBrains IDE</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)", "completion": ""}
{"prompt": "_Enable Settings Sync with Gitpod_", "completion": ""}
{"prompt": "VS Code Desktop by default is not setup to sync your VS Code settings (e.g. your fonts, layouts, etc) with VS Code running in the browser of Gitpod. You can configure Gitpod to sync settings between browser and desktop by running the command palette action \"Settings Sync: Enable signing in with Gitpod\" from the Gitpod VS Code extension.", "completion": ""}
{"prompt": "See [VS Code settings sync](/docs/references/ides-and-editors/settings-sync) for more.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I javascript in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: This guide assumes familiarity with:", "completion": ""}
{"prompt": "[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).", "completion": ""}
{"prompt": "Q: How do I getting started / quick start?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I the default base image?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Node Package Manager - npm](https://www.npmjs.com/) `v8.19.2` (`npm -v`)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod comes with the latest stable Node.js version pre-installed but let's say your project uses a different version of `node` (say `14.8.0` for example), well the good news is that Gitpod also comes with `nvm` (a tool used to manage multiple active Node.js versions) installed. To install and configure the desired version of node: `nvm install 14.8.0` and `nvm use 14.8.0` (you can also use `nvm alias default 14.8.0` to set the default version of node) or you can setup [custom Dockerfile](/docs/introduction/languages/javascript#setting-up-a-custom-dockerfile) to install the desired version of node & other required tools.", "completion": ""}
{"prompt": "Q: How do I setting up a custom dcokerfile?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "touch .gitpod.yml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "touch .gitpod.Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "4. Update your `.gitpod.Dockerfile` to install your dependency versions", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "&& source $HOME/.nvm/nvm.sh && nvm install $VERSION \\", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`", "completion": ""}
{"prompt": "For example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`", "completion": ""}
{"prompt": "7. Test your dependencies are correct in the new workspace", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.", "completion": ""}
{"prompt": "See [configure Docker](/docs/configure/workspaces/workspace-image) for more.", "completion": ""}
{"prompt": "Q: How do I build and run your application?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To build your application, you'll need to configure a [start task](/docs/configure/workspaces/tasks).", "completion": ""}
{"prompt": "Start tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.", "completion": ""}
{"prompt": "1. Add the command to build your application to your `.gitpod.yml`", "completion": ""}
{"prompt": "**Example with npm**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: npm install && npm run build", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "2. **Optional:** Validate by stopping and starting (restart) your workspace", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> **Tip:** If you're using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode), then your tasks will open as terminal windows. You can configure their layout using the [openMode](/docs/configure/workspaces/tasks#openmode) property.", "completion": ""}
{"prompt": "> **Note:** We are using the `init` property so that we can perform application building during a [prebuild](/docs/configure/projects/prebuilds), for increased performance. We'll discuss prebuilds more later on.", "completion": ""}
{"prompt": "See [start tasks](/docs/configure/workspaces/tasks) and [.gitpod.yml reference](/docs/references/gitpod-yml) for more.", "completion": ""}
{"prompt": "Q: How do I running a javascript application?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Add a `command` for starting your application to your `.gitpod.yml`", "completion": ""}
{"prompt": "**Example with npm**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: npm install && npm run build", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "**Example with yarn**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- init: yarn install && yarn build", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "2. **Optional:** Validate by stopping and starting (restart) your workspace", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)", "completion": ""}
{"prompt": "```shell", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I using eslint for linting?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "and then search for `eslint` in the extensions tab and then install it from there using the install button as shown in the screenshot.", "completion": ""}
{"prompt": "![Install ESLint in Gitpod](.../../../static/images/docs/eslint-extension.png)", "completion": ""}
{"prompt": "Q: How do I hot module replacement (hmr)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In your `.gitpod.yml` file, you should export the workspace url for the port your server runs into the environment.", "completion": ""}
{"prompt": "```yaml title=\".gitpod.yml\"", "completion": ""}
{"prompt": "- init: npm install", "completion": ""}
{"prompt": "export HMR_HOST=`gp url 5173`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "const config = () => ({", "completion": ""}
{"prompt": "hmr: {", "completion": ""}
{"prompt": "host: process.env.HMR_HOST", "completion": ""}
{"prompt": ": \"localhost\",", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I webpack?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "After the workspace URL with the given port is exported to the environment, it can be used in the `webpack.config.js` to determine the right port and hostname.", "completion": ""}
{"prompt": "```js title=\"webpack.config.js\"", "completion": ""}
{"prompt": "devServer: {", "completion": ""}
{"prompt": "webSocketURL: {", "completion": ""}
{"prompt": "? new URL(process.env.HMR_HOST).hostname", "completion": ""}
{"prompt": "port: process.env.HMR_HOST ? 443 : 3000,", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I use of private packages?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I debugging javascript applications in vs code?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To debug your application, you can use the [WebStorm](/docs/references/ides-and-editors/webstorm) IDE. You can start debugging by clicking the `Add Configurations` button in the IDE's top status bar.", "completion": ""}
{"prompt": "![Debugger Option in Gitpod WebStorm](.../../../static/images/docs/debugger-option-webstorm.webp)", "completion": ""}
{"prompt": "_You Can follow [this official blog](https://blog.jetbrains.com/webstorm/2018/01/how-to-debug-with-webstorm/) for more._", "completion": ""}
{"prompt": "Q: How do I example repositories?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :----------------------------------------------------------: | :-------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------: |", "completion": ""}
{"prompt": "| [freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) | [freeCodeCamp.org](https://www.freecodecamp.org/)'s open source codebase and curriculum | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/freeCodeCamp/freeCodeCamp) |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - [Build Projects in a Gitpod Ephemeral Dev Environment \u2014 The Ultimate Guide](/guides/guide-ephemeral-dev-environment-on-gitpod)", "completion": ""}
{"prompt": "- [Developing a Nuxt.js app entirely in your browser](/blog/developing-nuxtjs-in-browser)", "completion": ""}
{"prompt": "- [Debugging Node.js applications in Theia](/blog/node-js-gitpod)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I julia in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here are a few Julia example projects that are already automated with Gitpod:", "completion": ""}
{"prompt": "A minimal example of a ready-to-code Julia developer environment is [JesterOrNot/Gitpod-Julia](https://github.com/JesterOrNot/Gitpod-Julia). Feel free to take a look.", "completion": ""}
{"prompt": "And to showcase a real-world Julia project in Gitpod, we've gitpodified the [Julia repository](https://github.com/JesterOrNot/Julia) itself! Try it via the following button:", "completion": ""}
{"prompt": "[![JesterOrNot/Julia](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Julia)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I kotlin in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To install Kotlin in Gitpod add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "A full example could look like this:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN brew install kotlin", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I kotlin language?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Code snippets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: While this extension isn't Kotlin-specific, but allows to run code snippets in many different languages, including Kotlin.", "completion": ""}
{"prompt": "To get it, open Gitpod's Extensions panel, then search for \"Code Runner\" and install it for your project.", "completion": ""}
{"prompt": "Q: How do I try it?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: LaTeX in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: This tutorial will demonstrate how to configure Gitpod to work with [LaTeX](https://www.latex-project.org/) files. You can find a complete [example repository](https://github.com/ptrottier/latex) at the end.", "completion": ""}
{"prompt": "Q: How do I installing latex?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "FROM gitpod/workspace-full", "completion": ""}
{"prompt": "Q: How do I install latex?", "completion": ""}
{"prompt": "sudo apt-get install -yq texlive && \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Next, create a file called [.gitpod.yml](/docs/references/gitpod-yml) and add the following to it:", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: One way to achieve this is to install `inotify-tools` by modifying your earlier `.gitpod.Dockerfile` like so:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: RUN sudo apt-get -q update && \\", "completion": ""}
{"prompt": "sudo rm -rf /var/lib/apt/lists/*", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- name: LaTeX auto-rebuild", "completion": ""}
{"prompt": "while find . -name '*.tex' | xargs inotifywait -qqre modify .; do \\", "completion": ""}
{"prompt": "done", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "This will start a watcher process that automatically recompiles your `*.tex` files when they are changed. Note: The watcher process will start in a separate Terminal on every workspace start.", "completion": ""}
{"prompt": "Q: How do I vscode extensions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: This extension provides rich editing support for the LaTeX typesetting system powered by the [TexLab](https://github.com/latex-lsp/texlab-vscode) language server.", "completion": ""}
{"prompt": "To install it in Gitpod, simply download the corresponding `*.vsix` file [Open VSX](https://open-vsx.org/), and then drag-and-drop it into Gitpod's Extensions view (which can be found in the left vertical menu bar).", "completion": ""}
{"prompt": "This will automatically append something like this to your `.gitpod.yml` file:", "completion": ""}
{"prompt": "```yml", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "(Note: You can also append these lines yourself if you don't want to download & re-upload the `*.vsix` file.)", "completion": ""}
{"prompt": "Q: How do I latex workshop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: There is also [LaTeX Snippets](https://github.com/JeffersonQin/VSCode-LaTeX-Snippets):", "completion": ""}
{"prompt": "> This extension includes a variety of snippets for LaTeX including making environments and plotting images for functions, etc.", "completion": ""}
{"prompt": "Q: How do I try it!?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: PHP in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod supports PHP right out of the box, but more advanced features such as debugging can be configured, so here is how to do it!", "completion": ""}
{"prompt": "> There is also an awesome community project that utilizes [ddev](https://github.com/drud/ddev) with Gitpod and makes things much easier.", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                                         | Description                                                                    | Try it                                                                                                                                        |", "completion": ""}
{"prompt": "| [symfony-demo](https://github.com/gitpod-io/symfony-demo)          | A PHP/Symfony reference application following best practices                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/symfony-demo)                |", "completion": ""}
{"prompt": "| [koel](https://github.com/phanan/koel)                             | A personal music streaming server that works                                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/phanan/koel)                           |", "completion": ""}
{"prompt": "| [phpmyadmin](https://github.com/apolopena/gitpod-phpmyadmin)       | A phpMyAdmin example with Node.js, a REST API and MySQL for data persistence   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/apolopena/gitpod-phpmyadmin)           |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I switching php versions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "At first, add a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) file on your repo with the following content in it:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "Q: How do I you can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: RUN sudo update-alternatives --set php $(which php7.4)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now you can [See it in action on a new workspace](/docs/references/gitpod-yml#see-it-in-action)", "completion": ""}
{"prompt": "Q: How do I debugging php in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "FROM gitpod/workspace-full:2022-05-08-14-31-53", "completion": ""}
{"prompt": "RUN sudo install-packages php-xdebug", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now you can [See it in action on a new workspace](/docs/references/gitpod-yml#see-it-in-action)", "completion": ""}
{"prompt": "Later, you can head over to `Run and Debug` on the left hand side and have fun debugging PHP! You can also create a `launch.json` file.", "completion": ""}
{"prompt": "Finally, here is a full [example repository](https://github.com/gitpod-io/Gitpod-PHP-Debug) containing the complete Gitpod PHP debug configuration described above. You can try it by clicking here:", "completion": ""}
{"prompt": "[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PHP-Debug)", "completion": ""}
{"prompt": "Q: How do I pecl package manager?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "FROM gitpod/workspace-full", "completion": ""}
{"prompt": "RUN sudo pecl channel-update pecl.php.net && \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "where `<EXTENSION>` is the PHP extension you want to install, e.g. `xdebug`.", "completion": ""}
{"prompt": "Q: How do I setting github token to composer?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "composer config --global github-oauth.github.com $(printf '%s\\n' host=github.com | gp credential-helper get | sort | head -2 | tail -1 | sed 's;password=;;')", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - <a class=\"no-nowrap\" href=\"https://notes.etin.space/posts/gitpodifying-a-new-laravel-application\">Gitpodifying a new Laravel Application</a> by Etin Obaseki", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I python in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Before we get started, here are some examples of already-[gitpodified](/guides/gitpodify) repositories!", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                                                                | Description                                               | Try it                                                                                                                                         |", "completion": ""}
{"prompt": "| [python-flask-api-tutorial](https://github.com/breatheco-de/python-flask-api-tutorial)    | A step by step Todo List API tutorial with Flask + Python | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/breatheco-de/python-flask-api-tutorial) |", "completion": ""}
{"prompt": "| [Gitpod-PyQt](https://github.com/gitpod-io/Gitpod-PyQt)                                   | A PyQt example for Gitpod                                 | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt)                  |", "completion": ""}
{"prompt": "| [template-python-django](https://github.com/gitpod-io/template-python-django)             | A Django example for Gitpod                               | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-python-django)       |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Welcome data scientists! This part of the guide will show you how to configure Gitpod for Pandas development.", "completion": ""}
{"prompt": "Q: How do I try pandas in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Pandas Team has their official docs on how to use Gitpod for Pandas development. Please check out [Pandas Team's Gitpod guide](https://pandas.pydata.org/docs/dev/development/contributing_gitpod.html).", "completion": ""}
{"prompt": "Q: How do I python versions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: FROM gitpod/workspace-python", "completion": ""}
{"prompt": "RUN pyenv install 3.11 \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I [start tasks](/docs/configure/workspaces/tasks)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: python3 main.py", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can <a class=\"no-nowrap\" href=\"https://github.com/palantir/python-language-server#configuration\">create a `setup.cfg` or a `pycodestyle.cfg` in the project root</a> and [adjust pycodestyle](http://pycodestyle.pycqa.org/en/latest/intro.html#configuration) rules there like this:", "completion": ""}
{"prompt": "```toml", "completion": ""}
{"prompt": "ignore = E226,E302,E41", "completion": ""}
{"prompt": "statistics = True", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: While the most popular Python VSCode extensions are built into Gitpod, here are a few \"nice to have\" extensions that you can use as well.", "completion": ""}
{"prompt": "Q: How do I arepl for python?", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ARepl extension example\" src=\"/images/docs/AReplExample.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "ARepl for Python is helpful for constantly checking your code and debugging.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- almenon.arepl", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![Python test explorer example](../../../static/images/docs/python_Test_In_Gitpod.png)", "completion": ""}
{"prompt": "To add this to your repository add the following to your [.gitpod.yml](/docs/references/gitpod-yml)", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I gui applications with wxpython?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I which has much of what you need to start?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: RUN sudo apt-get -q update && \\", "completion": ""}
{"prompt": "sudo rm -rf /var/lib/apt/lists/*", "completion": ""}
{"prompt": "Q: How do I install wxpython?", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Here is a corresponding [.gitpod.yml](/docs/references/gitpod-yml) example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "Q: How do I this will expose all necessary ports needed for your vnc image?", "completion": ""}
{"prompt": "- port: 6080", "completion": ""}
{"prompt": "- port: 5900", "completion": ""}
{"prompt": "- port: 35900", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: tasks:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ----------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "| [Pong](https://github.com/JesterOrNot/Pong)                       | Kivy      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Pong)            |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here is a quick clip on how to automatically configure debugging for Python!", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Python debugging example</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Then, go to the debug menu and select \"Add Configuration...\"", "completion": ""}
{"prompt": "4. Next, choose \"Python File\" as the debug configuration", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"configurations\": [", "completion": ""}
{"prompt": "\"name\": \"Python: Current File\",", "completion": ""}
{"prompt": "\"request\": \"launch\",", "completion": ""}
{"prompt": "\"console\": \"internalConsole\"", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Then, simply open the Python file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "To see a basic repository with Python debugging enabled, please check out [gitpod-io/Gitpod-Python-Debug](https://github.com/gitpod-io/Gitpod-Python-Debug):", "completion": ""}
{"prompt": "[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Python-Debug)", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "Q: How do I further reading?", "completion": ""}
{"prompt": "- **_[Troubleshooting Matplotlib/TK](https://github.com/gitpod-io/gitpod/issues/795)_** Here is how to troubleshoot Matplotlib/TK issues for Python GUI applications.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: R in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To work with R in Gitpod, you will need to properly configure your repository. Here is how to do it.", "completion": ""}
{"prompt": "Q: How do I installing r?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "FROM gitpod/workspace-full", "completion": ""}
{"prompt": "RUN brew install R", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Then commit and push both files to your repository. After that, every new Gitpod workspace created for your project will have R pre-installed.", "completion": ""}
{"prompt": "Q: How do I vscode extensions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![R extension](../../../static/images/docs/RGitpod.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- Ikuyadeu.r@1.2.1:z5vr1v1bfS++U/aHLSXQ6Q==", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Ruby in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It's relatively easy to set up your Ruby project in Gitpod.", "completion": ""}
{"prompt": "Q: How do I ruby versions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [gitpod/workspace-ruby-3.0](https://hub.docker.com/r/gitpod/workspace-ruby-3.0)", "completion": ""}
{"prompt": "These images are automatically updated every week with the latest ruby patch versions.", "completion": ""}
{"prompt": "To use a fixed version, you may use a [custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "USER gitpod", "completion": ""}
{"prompt": "Q: How do I install ruby version 2.7.6 and set it as default?", "completion": ""}
{"prompt": "&& printf \"rvm_gems_path=/home/gitpod/.rvm\\n\" > ~/.rvmrc \\", "completion": ""}
{"prompt": "rvm use ${_ruby_version} --default\" \\", "completion": ""}
{"prompt": "&& printf \"{ rvm use \\$(rvm current); } >/dev/null 2>&1\\n\" >> \"$HOME/.bashrc.d/70-ruby\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here are a few Ruby example projects that are already automated with Gitpod:", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                                           | Description                                              | Try it                                                                                                                          |", "completion": ""}
{"prompt": "| [Ruby on Rails template](https://github.com/gitpod-io/ruby-on-rails) | Ruby on Rails template with a PostgreSQL database        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/ruby-on-rails) |", "completion": ""}
{"prompt": "| [GitLab](https://gitlab.com/gitlab-org/gitlab)                       | The open source end-to-end software development platform | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://gitlab.com/gitlab-org/gitlab)       |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I vscode extensions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With the Ruby test explorer, you can run unit tests from within the Gitpod UI.", "completion": ""}
{"prompt": "To add this extension to your repository, simply add these lines to your [.gitpod.yml](/docs/references/gitpod-yml) configuration file:", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "extensions:", "completion": ""}
{"prompt": "- hbenl.vscode-test-explorer@2.21.1", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: So, you want to write your cool new Ruby On Rails application in Gitpod? Well, here is an idea of how to do it. Please take a look at our [minimal Rails example](https://github.com/gitpod-io/Gitpod-Ruby-On-Rails) running in Gitpod:", "completion": ""}
{"prompt": "[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Ruby-On-Rails)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I rust in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- The blazing-fast workspace search is powered by [ripgrep](https://github.com/BurntSushi/ripgrep)", "completion": ""}
{"prompt": "Q: How do I rust version?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "/bin/sh: rustup command not found", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN bash -cl \"rustup toolchain install nightly\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "nightly-2020-03-04", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here are a few Rust example projects that are already automated with Gitpod:", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                          | Description                         | Try it                                                                                                                       |", "completion": ""}
{"prompt": "| [Nushell](https://github.com/nushell/nushell/)      | A next-gen shell for the GitHub era | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nushell/nushell)      |", "completion": ""}
{"prompt": "| [Servo](https://github.com/servo/servo)             | The Servo Browser Engine            | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/servo/servo)          |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I vscode extensions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![Rust test explorer example](../../../static/images/docs/rustTest.png)", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **_Note: This extension outputs emojis by default if the crate version is set at the latest. You can disable this by using `crates.upToDateDecorator` option in your preferences_** > <br>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>A crates extension demo</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <figure>", "completion": ""}
{"prompt": "<figcaption>An example of search crates.io extension</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![TOML Syntax highlighting example](../../../static/images/docs/feature_syntax_highlight.png)", "completion": ""}
{"prompt": "Better TOML adds syntax highlighting to your `Cargo.toml`.", "completion": ""}
{"prompt": "Q: How do I cross-compiling with musl?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Then, build with `cargo build --target x86_64-unknown-linux-musl`", "completion": ""}
{"prompt": "To learn more, see [MUSL support for fully static binaries](https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html).", "completion": ""}
{"prompt": "Q: How do I debugging?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN sudo apt-get -q update \\", "completion": ""}
{"prompt": "libpython3.6 \\", "completion": ""}
{"prompt": "&& sudo rm -rf /var/lib/apt/lists/*", "completion": ""}
{"prompt": "ENV RUST_LLDB=/usr/bin/lldb-8", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "FROM gitpod/workspace-full", "completion": ""}
{"prompt": "USER gitpod", "completion": ""}
{"prompt": "RUN sudo apt-get -q update \\", "completion": ""}
{"prompt": "libpython3.6 \\", "completion": ""}
{"prompt": "&& sudo rm -rf /var/lib/apt/lists/*", "completion": ""}
{"prompt": "ENV RUST_LLDB=/usr/bin/lldb-8", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Now that's out of the way, here is a video on how to configure the debug configuration", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Rust debugging example</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Next, in the dropdown choose \"GDB: Launch Program\"", "completion": ""}
{"prompt": "4. Modify the target field and change it to `${workspaceFolder}/target/debug/<PROGRAM_NAME>` where `<PROGRAM_NAME>` is the name of the program under the name field in the `Cargo.toml` file.", "completion": ""}
{"prompt": "6. Go to the terminal menu and click configure tasks", "completion": ""}
{"prompt": "8. change the tag `type` to `command`", "completion": ""}
{"prompt": "10. Next remove the `problemMatcher` field.", "completion": ""}
{"prompt": "12. Add a field called `label` and set it to `cargo`", "completion": ""}
{"prompt": "14. Add a breakpoint or two", "completion": ""}
{"prompt": "16. Click the green run button.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "// Hover to view descriptions of existing attributes.", "completion": ""}
{"prompt": "\"configurations\": [", "completion": ""}
{"prompt": "\"type\": \"gdb\",", "completion": ""}
{"prompt": "\"name\": \"Debug Rust Code\",", "completion": ""}
{"prompt": "\"target\": \"${workspaceFolder}/target/debug/rust_debug\",", "completion": ""}
{"prompt": "\"valuesFormatting\": \"parseText\"", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Next create another file in the same `.theia/` directory called `tasks.json` with the following content:", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"tasks\": [", "completion": ""}
{"prompt": "\"command\": \"cargo\",", "completion": ""}
{"prompt": "\"type\": \"process\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - **_[Rocket-Example](/blog/docker-in-gitpod)_** For an example of how to setup a project for the [`Rocket`](https://rocket.rs/) web-development framework", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I scala in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: First, you'll probably want to install Scala. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Additionally create a file called [.gitpod.yml](/docs/references/gitpod-yml) and add the following:", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Let's break this down. First, in `.gitpod.Dockerfile`, we declare `FROM gitpod/workspace-full` to have your project use Gitpod's default workspace image (recommended). You can use other images too, but some Gitpod features might not work as well with untested images.", "completion": ""}
{"prompt": "Next, we declare `RUN brew install scala`. This simply installs Scala into the workspace image via HomeBrew.", "completion": ""}
{"prompt": "Then, we register our custom Dockerfile in Gitpod's configuration file `.gitpod.yml`, so that Gitpod knows it should pick it up and build it on-the-fly when booting up new workspaces.", "completion": ""}
{"prompt": "Finally, please note that these changes will only take effect in new workspaces. To try out your new automated dev setup, simply commit both files; push them to GitHub; and then open a new Gitpod workspace for your repository. \ud83d\ude80", "completion": ""}
{"prompt": "Q: How do I using the ammonite repl?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To use [sbt](https://www.scala-sbt.org/) (simple build tool) in Gitpod, you can add the following to that [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) we created:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "As usual, commit and push the changes, and `sbt` will be installed in all future workspaces.", "completion": ""}
{"prompt": "Q: How do I managing scala versions with scalaenv?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN brew install scalaenv", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [coursier](https://get-coursier.io/) is useful for building certain Scala projects and installing different tools.", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "(Don't forget to commit and push this change!)", "completion": ""}
{"prompt": "Q: How do I formatting scala code with scalafmt?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN sudo env \"PATH=$PATH\" coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\", "completion": ""}
{"prompt": "-o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: A full example of a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) configured for Scala could look something like:", "completion": ""}
{"prompt": "```dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "-r sonatype:snapshots \\", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You will notice that all the `brew install` commands are on the same line. We recommend grouping similar commands together to minimize the number of [Docker layers](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#minimize-the-number-of-layers).", "completion": ""}
{"prompt": "Additionally, your [.gitpod.yml](/docs/references/gitpod-yml) file should still look like this:", "completion": ""}
{"prompt": "```YAML", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I scala syntax (official)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![An example of the metals in Gitpod](../../../static/images/docs/metals-demo.png)", "completion": ""}
{"prompt": "Metals adds helpful Scala features to Gitpod, for example, advanced autocompletion and debugging support just to name a few. Although to use it you must also have the previously mentioned Scala Syntax.", "completion": ""}
{"prompt": "To get it, open Gitpod's **Extensions** panel (left vertical menu in the IDE), then search for \"Scala Metals\", and install it \"for this project\". Then, commit the automatic `.gitpod.yml` change that was made by Gitpod.", "completion": ""}
{"prompt": "Boom! You're done! (Just a reminder, don't forget to push the changes.)", "completion": ""}
{"prompt": "Q: How do I debugging scala code?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Example of debugging Scala in Gitpod\" src=\"/images/docs/scala-debug.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "In general when debugging Scala code, go to the main method, and click the Debug button over it! And boom you're debugging.", "completion": ""}
{"prompt": "Q: How do I try it!?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you are having trouble and need help please find us in the [Gitpod community](https://community.gitpod.io/), or, [file an issue on GitHub](https://github.com/gitpod-io/gitpod/issues/new/choose).", "completion": ""}
{"prompt": "Q: How do I feedback?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Svelte in Gitpod", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To work with Svelte in Gitpod, you will need to properly configure your repository. Here is how to do that, assuming that you're using the official sveltejs [template](https://github.com/sveltejs/template) which uses Rollup:", "completion": ""}
{"prompt": "Q: How do I create a .gitpod.yml?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "command: npm run dev", "completion": ""}
{"prompt": "ports:", "completion": ""}
{"prompt": "onOpen: open-preview", "completion": ""}
{"prompt": "onOpen: ignore", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In order to make live reload work we need to add a bit of configuration as specified below:", "completion": ""}
{"prompt": "- Setup an environment variable called `CLIENT_URL` in the `.gitpod.yml` config file as shown below please make sure that you set it up before the task which starts the dev server(which is `npm run dev` in this case):", "completion": ""}
{"prompt": "```bash", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "npm run dev", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "```js", "completion": ""}
{"prompt": "!production &&", "completion": ""}
{"prompt": "watch: \"public\",", "completion": ""}
{"prompt": "}),", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: <div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                                          | Description                        | Try it                                                                                                                              |", "completion": ""}
{"prompt": "| [SvelteJS template](https://github.com/gitpod-io/sveltejs-template) | A project template for Svelte apps | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/sveltejs-template) |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I vscode extensions?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Svelte for VS Code Provides syntax highlighting and rich IntelliSense for Svelte components in VS Code, utilising the [svelte language server](https://github.com/sveltejs/language-tools/tree/master/packages/language-server).", "completion": ""}
{"prompt": "To add this extension to your repository, simply head to Gitpod\u2019s [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (find it in the IDE\u2019s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your [.gitpod.yml](/docs/references/gitpod-yml) file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.", "completion": ""}
{"prompt": "https://github.com/gitpod-io/sveltejs-template repo is a working example of the config described above <span aria-hidden=\"true\">\ud83d\udc46</span>.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: languages", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I vue.js in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Here are a few Vue.js example projects that are already automated with Gitpod:", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Repository                                            | Description                                                                     | Try it                                                                                                                        |", "completion": ""}
{"prompt": "| [vuepress](https://github.com/vuejs/vuepress)         | Minimalistic Vue-powered static site generator                                  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/vuejs/vuepress)        |", "completion": ""}
{"prompt": "| [nuxtjs.org](https://github.com/nuxt/nuxtjs.org)      | Nuxt.js Documentation Website (Universal Vue.js Application built with Nuxt.js) | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nuxt/nuxtjs.org)       |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I vue-cli?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "npm i -g vue-cli", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "RUN npm i -g vue-cli", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I vetur?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- octref.vetur@0.23.0:TEzauMObB6f3i2JqlvrOpA==", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Context URL", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod understands a variety of common situations you experience as part of your development workflow and automates repetitive tasks, giving you time to focus on more impactful work.", "completion": ""}
{"prompt": "The context is determined by a Gitpod URL's [_anchor_](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL), i.e. the link provided at the end of the `#` character in the `gitpod.io/#` URL.", "completion": ""}
{"prompt": "Regardless of the context, Gitpod performs the tasks configured in `.gitpod.yml` if this configuration file is available for a given repository.", "completion": ""}
{"prompt": "Gitpod is aware of the following contexts:", "completion": ""}
{"prompt": "- [Context URL](#Context-URL)", "completion": ""}
{"prompt": "- [Branch and Commit Contexts](#branch-and-commit-contexts)", "completion": ""}
{"prompt": "- [Pull/Merge Request Context](#pullmerge-request-context)", "completion": ""}
{"prompt": "Please note, these contexts are supported for GitHub, GitLab, and Bitbucket. This also includes Self-Hosted installations of these git providers, where available.", "completion": ""}
{"prompt": "Q: How do I repository context?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.io/#https://github.com/gitpod-io/website", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The branch and commit contexts are very similar to the repository context described above. When you open a new workspace for a given branch or commit, Gitpod automatically checks out that branch or commit, allowing you to browse the repository on that branch or at the time of the given commit.", "completion": ""}
{"prompt": "An example URL for the branch context is:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "An example URL for the commit SHA context is:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I issue context?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<your-username>/<issue-title>-<issue-number>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod.io/#https://github.com/gitpod-io/website/issues/470", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Note:** Currently pull-request based context URLs are only supported by [GitHub authentication](https://www.gitpod.io/docs/configure/authentication/github) as a [Gitpod authentication method](https://www.gitpod.io/docs/configure/authentication).", "completion": ""}
{"prompt": "When Gitpod recognizes a pull or merge request context, it knows you most likely have one of two intentions:", "completion": ""}
{"prompt": "- As a reviewer, provide PR/MR feedback", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "1. Opens the PR/MR review panel where you can see and contribute to existing conversations", "completion": ""}
{"prompt": "1. Enables you to leave comments right within individual files (yep, no need to switch between the code and the PR/MR in your browser)", "completion": ""}
{"prompt": "In addition, Gitpod lets you merge a PR/MR. Once merged, you close the browser tab and move on to your next task - in a new, ephemeral developer environment \ud83c\udf89.", "completion": ""}
{"prompt": "An example URL for the pull/merge request context is:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: learn-gitpod", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I .gitpod.yml?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: tasks:", "completion": ""}
{"prompt": "before: yarn global add express", "completion": ""}
{"prompt": "command: yarn build", "completion": ""}
{"prompt": "Q: How do I ports to expose on workspace startup?", "completion": ""}
{"prompt": "- port: 3000", "completion": ""}
{"prompt": "name: Website", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "To see a full reference of all available properties, please refer to the [`.gitpod.yml reference`](/docs/references/gitpod-yml) page.", "completion": ""}
{"prompt": "`youtube: E95oV_iqUtI`", "completion": ""}
{"prompt": "Q: How do I how to provide the .gitpod.yml config file?", "completion": ""}
{"prompt": "version your workspace configuration together with your code. If, for example, you need to go back to", "completion": ""}
{"prompt": "bit of configuration is part of your codebase.", "completion": ""}
{"prompt": "Q: How do I generate your gitpod config file?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp init", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To test your `.gitpod.yml` file, you need to commit and push the file to your repository and open a new workspace either by using the [Gitpod extension](/docs/configure/user-settings/browser-extension#browser-extension) or prefixing your repo URL with `https://gitpod.io/#`.", "completion": ""}
{"prompt": "If you don't want to have multiple commits as you're testing and making changes to your `.gitpod.yml`, you can make changes from a new branch.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: learn-gitpod", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I learn gitpod?", "completion": ""}
{"prompt": "- [The Life of a workspace](/docs/configure/workspaces/workspace-lifecycle)", "completion": ""}
{"prompt": "- [.gitpod.yml](/docs/introduction/learn-gitpod/gitpod-yaml)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: learn-gitpod", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I one workspace per task?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Fix a bug", "completion": ""}
{"prompt": "- Pair-program with a team member", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: A Gitpod workspace is similar to your local developer environment, except for two key differentiators:", "completion": ""}
{"prompt": "1. It is configured as code", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Your project's `.gitpod.yml` and optional `.gitpod.Dockerfile` files control what tools will be available in your Gitpod workspace. Both files are version-controlled and let you monitor changes to the developer environment over time. There is no longer a need to `@channel` in your team's communication software to tell everyone to upgrade their version of Node.js, only to find out that some people were on vacation and didn't see the message.", "completion": ""}
{"prompt": "Q: How do I ephemeral vs. long-lived?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Compatibility", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import CompatibilityMatrix from '$lib/components/docs/compatibility-matrix.svelte';", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I compatibility?", "completion": ""}
{"prompt": ">", "completion": ""}
{"prompt": "> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.", "completion": ""}
{"prompt": "This page shows you what components and services Gitpod is and is not compatible with. It is aimed at both individual developers that use Gitpod as well as admins that install and maintain a [Gitpod Self-Hosted](/docs/configure/self-hosted/latest) instance. You can filter the table to show only what is relevant to you.", "completion": ""}
{"prompt": "> **Note:** It is required to have at least one of each category. SaaS users can ignore the self-hosted specific categories (see filter)", "completion": ""}
{"prompt": "<CompatibilityMatrix />", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: gp-cli", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I gitpod cli?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Command line interface for Gitpod", "completion": ""}
{"prompt": "Usage:", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "docs                Open Gitpod Documentation in default browser", "completion": ""}
{"prompt": "help                Help about any command", "completion": ""}
{"prompt": "init                Create a Gitpod configuration for this project.", "completion": ""}
{"prompt": "ports               Interact with workspace ports.", "completion": ""}
{"prompt": "rebuild             Re-builds the workspace image (useful to debug a workspace custom image)", "completion": ""}
{"prompt": "stop                Stop current workspace", "completion": ""}
{"prompt": "sync-done           Notifies the corresponding gp sync-await calls that this event has happened", "completion": ""}
{"prompt": "timeout             Interact with workspace timeout configuration", "completion": ""}
{"prompt": "url                 Prints the URL of this workspace", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "-h, --help   help for gp", "completion": ""}
{"prompt": "Use \"gp [command] --help\" for more information about a command.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod workspaces can be configured - see [Configuring Workspaces](/docs/configure) for more details. `gp init` generates a default `.gitpod.yml` file. You can customize it to match your requirements.", "completion": ""}
{"prompt": "Alternatively, `gp init -i` is an interactive guide which helps create the `.gitpod.yml` configuration file based on a few questions you answer.", "completion": ""}
{"prompt": "Example to start a interactive guide of `.gitpod.yml` configuration file:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I open?", "completion": ""}
{"prompt": "We also added common aliases for `gp open`: `code` and `open`.", "completion": ""}
{"prompt": "Example to open the `README.md` file in the current directory:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I preview?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp preview $(gp url 3000) --external", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod workspaces can expose services to the internet. `gp url` provides the URL which points to a service served from a Gitpod workspace. For example `gp url 8080` prints the URL which points to the service listening on port 8080 in this current workspace.", "completion": ""}
{"prompt": "You can combine the `preview` and the `url` command to open a certain path instead of the default URL.", "completion": ""}
{"prompt": "For instance:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "If you put this into the `.gitpod.yml` to open the a certain page on startup, make sure you [ignore the default action](/docs/configure/workspaces/ports) when the port opens.", "completion": ""}
{"prompt": "Q: How do I env?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp env", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In situations where you work with multiple terminals and one depends on a task in another terminal to complete, `gp sync-await <name>` waits until you call `gp sync-done <name>` in another terminal.", "completion": ""}
{"prompt": "See [Start Tasks](/docs/configure/workspaces/tasks#wait-for-commands-to-complete) for a real-world example.", "completion": ""}
{"prompt": "Q: How do I sync-done?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Terminal 2: You use `gp sync-await build && npm run start-database` to wait for the build to complete before you start a database", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: For sharing a complete clone of a workspace with others, `gp snapshot` is basically the CLI method for getting a snapshot URL. To learn more about snapshots, see [Collaboration & Sharing of Workspaces](/docs/configure/workspaces/collaboration#sharing-snapshots)", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I stop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp stop", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Programmatically view and interact with workspace tasks as defined in the project's [.gitpod.yml](/docs/references/gitpod-yml). Useful when using the command line, such as ssh'ing into a workspace or after accidentally losing view of a terminal and it's output.", "completion": ""}
{"prompt": "Q: How do I list?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp tasks list", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Creates a connection from a user terminal to a given workspace's task terminal. The session is interactive. Once attached, both stdin and stdout are streamed between the user and the remote terminal. Allowing the user to run commands directly in the task terminal.", "completion": ""}
{"prompt": "Run without arguments to get a selection prompt. When only one task is running, attach will skip the prompt and automatically connect.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Alternatively, specify the `Terminal ID` that you can see with `gp tasks list`:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I stop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp tasks stop", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp tasks stop <id>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp tasks stop --all", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Interact with workspace timeout configuration. You can learn more in [Life of a Workspace](/docs/configure/workspaces/workspace-lifecycle).", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "> **Note:** You can only have one workspace with extended timeout at a time.", "completion": ""}
{"prompt": "The default timeout, and the ability to extend a workspace timeout depends on your [billing configuration](/docs/configure/billing).", "completion": ""}
{"prompt": "Q: How do I set?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Technically, Following ones are also valid:", "completion": ""}
{"prompt": "* `gp timeout set 300m`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp timeout set 300m", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Shows the current workspace's timeout.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I extend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp timeout extend", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Displays information about the current [workspace](/docs/configure/workspaces) (such as the workspace ID and URL) and also the [workspace class](/docs/configure/workspaces/workspace-classes).", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Use `gp info --json` to get the output in JSON format for programmatic use in (e.g. in shell scripts).", "completion": ""}
{"prompt": "Q: How do I ports?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Outputs a table-formatted list of ports along with their status, URL, name and description.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Use `gp ports list --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.", "completion": ""}
{"prompt": "Q: How do I expose?", "completion": ""}
{"prompt": "Sometimes it is not possible to make a server listen on `0.0.0.0`, e.g. because it is not your code and there are simply no means of configuration.", "completion": ""}
{"prompt": "In that case, `gp ports expose <port>` can be used to forward all traffic form a socket listing on all network interfaces to your process listening on localhost only.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I await?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp ports await 3000 && gp preview $(gp url 3000)/my/path/index.html", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can change a port's visibility to make it only available for **users with workspace access** (`private`) or **everyone who knows the port's URL** (`public`). A port's default visibility is always `private`, unless configured differently from within [`.gitpod.yml`](/docs/references/gitpod-yml#portsnvisibility).", "completion": ""}
{"prompt": "Here's an example which will make port `3000` public:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Here's an example which will make port `3000` private:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I top?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp top", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Opens the Gitpod documentation in a new browser tab.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I rebuild?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp rebuild", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Gitpod public API", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import APIExample from \"$lib/components/docs/api-example.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > Access Tokens are currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/10798).", "completion": ""}
{"prompt": "The Gitpod Public API grants direct access to Gitpod data for use cases such as integration into other 3rd party applications.", "completion": ""}
{"prompt": "Q: How do I authentication?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I api reference?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I list all workspaces?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/ListWorkspaces' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"goExample\">", "completion": ""}
{"prompt": "```go", "completion": ""}
{"prompt": "token := \"<YOUR_ACCESS_TOKEN>\"", "completion": ""}
{"prompt": "gitpod, err := client.New(client.WithCredentials(token))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "response, err := gitpod.Workspaces.ListWorkspaces(context.Background(), connect.NewRequest(&v1.ListWorkspacesRequest{}))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to list workspaces %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stdout, \"Retrieved workspaces %v\", response.Msg.GetResult())", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"result\": [", "completion": ""}
{"prompt": "\"workspaceId\": \"<WORKSPACE_ID>\",", "completion": ""}
{"prompt": "\"context\": {", "completion": ""}
{"prompt": "\"git\": {", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "\"description\": \"gitpod-io/empty \",", "completion": ""}
{"prompt": "\"instance\": {", "completion": ""}
{"prompt": "\"workspaceId\": \"<WORKSPACE_ID>\",", "completion": ""}
{"prompt": "\"status\": {", "completion": ""}
{"prompt": "\"phase\": \"PHASE_STOPPED\",", "completion": ""}
{"prompt": "\"url\": \"https://<WORKSPACE_ID>.ws-us79.gitpod.io\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Request Parameters**:", "completion": ""}
{"prompt": "|         Parameter          |                Description                | Type  | Required |", "completion": ""}
{"prompt": "| `pageSize` (_Coming Soon_) | It is maximum number of results we expect | Int32 |  false   |", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Response Parameters**:", "completion": ""}
{"prompt": "|    Parameter    |                                                       Description                                                        |  Type  |", "completion": ""}
{"prompt": "| `nextPageToken` |                                                     Next Page Token                                                      | string |", "completion": ""}
{"prompt": "|    `ownerId`    |                                                         User Id                                                          | string |", "completion": ""}
{"prompt": "|    `context`    |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Returns a single workspace.", "completion": ""}
{"prompt": "<APIExample id=\"api-example\">", "completion": ""}
{"prompt": "<div slot=\"curlExample\">", "completion": ""}
{"prompt": "```bash title=\"cURL\"", "completion": ""}
{"prompt": "-H 'content-type: application/json' \\", "completion": ""}
{"prompt": "--data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "func ExampleGetWorkspace() {", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "if err != nil {", "completion": ""}
{"prompt": "return", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "WorkspaceId: \"<WORKSPACE_ID>\",", "completion": ""}
{"prompt": "if err != nil {", "completion": ""}
{"prompt": "return", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"workspaceId\": \"<WORKSPACE_ID>\",", "completion": ""}
{"prompt": "\"context\": {", "completion": ""}
{"prompt": "\"git\": {", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "\"description\": \"gitpod-io/empty \",", "completion": ""}
{"prompt": "\"instance\": {", "completion": ""}
{"prompt": "\"workspaceId\": \"<WORKSPACE_ID>\",", "completion": ""}
{"prompt": "\"status\": {", "completion": ""}
{"prompt": "\"phase\": \"PHASE_RUNNING\",", "completion": ""}
{"prompt": "\"firstUserActivity\": \"2022-12-22T07:43:21.732Z\"", "completion": ""}
{"prompt": "\"url\": \"https://<WORKSPACE_ID>.ws-us80.gitpod.io\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-----------: | :----------: | :----: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-----------: | :----------------------------------------------------------------------------------------------------------------------: | :----: |", "completion": ""}
{"prompt": "|   `ownerId`   |                                                         User Id                                                          | string |", "completion": ""}
{"prompt": "|   `context`   |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-----------: | :----------: | :----: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-------: | :---------: | :----: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Creates a new workspace from any context URL (Repository, Issues, Pull Requests, Files, etc.)", "completion": ""}
{"prompt": "Q: How do I start workspace (_coming soon_)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-----------: | :-----------------------------------: | :----: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :------------: | :--------------------------: | :----: |", "completion": ""}
{"prompt": "| `workspaceUrl` | URL of the started workspace | string |", "completion": ""}
{"prompt": "Q: How do I stop workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/StopWorkspace' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<!-- Uncomment following, if we get some better response from API endpoint-->", "completion": ""}
{"prompt": "<!-- <div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div> -->", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "**Request Parameters**:", "completion": ""}
{"prompt": "|   Parameter   |              Description              |  Type  | Required |", "completion": ""}
{"prompt": "| `workspaceId` | Workspace Id that needs to be stopped | string |   true   |", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Response**: It stops the requested workspace.", "completion": ""}
{"prompt": "Q: How do I delete workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/DeleteWorkspace' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<!-- Uncomment following, if we get some better response from API endpoint-->", "completion": ""}
{"prompt": "<!-- <div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div> -->", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "**Request Parameters**:", "completion": ""}
{"prompt": "|   Parameter   |              Description              |  Type  | Required |", "completion": ""}
{"prompt": "| `workspaceId` | Workspace Id that needs to be deleted | string |   true   |", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Response**: It deletes the requested workspace.", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "Q: How do I resource: teams?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Creates a team.", "completion": ""}
{"prompt": "<APIExample id=\"api-example\">", "completion": ""}
{"prompt": "<div slot=\"curlExample\">", "completion": ""}
{"prompt": "```bash title=\"cURL\"", "completion": ""}
{"prompt": "-H 'content-type: application/json' \\", "completion": ""}
{"prompt": "--data '{\"name\":\"<TEAM_NAME>\"}'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"id\": \"<TEAM_ID>\",", "completion": ""}
{"prompt": "\"members\": [", "completion": ""}
{"prompt": "\"userId\": \"<USER_ID>\",", "completion": ""}
{"prompt": "\"memberSince\": \"2022-12-22T07:53:52.210Z\",", "completion": ""}
{"prompt": "\"fullName\": \"<USER_FULL_NAME>\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-------: | :---------: | :----: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :------------: | :--------------------------: | :----: |", "completion": ""}
{"prompt": "|     `name`     |         Name of team         | string |", "completion": ""}
{"prompt": "|   `members`    |  List of members in a team   | array  |", "completion": ""}
{"prompt": "Q: How do I get a team?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/GetTeam' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"goExample\">", "completion": ""}
{"prompt": "```go", "completion": ""}
{"prompt": "token := \"<YOUR_ACCESS_TOKEN>\"", "completion": ""}
{"prompt": "gitpod, err := client.New(client.WithCredentials(token))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "response, err := gitpod.Teams.GetTeam(context.Background(), connect.NewRequest(&v1.GetTeamRequest{", "completion": ""}
{"prompt": "}))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to get team %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stdout, \"Retrieved team %v\", response.Msg.GetTeam())", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"team\": {", "completion": ""}
{"prompt": "\"name\": \"<TEAM_NAME>\",", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"role\": \"TEAM_ROLE_MEMBER\",", "completion": ""}
{"prompt": "\"avatarUrl\": \"<USER_AVATAR_URL>\",", "completion": ""}
{"prompt": "\"primaryEmail\": \"<USER_EMAIL>\"", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"role\": \"TEAM_ROLE_OWNER\",", "completion": ""}
{"prompt": "\"avatarUrl\": \"<USER_AVATAR_URL>\",", "completion": ""}
{"prompt": "\"primaryEmail\": \"<USER_EMAIL>\"", "completion": ""}
{"prompt": "],", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Request Parameters**:", "completion": ""}
{"prompt": "| Parameter | Description |  Type  | Required |", "completion": ""}
{"prompt": "| `teamId`  |   Team Id   | string |   true   |", "completion": ""}
{"prompt": "**Response Parameters**:", "completion": ""}
{"prompt": "|   Parameter    |         Description          |  Type  |", "completion": ""}
{"prompt": "|      `id`      |         UUID of Team         | string |", "completion": ""}
{"prompt": "| `creationTime` |    Creation time of team     | string |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Lists all the teams belongs to the authenticated user.", "completion": ""}
{"prompt": "<APIExample id=\"api-example\">", "completion": ""}
{"prompt": "<div slot=\"curlExample\">", "completion": ""}
{"prompt": "```bash title=\"cURL\"", "completion": ""}
{"prompt": "-H 'content-type: application/json' \\", "completion": ""}
{"prompt": "--data '{}'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "func ExampleListTeams() {", "completion": ""}
{"prompt": "gitpod, err := client.New(client.WithCredentials(token))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "defer cancel()", "completion": ""}
{"prompt": "if err != nil {", "completion": ""}
{"prompt": "return", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"name\": \"<TEAM_NAME>\",", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"role\": \"TEAM_ROLE_OWNER\",", "completion": ""}
{"prompt": "\"avatarUrl\": \"<USER_AVATAR_URL>\",", "completion": ""}
{"prompt": "\"primaryEmail\": \"<USER_EMAIL>\"", "completion": ""}
{"prompt": "],", "completion": ""}
{"prompt": "},", "completion": ""}
{"prompt": "\"id\": \"<TEAM_ID>\",", "completion": ""}
{"prompt": "\"members\": [", "completion": ""}
{"prompt": "\"userId\": \"<USER_ID>\",", "completion": ""}
{"prompt": "\"memberSince\": \"2022-09-25T15:41:41.352Z\",", "completion": ""}
{"prompt": "\"fullName\": \"<USER_FULL_NAME>\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }", "completion": ""}
{"prompt": "]", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :--------: | :---------------------------------------: | :---: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-------: | :---------------------: | :---: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Joins a team.", "completion": ""}
{"prompt": "<APIExample id=\"api-example\">", "completion": ""}
{"prompt": "<div slot=\"curlExample\">", "completion": ""}
{"prompt": "```bash title=\"cURL\"", "completion": ""}
{"prompt": "-H 'content-type: application/json' \\", "completion": ""}
{"prompt": "--data '{\"invitationId\":\"<TEAM_INVITATION_ID>\"}'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{", "completion": ""}
{"prompt": "\"id\": \"<TEAM_ID>\",", "completion": ""}
{"prompt": "\"members\": [", "completion": ""}
{"prompt": "\"userId\": \"<USER_ID>\",", "completion": ""}
{"prompt": "\"memberSince\": \"2022-12-22T07:53:52.210Z\",", "completion": ""}
{"prompt": "\"fullName\": \"<USER_FULL_NAME>\",", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :------------: | :----------------: | :----: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :------------: | :--------------------------: | :----: |", "completion": ""}
{"prompt": "|     `name`     |         Name of team         | string |", "completion": ""}
{"prompt": "|   `members`    |  List of members in a team   | array  |", "completion": ""}
{"prompt": "Q: How do I reset team invitation?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ResetTeamInvitation' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"teamInvitation\": {", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Request Parameters**:", "completion": ""}
{"prompt": "| Parameter |    Description     |  Type  | Required |", "completion": ""}
{"prompt": "| `teamId`  | Team Invitation ID | string |   true   |", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Response Parameters**:", "completion": ""}
{"prompt": "|   Parameter    |        Description        |  Type  |", "completion": ""}
{"prompt": "| `invitationId` | new Invitation Id of Team | string |", "completion": ""}
{"prompt": "Q: How do I update a team member role?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/UpdateTeamMember' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"teamMember\": {", "completion": ""}
{"prompt": "\"role\": \"TEAM_ROLE_OWNER\"", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-------: | :------------------------------------------------------------: | :----: | :------: |", "completion": ""}
{"prompt": "| `userId`  |             User ID of a team member being updated             | string |   true   |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-------: | :--------------------: | :----: |", "completion": ""}
{"prompt": "|  `role`   |    New role of team    | string |", "completion": ""}
{"prompt": "Q: How do I delete team member?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "curl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeamMember' \\", "completion": ""}
{"prompt": "-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "<!-- Uncomment following, if we get some better response from API endpoint-->", "completion": ""}
{"prompt": "<!-- <div slot=\"responseExample\">", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "</div> -->", "completion": ""}
{"prompt": "</APIExample>", "completion": ""}
{"prompt": "<br>", "completion": ""}
{"prompt": "**Request Parameters**:", "completion": ""}
{"prompt": "|   Parameter    |           Description           |  Type  | Required |", "completion": ""}
{"prompt": "|    `teamId`    |            Team name            | string |   true   |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Deletes a team.", "completion": ""}
{"prompt": "<APIExample id=\"api-example\">", "completion": ""}
{"prompt": "<div slot=\"curlExample\">", "completion": ""}
{"prompt": "```bash title=\"cURL\"", "completion": ""}
{"prompt": "-H 'content-type: application/json' \\", "completion": ""}
{"prompt": "--data '{\"teamId\":\"<TEAM_ID>\"}'", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "{}", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| :-------: | :---------: | :----: | :------: |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I go?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "// Download the helper library using go get -u github.com/gitpod-io/gitpod/components/public-api/go", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "\"context\"", "completion": ""}
{"prompt": "\"os\"", "completion": ""}
{"prompt": "\"github.com/bufbuild/connect-go\"", "completion": ""}
{"prompt": "v1 \"github.com/gitpod-io/gitpod/components/public-api/go/experimental/v1\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "token := \"<YOUR_ACCESS_TOKEN>\"", "completion": ""}
{"prompt": "gitpod, err := client.New(client.WithCredentials(token))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "response, err := gitpod.Teams.ListTeams(context.Background(), connect.NewRequest(&v1.ListTeamsRequest{}))", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "fmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I typescript?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: .gitpod.yml", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The `.gitpod.yml` file at the root of your project is where you tell Gitpod how to prepare & build your project, start development servers and configure continuous [prebuilds](/docs/configure/projects/prebuilds) for GitHub.", "completion": ""}
{"prompt": "Below is a full reference of all available properties. To see the underlying schema, please refer to [`gitpod-io/gitpod`](https://github.com/gitpod-io/gitpod/blob/main/components/gitpod-protocol/data/gitpod-schema.json) in the [gitpod-io/gitpod](https://github.com/gitpod-io/gitpod) repository.", "completion": ""}
{"prompt": "- [.gitpod.yml](#.gitpod.yml)", "completion": ""}
{"prompt": "- [`checkoutLocation`](#checkoutlocation)", "completion": ""}
{"prompt": "- [`gitConfig`](#gitconfig)", "completion": ""}
{"prompt": "- [`prebuilds.addBadge`](#prebuildsaddbadge)", "completion": ""}
{"prompt": "- [`prebuilds.addComment`](#prebuildsaddcomment)", "completion": ""}
{"prompt": "- [`prebuilds.branches`](#prebuildsbranches)", "completion": ""}
{"prompt": "- [`prebuilds.pullRequests`](#prebuildspullrequests)", "completion": ""}
{"prompt": "- [`image`](#image)", "completion": ""}
{"prompt": "- [`image.context`](#imagecontext)", "completion": ""}
{"prompt": "- [`jetbrains.plugins`](#jetbrainsplugins)", "completion": ""}
{"prompt": "- [`jetbrains.[product].plugins`](#jetbrainsproductplugins)", "completion": ""}
{"prompt": "- [`jetbrains.[product].vmoptions`](#jetbrainsproductvmoptions)", "completion": ""}
{"prompt": "- [`ports[n].name`](#portsnname)", "completion": ""}
{"prompt": "- [`ports[n].onOpen`](#portsnonopen)", "completion": ""}
{"prompt": "- [`ports[n].visibility`](#portsnvisibility)", "completion": ""}
{"prompt": "- [`tasks[n].before`](#tasksnbefore)", "completion": ""}
{"prompt": "- [`tasks[n].env`](#tasksnenv)", "completion": ""}
{"prompt": "- [`tasks[n].name`](#tasksnname)", "completion": ""}
{"prompt": "- [`tasks[n].openMode`](#tasksnopenmode)", "completion": ""}
{"prompt": "- [`mainConfiguration`](#mainconfiguration)", "completion": ""}
{"prompt": "- [`vscode.extensions`](#vscodeextensions)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > additionalRepositories is currently in [Beta](/docs/help/public-roadmap/release-cycle). [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).", "completion": ""}
{"prompt": "Defines additional source control repositories to clone and where the repository is cloned under `/workspaces`", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `object` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Demo**", "completion": ""}
{"prompt": "<a href=\"https://gitpod.io/#https://github.com/gitpod-io/demo-multi-repo-frontend\"><img src=\"https://gitpod-staging.com/button/open-in-gitpod.svg\"/></a>", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- url: https://github.com/gitpod-io/demo-multi-repo-backend", "completion": ""}
{"prompt": "# by default the location defaults to the repository name.", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "When the above configuration is defined then the following additional steps happen when Gitpod workspace is started:", "completion": ""}
{"prompt": "1. If you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn\u2019t exist Gitpod checks out the default branch.", "completion": ""}
{"prompt": "1. The contents of `https://github.com/gitpod-io/demo-multi-repo-backend` is cloned to `/workspaces/backend`", "completion": ""}
{"prompt": "After all of the source control repositories have been cloned then the `before`, `init` and `command` [tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) are executed as per normal.", "completion": ""}
{"prompt": "If you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory to the use configured or default `checkoutLocation` location using the `before` task.", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "Q: How do I example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend?", "completion": ""}
{"prompt": "- url: https://github.com/gitpod-io/demo-multi-repo-backend", "completion": ""}
{"prompt": "# by default the location defaults to the repository name.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- name: backend", "completion": ""}
{"prompt": "# which is configured above as `/workspaces/backend`", "completion": ""}
{"prompt": "cd ../backend", "completion": ""}
{"prompt": "echo npm install", "completion": ""}
{"prompt": "echo npm run dev", "completion": ""}
{"prompt": "# changing of working directory is not required as these tasks will", "completion": ""}
{"prompt": "- name: frontend", "completion": ""}
{"prompt": "echo npm install", "completion": ""}
{"prompt": "command: |", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I `checkoutlocation`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | ------------ |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "checkoutLocation: \"go/src/github.com/demo-apps/go-gin-app\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define workspace core dump behavior.", "completion": ""}
{"prompt": "For most cases, setting the `coreDump` property is not required. However, it can be a valuable feature to debug C++, or when debugging add-ons in Rust, Python, or node.js.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `object` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "enabled: true", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "coreDump:", "completion": ""}
{"prompt": "softLimit: <bytes>", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "For more details, please see the [Linux man page for `getrlimit`](https://man7.org/linux/man-pages/man2/getrlimit.2.html)", "completion": ""}
{"prompt": "Q: How do I `gitconfig`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitConfig:", "completion": ""}
{"prompt": "core.autocrlf: input", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Configure the [GitHub Gitpod](https://github.com/apps/gitpod-io) app. At this time, the following configuration is used to configure [continuous prebuilds](/docs/configure/projects/prebuilds) for GitHub repositories.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `object` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "branches: true", "completion": ""}
{"prompt": "pullRequestsFromForks: true", "completion": ""}
{"prompt": "addComment: false", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I `prebuilds.addbadge`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------- | ------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Configure whether Gitpod registers itself as a status check to pull requests - much like a continuous integration system would do. By default a failing prebuild would not make the check fail. Set `prevent-merge-on-error` to block PR merging when prebuilds failed.", "completion": ""}
{"prompt": "To learn more about status checks, please see the GitHub documentation [about status checks](https://docs.github.com/en/github/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks).", "completion": ""}
{"prompt": "![Gitpod status check in a pull request](../../../static/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-check.png)", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default                  | Values                                    |", "completion": ""}
{"prompt": "| `string` | `prevent-merge-on-error` | `true`, `false`, `prevent-merge-on-error` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `prebuilds.addcomment`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------- | ------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Deprecated.", "completion": ""}
{"prompt": "Q: How do I `prebuilds.branches`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------- | ------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define whether Gitpod creates prebuilds for the default branch.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type      | Default |", "completion": ""}
{"prompt": "| `boolean` | `true`  |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `prebuilds.pullrequests`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| --------- | ------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define whether Gitpod creates prebuilds for pull requests from forks.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type      | Default |", "completion": ""}
{"prompt": "| `boolean` | `false` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `image`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------------------- | ----------------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image: ubuntu:latest", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "image:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "_With an optional context_", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "file: .gitpod.Dockerfile", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I `image.file`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Optionally, you can set the `image.context`. This is useful when you want to copy files into the Docker image. The [Docker docs](https://docs.docker.com/engine/reference/builder/#usage) describe this in more detail.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `string` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `jetbrains`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains plugin support (via gitpod.yml) is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "Define a list of plugins which should be installed for all compatible JetBrains IDEs when starting a workspace. To find the plugin identifier, from the [JetBrains Marketplace](https://plugins.jetbrains.com), find the desired plugin, open the 'Versions' tab, select any version and copy the 'Plugin ID' (like `${publisher}.${name}`).", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type    | Default   |", "completion": ""}
{"prompt": "| `array` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `jetbrains.[product]`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `goland`", "completion": ""}
{"prompt": "- `phpstorm`", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `object` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `jetbrains.[product].plugins`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "plugins:", "completion": ""}
{"prompt": "- izhangzhihao.rainbow.brackets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains prebuilds support (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "Define whether Gitpod enables prebuilds for a specific JetBrains IDE.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `object` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "intellij:", "completion": ""}
{"prompt": "version: stable", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | -------- | -------------------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > Configuration of JVM options (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).", "completion": ""}
{"prompt": "Configure JVM options for a specific JetBrains IDE.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `string` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "intellij:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I `ports`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "ports:", "completion": ""}
{"prompt": "port: 3000", "completion": ""}
{"prompt": "- name: VNC", "completion": ""}
{"prompt": "port: 6080", "completion": ""}
{"prompt": "- name: Server", "completion": ""}
{"prompt": "onOpen: ignore", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define a name for the port, which will be shown as a column in the output of `gp ports list` and in the `Port` column inside of the ports list in VS Code Browser and Desktop.", "completion": ""}
{"prompt": "[More detail](/docs/configure/workspaces/ports#specifying-port-names--descriptions)", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `string` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `ports[n].description`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define what to do when Gitpod detects a given port is being listened on.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   | Values                                                                  |", "completion": ""}
{"prompt": "| `string` | `<empty>` | `open-browser`,<br><br>`open-preview`,<br><br>`notify`,<br><br>`ignore` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Please note:** For JetBrains IDEs connected to Gitpod via [JetBrains Gateway](/docs/integrations/jetbrains-gateway) `open-preview` will behave exactly the same as `open-browser`, as there is no functionality for a web preview in the JetBrains IDE.", "completion": ""}
{"prompt": "Q: How do I `ports[n].port`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------------------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define whether to expose the port publicly or keep it private.", "completion": ""}
{"prompt": "A public port allows you to share a URL for a given port with team members, for example if you want to get their feedback on a new feature you develop.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   | Values                     |", "completion": ""}
{"prompt": "| `string` | `private` | `private`,<br><br>`public` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `tasks`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| ------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "tasks:", "completion": ""}
{"prompt": "init: npm install", "completion": ""}
{"prompt": "- name: Database", "completion": ""}
{"prompt": "command: npm start-db", "completion": ""}
{"prompt": "DB_HOST: localhost:3306", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I `tasks[n].before`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.", "completion": ""}
{"prompt": "Learn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `string` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `tasks[n].env`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: A shell command to run between `before` and the main `command`.", "completion": ""}
{"prompt": "This task is executed only once. When you start a workspace that does not have a [prebuild](/docs/configure/projects/prebuilds), `init` is executed at workspace start. When you start a workspace that has a prebuild, `init` executes as part of the prebuild, but does NOT execute again at workspace start.", "completion": ""}
{"prompt": "This task is expected to terminate. If it fails, the `command` property will not be executed.", "completion": ""}
{"prompt": "Learn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `string` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `tasks[n].name`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Deprecated. This does not have an impact in VS Code.", "completion": ""}
{"prompt": "Q: How do I `tasks[n].openmode`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- | --------------------------------------------------------------------------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Deprecated. Please use the [`init`](#tasksninit) task instead.", "completion": ""}
{"prompt": "Q: How do I `mainconfiguration`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "mainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontend", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Configure the VS Code editor.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default   |", "completion": ""}
{"prompt": "| `object` | `<empty>` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I `vscode.extensions`?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "| -------- | --------- |", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- svelte.svelte-vscode", "completion": ""}
{"prompt": "- https://example.com/abc/releases/extension-0.26.0.vsix", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Define which path Gitpod considers the project's workspace directory, relative to `/workspace`.", "completion": ""}
{"prompt": "In most cases, this is not needed. If you work on an older Go project, please see the [Go Languages](/docs/introduction/languages/go) page for more details.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Type     | Default      |", "completion": ""}
{"prompt": "| `string` | `/workspace` |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "**Example**", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: ides-and-editors", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<!--", "completion": ""}
{"prompt": "Edit this file instead and run `yarn generate:jb`to apply.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "Q: How do I getting started?", "completion": ""}
{"prompt": "2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.", "completion": ""}
{"prompt": "4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Updating Gitpod IDE preferences to {title}</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "**Important:** You must restart any started workspaces for your IDE preferences to take effect.", "completion": ""}
{"prompt": "Q: How do I install plugins?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).", "completion": ""}
{"prompt": "Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).", "completion": ""}
{"prompt": "To install a plugin on **JetBrains Client** follow these steps:", "completion": ""}
{"prompt": "- In **JetBrains Client** open the IDE settings and select **Plugins**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I install on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can install a plugin only for **your current workspace** following these steps:", "completion": ""}
{"prompt": "- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I preconfigure for repository?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Each workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "clion:", "completion": ""}
{"prompt": "- zielu.gittoolbox", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:", "completion": ""}
{"prompt": "- Find a page of the required plugin.", "completion": ""}
{"prompt": "- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.", "completion": ""}
{"prompt": "Q: How do I install for your user?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).", "completion": ""}
{"prompt": "You can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "clion:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "For more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/clion/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.", "completion": ""}
{"prompt": "Q: How do I configure ide settings?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: IDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Settings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>{title} backend settings have `On Host` label.</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Some IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:", "completion": ""}
{"prompt": "**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.", "completion": ""}
{"prompt": "**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-/<your-project-name>/options`", "completion": ""}
{"prompt": "**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.", "completion": ""}
{"prompt": "**Include relevant IDE settings in your Workspace Image**", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/clion/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "For any further changes to your IDE settings, you will need to follow the above steps again.", "completion": ""}
{"prompt": "> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.", "completion": ""}
{"prompt": "Q: How do I configure ide settings per user?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "When you open the project {title} starts indexing to load modules and", "completion": ""}
{"prompt": "Depending on the size of your project indexing speed can vary significantly.", "completion": ""}
{"prompt": "You can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/clion/performance-tuning-tips.html).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "clion:", "completion": ""}
{"prompt": "version: stable", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Users can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.", "completion": ""}
{"prompt": "Q: How do I workspace performance?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Resource consumption in adjacent containers running on the workspace node.", "completion": ""}
{"prompt": "In your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.", "completion": ""}
{"prompt": "The remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.", "completion": ""}
{"prompt": "> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.", "completion": ""}
{"prompt": "![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Debugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:", "completion": ""}
{"prompt": "1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - [What should I do if JetBrains Gateway and Gitpod aren\u2019t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: ides-and-editors", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I command line (ssh)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: There are two ways to access a workspace via SSH using an SSH key or an Access Token.", "completion": ""}
{"prompt": "![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Note:** You must upload a public key to Gitpod before you can access your workspace using an SSH key. See [configure SSH](/docs/configure/user-settings/ssh) for more.", "completion": ""}
{"prompt": "To access a workspace using an SSH Key:", "completion": ""}
{"prompt": "1. Visit [your workspace list](https://gitpod.io/workspaces) in Gitpod", "completion": ""}
{"prompt": "3. Select \"connect via SSH\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-light-theme.png)", "completion": ""}
{"prompt": "<br/>", "completion": ""}
{"prompt": "![SSH Key access via modal](/images/docs/ssh-key-modal-dark-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)", "completion": ""}
{"prompt": "Q: How do I access token ssh?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. View a running Gitpod workspace and click the more actions menu", "completion": ""}
{"prompt": "4. Navigate to the \"Access Token\" tab", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-light-theme.png)", "completion": ""}
{"prompt": "<br/>", "completion": ""}
{"prompt": "![SSH via access token from the workspace list](/images/docs/ssh-accesss-modal-dark-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)", "completion": ""}
{"prompt": "Q: How do I ssh via local companion?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: FAQs", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I is there a limit of ide/editor connections to gitpod??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: VS Code in the browser in Gitpod uses a fork of [VS Code](https://github.com/microsoft/vscode) called [openvscode-server](https://github.com/gitpod-io/openvscode-server). Gitpod actively monitors VS Code's release cycle, and releases the latest version of VS Code shortly after the upstream repository is updated. You can find more information about which version of VS Code is running in the browser by navigating to \"Help > About\" from a running Gitpod workspace.", "completion": ""}
{"prompt": "Q: How do I does gitpod vs code settings sync work with other products (e.g. codespaces)??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. When installing an extension in Gitpod using the `Install (Do Not Sync)` option.", "completion": ""}
{"prompt": "3. Extensions manually installed from a `vsix` file", "completion": ""}
{"prompt": "Q: How do I can i use both a desktop ide and a browser editor in gitpod??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: There are many supported ways to edit your code in Gitpod, there is no preferred experience. Gitpod is intended to be flexible to allow you and your team to use the tools you are most familiar and comfortable with. You can edit code in Gitpod using:", "completion": ""}
{"prompt": "1. [JetBrains IDE's](/docs/references/ides-and-editors) via [JetBrains Gateway](/docs/integrations/jetbrains-gateway)", "completion": ""}
{"prompt": "3. [Command-line](/docs/references/ides-and-editors/command-line) based editors such as Vim", "completion": ""}
{"prompt": "Please see the [IDEs & editors](/docs/references/ides-and-editors) documentation for more details.", "completion": ""}
{"prompt": "Q: How do I do i need a license to use jetbrains and gitpod??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Yes, the plan is to eventually support all of the JetBrains IDE's. Please refer to the [Gitpod roadmap](https://www.gitpod.io/roadmap) for future updates.", "completion": ""}
{"prompt": "Q: How do I does gitpod support the intellij idea community edition??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: [JetBrains Fleet](https://www.jetbrains.com/fleet/) is a next-generation IDE from JetBrains. The currently supported method of using JetBrains IDE's with Gitpod is on desktop via [JetBrains Gateway](/docs/integrations/jetbrains-gateway), please refer to our documentation for current [IDE and editor support](/docs/references/ides-and-editors) and the [Gitpod roadmap](https://www.gitpod.io/roadmap) for future updates.", "completion": ""}
{"prompt": "Q: How do I can i use jetbrains projector with gitpod??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: GoLand", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "This document is auto generated from generators/ide/jb-product.md", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<!-- prettier-ignore -->", "completion": ""}
{"prompt": "Q: How do I goland?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/go/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.", "completion": ""}
{"prompt": "3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/go/managing-plugins.html\" target=\"_blank\">{title} docs</a>.", "completion": ""}
{"prompt": "Unlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/go/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:", "completion": ""}
{"prompt": "- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).", "completion": ""}
{"prompt": "Q: How do I install on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on JetBrains Client</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).", "completion": ""}
{"prompt": "When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.", "completion": ""}
{"prompt": "It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "Q: How do I install for your current workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on {title} backend</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "You can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "plugins:", "completion": ""}
{"prompt": "- izhangzhihao.rainbow.brackets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Select the **Versions** tab.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.", "completion": ""}
{"prompt": "Q: How do I configure jvm options?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "vmoptions: \"-Xmx4g\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).", "completion": ""}
{"prompt": "When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/go/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.", "completion": ""}
{"prompt": "Q: How do I on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I configure ide settings per project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/goland/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "**Commit relevant IDE settings to source control**", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To configure IDE settings for your user only, and not all those using a project.", "completion": ""}
{"prompt": "Follow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.", "completion": ""}
{"prompt": "Q: How do I indexing using prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "enable the core functionality like code completion and navigation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod prebuilds allow you to improve it further by indexing before you start a new workspace.", "completion": ""}
{"prompt": "To leverage it:", "completion": ""}
{"prompt": "- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- push changes to your Git repository to apply.", "completion": ""}
{"prompt": "The `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When using a Gitpod workspace you might experience performance issues caused by:", "completion": ""}
{"prompt": "- An application using more resources than expected", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).", "completion": ""}
{"prompt": "- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/go/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.", "completion": ""}
{"prompt": "Q: How do I are there any jetbrains optimizations i can make if my workspace is slow??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.", "completion": ""}
{"prompt": "> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: IDEs & Editors", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "import OpenGraph from \"$lib/components/open-graph.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "data={{", "completion": ""}
{"prompt": "\"Connect and integrate Gitpod workspaces with your favourite IDE or editor. VS Code Browser and Desktop. JetBrains. IntelliJ. GoLand. PhpStorm. PyCharm. Vim. Emacs. SSH.\",", "completion": ""}
{"prompt": "keywords: \"online IDEs, JetBrains, VS Code, IntelliJ, PHPStorm, PyCharm, Rider, RubyMine, WebStorm, CLion etc.\",", "completion": ""}
{"prompt": "/>", "completion": ""}
{"prompt": "Q: How do I ides & editors?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The three main ways to edit code or access a Gitpod workspace:", "completion": ""}
{"prompt": "1. **Browser** - Using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser).", "completion": ""}
{"prompt": "3. **Desktop** - Using [VS Code Desktop](ides-and-editors/vscode) or [JetBrains Gateway](/docs/integrations/jetbrains-gateway).", "completion": ""}
{"prompt": "Q: How do I supported ide/editors?", "completion": ""}
{"prompt": "- [VS Code Desktop](ides-and-editors/vscode)", "completion": ""}
{"prompt": "- [GoLand](ides-and-editors/goland)", "completion": ""}
{"prompt": "- [PyCharm](ides-and-editors/pycharm)", "completion": ""}
{"prompt": "- [WebStorm](ides-and-editors/webstorm)", "completion": ""}
{"prompt": "- [CLion](ides-and-editors/clion)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can start a workspace with your favourite IDE/editor directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url), Editor and custom [workspace class](/docs/configure/workspaces/workspace-classes).", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Open New Gitpod Workspace with your favourite IDE \u2022 <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: IntelliJ IDEA", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "This document is auto generated from generators/ide/jb-product.md", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<!-- prettier-ignore -->", "completion": ""}
{"prompt": "Q: How do I intellij idea ultimate?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.", "completion": ""}
{"prompt": "3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/idea/managing-plugins.html\" target=\"_blank\">{title} docs</a>.", "completion": ""}
{"prompt": "Unlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/idea/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:", "completion": ""}
{"prompt": "- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).", "completion": ""}
{"prompt": "Q: How do I install on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on JetBrains Client</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).", "completion": ""}
{"prompt": "When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.", "completion": ""}
{"prompt": "It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "Q: How do I install for your current workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on {title} backend</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "You can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "plugins:", "completion": ""}
{"prompt": "- izhangzhihao.rainbow.brackets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Select the **Versions** tab.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.", "completion": ""}
{"prompt": "Q: How do I configure jvm options?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "vmoptions: \"-Xmx4g\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).", "completion": ""}
{"prompt": "When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/idea/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.", "completion": ""}
{"prompt": "Q: How do I on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I configure ide settings per project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/intellij/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "**Commit relevant IDE settings to source control**", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To configure IDE settings for your user only, and not all those using a project.", "completion": ""}
{"prompt": "Follow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.", "completion": ""}
{"prompt": "Q: How do I indexing using prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "enable the core functionality like code completion and navigation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod prebuilds allow you to improve it further by indexing before you start a new workspace.", "completion": ""}
{"prompt": "To leverage it:", "completion": ""}
{"prompt": "- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- push changes to your Git repository to apply.", "completion": ""}
{"prompt": "The `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When using a Gitpod workspace you might experience performance issues caused by:", "completion": ""}
{"prompt": "- An application using more resources than expected", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).", "completion": ""}
{"prompt": "- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/idea/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.", "completion": ""}
{"prompt": "Q: How do I are there any jetbrains optimizations i can make if my workspace is slow??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.", "completion": ""}
{"prompt": "> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Gitpod Local Companion", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/5712).", "completion": ""}
{"prompt": "Please refer to the [Gitpod Local Companion - localhost is going remote](/blog/local-app) announcement blog post for more details on how to explore the beta release of the _Gitpod local companion_.", "completion": ""}
{"prompt": "Q: How do I connect to vs code desktop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: PhpStorm", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "This document is auto generated from generators/ide/jb-product.md", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<!-- prettier-ignore -->", "completion": ""}
{"prompt": "Q: How do I phpstorm?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/phpstorm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.", "completion": ""}
{"prompt": "3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/phpstorm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.", "completion": ""}
{"prompt": "Unlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/phpstorm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:", "completion": ""}
{"prompt": "- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).", "completion": ""}
{"prompt": "Q: How do I install on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on JetBrains Client</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).", "completion": ""}
{"prompt": "When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.", "completion": ""}
{"prompt": "It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "Q: How do I install for your current workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on {title} backend</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "You can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "plugins:", "completion": ""}
{"prompt": "- izhangzhihao.rainbow.brackets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Select the **Versions** tab.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.", "completion": ""}
{"prompt": "Q: How do I configure jvm options?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "vmoptions: \"-Xmx4g\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).", "completion": ""}
{"prompt": "When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/phpstorm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.", "completion": ""}
{"prompt": "Q: How do I on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I configure ide settings per project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/phpstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "**Commit relevant IDE settings to source control**", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To configure IDE settings for your user only, and not all those using a project.", "completion": ""}
{"prompt": "Follow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.", "completion": ""}
{"prompt": "Q: How do I indexing using prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "enable the core functionality like code completion and navigation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod prebuilds allow you to improve it further by indexing before you start a new workspace.", "completion": ""}
{"prompt": "To leverage it:", "completion": ""}
{"prompt": "- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- push changes to your Git repository to apply.", "completion": ""}
{"prompt": "The `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When using a Gitpod workspace you might experience performance issues caused by:", "completion": ""}
{"prompt": "- An application using more resources than expected", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).", "completion": ""}
{"prompt": "- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/phpstorm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.", "completion": ""}
{"prompt": "Q: How do I are there any jetbrains optimizations i can make if my workspace is slow??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.", "completion": ""}
{"prompt": "> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: PyCharm", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "This document is auto generated from generators/ide/jb-product.md", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<!-- prettier-ignore -->", "completion": ""}
{"prompt": "Q: How do I pycharm?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/pycharm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.", "completion": ""}
{"prompt": "3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/pycharm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.", "completion": ""}
{"prompt": "Unlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/pycharm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:", "completion": ""}
{"prompt": "- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).", "completion": ""}
{"prompt": "Q: How do I install on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on JetBrains Client</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).", "completion": ""}
{"prompt": "When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.", "completion": ""}
{"prompt": "It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "Q: How do I install for your current workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on {title} backend</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "You can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "plugins:", "completion": ""}
{"prompt": "- izhangzhihao.rainbow.brackets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Select the **Versions** tab.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.", "completion": ""}
{"prompt": "Q: How do I configure jvm options?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "vmoptions: \"-Xmx4g\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).", "completion": ""}
{"prompt": "When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/pycharm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.", "completion": ""}
{"prompt": "Q: How do I on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I configure ide settings per project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/pycharm/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "**Commit relevant IDE settings to source control**", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To configure IDE settings for your user only, and not all those using a project.", "completion": ""}
{"prompt": "Follow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.", "completion": ""}
{"prompt": "Q: How do I indexing using prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "enable the core functionality like code completion and navigation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod prebuilds allow you to improve it further by indexing before you start a new workspace.", "completion": ""}
{"prompt": "To leverage it:", "completion": ""}
{"prompt": "- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- push changes to your Git repository to apply.", "completion": ""}
{"prompt": "The `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When using a Gitpod workspace you might experience performance issues caused by:", "completion": ""}
{"prompt": "- An application using more resources than expected", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).", "completion": ""}
{"prompt": "- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/pycharm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.", "completion": ""}
{"prompt": "Q: How do I are there any jetbrains optimizations i can make if my workspace is slow??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.", "completion": ""}
{"prompt": "> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Rider", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "This document is auto generated from generators/ide/jb-product.md", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<!-- prettier-ignore -->", "completion": ""}
{"prompt": "Q: How do I rider?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/rider/Remote_development-a.html#gateway#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.", "completion": ""}
{"prompt": "3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To successfully use Rider and load a .NET project, your workspace needs the .NET Framework or a compatible alternative, to be installed. The [default workspace image](/docs/configure/workspaces/workspace-image#use-a-public-docker-image) does not come with .NET pre-installed, so you have two options:", "completion": ""}
{"prompt": "**Using the .NET workspace image (Recommended)**", "completion": ""}
{"prompt": "1. Create a `.gitpod.yml` file", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Restart the IDE", "completion": ""}
{"prompt": "Note: manually installed dependencies are only available in the current workspace, when you start a new workspace dotnet will not be pre-installed, for this reason we recommend the first option.", "completion": ""}
{"prompt": "Q: How do I install plugins?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).", "completion": ""}
{"prompt": "Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).", "completion": ""}
{"prompt": "To install a plugin on **JetBrains Client** follow these steps:", "completion": ""}
{"prompt": "- In **JetBrains Client** open the IDE settings and select **Plugins**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I install on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can install a plugin only for **your current workspace** following these steps:", "completion": ""}
{"prompt": "- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I preconfigure for repository?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Each workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "rider:", "completion": ""}
{"prompt": "- zielu.gittoolbox", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:", "completion": ""}
{"prompt": "- Find a page of the required plugin.", "completion": ""}
{"prompt": "- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.", "completion": ""}
{"prompt": "Q: How do I install for your user?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).", "completion": ""}
{"prompt": "You can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "rider:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "For more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/rider/Tuning_the_IDE.html#common-jvm-options) from JetBrains documentation.", "completion": ""}
{"prompt": "Q: How do I configure ide settings?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: IDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Settings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>{title} backend settings have `On Host` label.</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Some IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:", "completion": ""}
{"prompt": "**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.", "completion": ""}
{"prompt": "**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-/<your-project-name>/options`", "completion": ""}
{"prompt": "**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.", "completion": ""}
{"prompt": "**Include relevant IDE settings in your Workspace Image**", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/rider/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "For any further changes to your IDE settings, you will need to follow the above steps again.", "completion": ""}
{"prompt": "> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.", "completion": ""}
{"prompt": "Q: How do I configure ide settings per user?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Currently, prebuilds for Rider are not supported. To leave feedback or check for updates, see [gitpod/issues/6740](https://github.com/gitpod-io/gitpod/issues/6740).", "completion": ""}
{"prompt": "Q: How do I workspace performance?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Resource consumption in adjacent containers running on the workspace node.", "completion": ""}
{"prompt": "In your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.", "completion": ""}
{"prompt": "The remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.", "completion": ""}
{"prompt": "> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.", "completion": ""}
{"prompt": "![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Debugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:", "completion": ""}
{"prompt": "1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - [What should I do if JetBrains Gateway and Gitpod aren\u2019t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: ides-and-editors", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<!--", "completion": ""}
{"prompt": "Edit this file instead and run `yarn generate:jb`to apply.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "Q: How do I getting started?", "completion": ""}
{"prompt": "2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.", "completion": ""}
{"prompt": "4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Updating Gitpod IDE preferences to {title}</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "**Important:** You must restart any started workspaces for your IDE preferences to take effect.", "completion": ""}
{"prompt": "Q: How do I install plugins?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).", "completion": ""}
{"prompt": "Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).", "completion": ""}
{"prompt": "To install a plugin on **JetBrains Client** follow these steps:", "completion": ""}
{"prompt": "- In **JetBrains Client** open the IDE settings and select **Plugins**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I install on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can install a plugin only for **your current workspace** following these steps:", "completion": ""}
{"prompt": "- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I preconfigure for repository?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Each workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "rubymine:", "completion": ""}
{"prompt": "- zielu.gittoolbox", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "You can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:", "completion": ""}
{"prompt": "- Find a page of the required plugin.", "completion": ""}
{"prompt": "- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.", "completion": ""}
{"prompt": "Q: How do I install for your user?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).", "completion": ""}
{"prompt": "You can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "rubymine:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "For more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/ruby/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.", "completion": ""}
{"prompt": "Q: How do I configure ide settings?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: IDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Settings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>{title} backend settings have `On Host` label.</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Some IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:", "completion": ""}
{"prompt": "**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.", "completion": ""}
{"prompt": "**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-RM/<your-project-name>/options`", "completion": ""}
{"prompt": "**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.", "completion": ""}
{"prompt": "**Include relevant IDE settings in your Workspace Image**", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/rubymine/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "For any further changes to your IDE settings, you will need to follow the above steps again.", "completion": ""}
{"prompt": "> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.", "completion": ""}
{"prompt": "Q: How do I configure ide settings per user?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "When you open the project {title} starts indexing to load modules and", "completion": ""}
{"prompt": "Depending on the size of your project indexing speed can vary significantly.", "completion": ""}
{"prompt": "You can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/ruby/indexing.html).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "rubymine:", "completion": ""}
{"prompt": "version: stable", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Users can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.", "completion": ""}
{"prompt": "Q: How do I workspace performance?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Resource consumption in adjacent containers running on the workspace node.", "completion": ""}
{"prompt": "In your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.", "completion": ""}
{"prompt": "The remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.", "completion": ""}
{"prompt": "> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.", "completion": ""}
{"prompt": "![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Debugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:", "completion": ""}
{"prompt": "1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - [What should I do if JetBrains Gateway and Gitpod aren\u2019t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "section: ides-and-editors", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "import Keybind from \"$lib/components/keybind.svelte\";", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: VS Code is beloved for its endless customization possibilities.", "completion": ""}
{"prompt": "However, you may come across the challenge of having many multiple VS Code instances needing to share the same extensions, themes and settings. Since every start of a [Gitpod workspace](https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task) is a new instance of VS Code, using [Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync) helps you avoid re-setting your environment for each new workspace and embrace ephemeral Gitpod workspaces.", "completion": ""}
{"prompt": "Q: How do I how vs code setting sync works?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)", "completion": ""}
{"prompt": "- [Tasks](https://code.visualstudio.com/Docs/editor/tasks#_user-level-tasks)", "completion": ""}
{"prompt": "- [Global State](https://code.visualstudio.com/docs/editor/settings-sync#_sync-user-global-state-between-machines)", "completion": ""}
{"prompt": "Q: How do I gitpod vs microsoft settings sync?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: VS Code in the browser with Gitpod has Settings Sync enabled by default, syncing preferences to Gitpod's servers.", "completion": ""}
{"prompt": "Q: How do I enabling settings sync in vs code desktop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"The Gitpod VS Code Desktop plugin\" src=\"/images/editors/gitpod-extension.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "2. Using the [Command Palette](https://code.visualstudio.com/api/ux-guidelines/command-palette) select: \"Settings Sync: Enable signing in with Gitpod\".", "completion": ""}
{"prompt": "![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)", "completion": ""}
{"prompt": "_Enable Settings Sync with Gitpod_", "completion": ""}
{"prompt": "3. Restart your VS Code Desktop application.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Prompt to restart VS Code Desktop</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Enable settings sync from the Manage gear menu\" src=\"/images/editors/enable-settings-sync.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "You will be prompted which settings to sync, and to authenticate via Gitpod.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Sign into Gitpod to enable VS Code settings sync</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Merge or replace VS Code Settings\" src=\"/images/editors/resolve-merge-conflicts.png\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I faqs?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Search for `settings sync off` in your VS Code [Command Palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette) and hit <Keybind>Enter</Keybind>.", "completion": ""}
{"prompt": "> **Note:** This will only work properly inside of VS Code Desktop. If you choose to disable Settings Sync inside of VS Code Browser, you will have to disable it in every new workspace and every time a workspace restarts.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Searching for \"setting sync\" on the Command Palette</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: VS Code Browser", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: VS Code Browser is the default editor that workspaces open in when using Gitpod. You can even [configure your VS Code extension](/docs/references/ides-and-editors/vscode-extensions) preferences by updating your .gitpod.yml.", "completion": ""}
{"prompt": "![VS Code](../../../static/images/gitpod-editor.jpg)", "completion": ""}
{"prompt": "Q: How do I changing the vs code browser version?", "completion": ""}
{"prompt": "](https://github.com/gitpod-io/openvscode-server). VS Code in the browser in Gitpod is updated frequently, to use the latest nightly build of Gitpod you can switch to the \"insiders\" version of VS Code from [your Gitpod preferences page](https://gitpod.io/preferences).", "completion": ""}
{"prompt": "Q: How do I settings sync?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can upload files to your workspace by dragging and dropping them into the editor. You can also upload files by clicking the \"Upload\" button in the file explorer.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Upload Files from local to VS Code Browser</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: VS Code extensions", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod already comes well equipped for most development tasks, and provides language support for the most popular programming languages such as Python, JavaScript, Go, Rust, C/C++, Java, Ruby, and many more out of the box.", "completion": ""}
{"prompt": "Still, you may wish to customize Gitpod, or to extend it with new features. You can do this by installing VS Code extensions.", "completion": ""}
{"prompt": "`youtube: TwXYbZKEuoA`", "completion": ""}
{"prompt": "Q: How do I installing an extension?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Click the settings icon", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "vscode:", "completion": ""}
{"prompt": "- svelte.svelte-vscode", "completion": ""}
{"prompt": "- https://example.com/abc/releases/extension-0.26.0.vsix", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You have two options to install extensions for yourself only:", "completion": ""}
{"prompt": "1. For the current workspace only - if you don't want extensions to be synced across workspaces, select `Install (Do Not Sync)` instead of `Install` when installing new extensions.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod already comes with a number of commonly used VS Code extensions pre-installed by default.", "completion": ""}
{"prompt": "You can view all pre-installed extensions by navigating to VS Code's Extensions section on the left-hand side. In the \"Search Extensions in Marketplace\" input field, type `@builtin` to see the built-in extensions.", "completion": ""}
{"prompt": "Q: How do I use of microsoft-owned extensions in gitpod?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Microsoft C#](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp)", "completion": ""}
{"prompt": "- [Microsoft C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is possible to develop, install and test your own custom VS Code extensions in Gitpod. While developing the extension, you can test it by uploading the `.vsix` file to your Gitpod workspace.", "completion": ""}
{"prompt": "**Please note:**", "completion": ""}
{"prompt": "- You can install any private extensions using manual VSIX installation.", "completion": ""}
{"prompt": "- Any `.vsix` referenced in the `.gitpod.yml` must be publicly accessible.", "completion": ""}
{"prompt": "Q: How do I open vsx?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: VS Code Browser is prohibited from accessing the Microsoft VS Code Extensions marketplace.", "completion": ""}
{"prompt": "See [Use of Microsoft owned extensions in Gitpod](#use-of-microsoft-owned-extensions-in-gitpod) for more.", "completion": ""}
{"prompt": "Q: How do I where do i find extensions??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: VS Code Desktop", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I vs code desktop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: There are currently three supported ways to open a VS Code Desktop session connected to a Gitpod workspace, either by opening it from the [Gitpod dashboard](https://gitpod.io/workspaces), choosing VS Code Desktop as your default preference, or directly from within VS Code Browser itself.", "completion": ""}
{"prompt": "Q: How do I open vs code desktop from the gitpod dashboard?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I open vs code desktop from vs code browser?", "completion": ""}
{"prompt": "2. Open the command palette (<Keybind>CtrlCmd + Shift + P</Keybind>)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Open VS Code via the Command Palette](/images/editors/open-in-vscode-command-palette-dark-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. Navigate to your [Gitpod preferences](https://gitpod.io/preferences)", "completion": ""}
{"prompt": "3. Restart any running workspaces", "completion": ""}
{"prompt": "When the workspace starts, you will be prompted to open VS Code Desktop. You can also access your workspace using VS Code Browser, or copy SSH credentials from this page.", "completion": ""}
{"prompt": "![Open VS Code Desktop from the workspace start page](/images/editors/vscode-desktop-splash-light-theme.png)", "completion": ""}
{"prompt": "_Open VS Code Desktop from the workspace start page_", "completion": ""}
{"prompt": "![Selecting VS Code Desktop as an editor preference](/images/editors/select-vscode-desktop-preference-light-theme.png)", "completion": ""}
{"prompt": "_Selecting VS Code Desktop as an editor preference_", "completion": ""}
{"prompt": "Q: How do I connecting to vs code desktop (ssh)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. SSH Gateway access using the owner token", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: First, VS Code Desktop will check if you have already added a public SSH key to Gitpod and that the associated private key is available on your device.", "completion": ""}
{"prompt": "If you haven't set up an SSH key with Gitpod, you can go to [gitpod.io/keys](https://gitpod.io/keys) to upload a public key. Alternatively, you can continue using the owner token approach detailed below.", "completion": ""}
{"prompt": "<div align=\"center\">", "completion": ""}
{"prompt": "<p><i>The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod.</i></p>", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "You must have at least one public key uploaded to Gitpod, and a matching private key locally on your device to avoid this prompt. VS Code Desktop will look to find private keys in the following named files within the `.ssh` directory listed under your home directory.", "completion": ""}
{"prompt": "- `id_dsa`", "completion": ""}
{"prompt": "- `id_ecdsa`", "completion": ""}
{"prompt": "- `id_ed25519`", "completion": ""}
{"prompt": "- `id_ecdsa_sk`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you cannot upload a public key to Gitpod (for whatever reason) selecting **Copy** will allow you to proceed to access your Gitpod workspace using the owner token approach. Selecting **Copy** will copy the necessary password to your clipboard to be pasted in the subsequent password prompt.", "completion": ""}
{"prompt": "![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-dark-theme.png)", "completion": ""}
{"prompt": "_VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy._", "completion": ""}
{"prompt": "> **Note:** Gitpod previously required a local private SSH key to be stored in the default SSH directory, otherwise Gitpod would prompt for a \"password\". This limitation is no longer required. If not using an SSH uploaded key, you may be prompted for a password (the owner token), or asked for the passphrase associated with your SSH key.", "completion": ""}
{"prompt": "Q: How do I connect to vs code desktop using local companion (legacy)?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Downloads and starts Local Companion in a non-transparent way.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![The VS Code Desktop Gitpod extension useLocalApp setting](/images/editors/vscode-local-app-setting-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When VS Code Desktop disconnects from the workspace, either you are experiencing genuine connectivity issues, or it's possible that the workspace has timed out and stopped.", "completion": ""}
{"prompt": "![VS Code Desktop attempting to reconnect](/images/editors/reconnect-window-light-theme.png)", "completion": ""}
{"prompt": "_VS Code Desktop attempting to reconnect_", "completion": ""}
{"prompt": "To restart the workspace, click **Open Workspace** from the workspace start page or from the dashboard and VS Code Desktop should automatically reconnect.", "completion": ""}
{"prompt": "**Please note:** There is currently no way to start a workspace directly from VS Code Desktop.", "completion": ""}
{"prompt": "![Open workspace button shown on a stopped workspace page](/images/editors/workspace-stopped-dark-theme.png)", "completion": ""}
{"prompt": "_The open workspace button shown on a stopped workspace page_", "completion": ""}
{"prompt": "Q: How do I vs code settings sync?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: VS Code runs extensions in one of two places: locally on the UI / client side, or remotely on your Gitpod workspace.", "completion": ""}
{"prompt": "For further details, please refer to the official VS Code docs on how to [manage extensions](https://code.visualstudio.com/docs/remote/ssh#_managing-extensions).", "completion": ""}
{"prompt": "Q: How do I custom fonts in vs code desktop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "1. Open the editor's user settings (e.g. _File_ > _Preferences_ > _Settings_ > _User_)", "completion": ""}
{"prompt": "```json", "completion": ""}
{"prompt": "\"editor.fontFamily\": \"Your custom font name\"", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I optimizing vs code desktop?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: ![Accepting the SSH fingerprint in VS Code](/images/editors/vscode-ssh-fingerprint-light-theme.png)", "completion": ""}
{"prompt": "_Accepting the SSH fingerprint in VS Code_", "completion": ""}
{"prompt": "It is common convention to be asked for a fingerprint when accessing a new SSH server. When the fingerprint is accepted, a reference to the server is stored in your local `known_hosts` file, which suppresses subsequent SSH connection prompts for that server.", "completion": ""}
{"prompt": "You should only be presented with a request to trust the Gitpod workspace when using the legacy Local Companion approach of connecting to VS Code Desktop.", "completion": ""}
{"prompt": "By swapping to the SSH Gateway approach of accessing VS Code Desktop, your known hosts file will be updated automatically. See [connecting to VS Code Desktop](/docs/references/ides-and-editors/vscode#connecting-to-vs-code-desktop-ssh) for more.", "completion": ""}
{"prompt": "Q: How do I workspace trust?", "completion": ""}
{"prompt": "![The VS Code Workspace Trust popup](/images/editors/trust-authors-workspace-dark-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Updating Workspace Trust settings](/images/editors/manage-workspace-trust-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I when opening vs code desktop, the owner token wasn't copied to my clipboard, where can i find it??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: If you're unsure whether you're connecting via the local companion, or SSH Gateway approach, when connected to your Gitpod workspace, VS Code Desktop will show the connection host in the bottom left.", "completion": ""}
{"prompt": "- **SSH Gateway** - `SSH: workspaceid.ssh.*.gitpod.io`", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-dark-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When connecting, sometimes VS Code Desktop fails to automatically detect the host OS of a Gitpod workspace, asking the following: `Select the platform of the remote host \"{id}\"`.", "completion": ""}
{"prompt": "No matter what the OS is on your computer, you should always choose `Linux` as the remote host platform, since this is the operating system all Gitpod workspaces run on.", "completion": ""}
{"prompt": "If you choose another option, you may encounter an error like this:", "completion": ""}
{"prompt": "```text", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I i'm being prompted for a password/passphrase but vs code desktop cannot authenticate??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "_Passphrase prompt from VS Code requiring the SSH key passphrase_", "completion": ""}
{"prompt": "> **Note:** If you cannot remember your passphrase, consider creating a new SSH key and uploading the new key to Gitpod.", "completion": ""}
{"prompt": "Q: How do I how do i enable ssh agent forwarding for desktop vscode??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Host *.gitpod.io", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I upload files?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/file-upload-drag-and-drop.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. Attempt to directly connect via SSH using the `-v` to show verbose SSH logs. For example: `ssh -v workspacename@hostname`. You can find the `ssh` command in the workspace list on your Gitpod dashboard, see the [command-line](/docs/references/ides-and-editors/command-line) docs for more.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: WebStorm", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "This document is auto generated from generators/ide/jb-product.md", "completion": ""}
{"prompt": "-->", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "<!-- prettier-ignore -->", "completion": ""}
{"prompt": "Q: How do I webstorm?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: 1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/webstorm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.", "completion": ""}
{"prompt": "3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gitpod</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Opening a JetBrains IDE from Gateway</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/webstorm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.", "completion": ""}
{"prompt": "Unlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/webstorm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:", "completion": ""}
{"prompt": "- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).", "completion": ""}
{"prompt": "Q: How do I install on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on JetBrains Client</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).", "completion": ""}
{"prompt": "When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.", "completion": ""}
{"prompt": "It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.", "completion": ""}
{"prompt": "Q: How do I install for your current workspace?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Find the plugin in the **Marketplace** and click **Install**.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Install a plugin on {title} backend</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) \u00b7 [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).", "completion": ""}
{"prompt": "You can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "plugins:", "completion": ""}
{"prompt": "- izhangzhihao.rainbow.brackets", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- Select the **Versions** tab.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: It is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.", "completion": ""}
{"prompt": "Q: How do I configure jvm options?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "vmoptions: \"-Xmx4g\"", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: > **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).", "completion": ""}
{"prompt": "When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/webstorm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.", "completion": ""}
{"prompt": "Q: How do I on jetbrains client?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I on {title} backend?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I configure ide settings per project?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- `/home/gitpod/.gitpod/jetbrains/webstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.", "completion": ""}
{"prompt": "**Commit relevant IDE settings to source control**", "completion": ""}
{"prompt": "- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To configure IDE settings for your user only, and not all those using a project.", "completion": ""}
{"prompt": "Follow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.", "completion": ""}
{"prompt": "Q: How do I indexing using prebuilds?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "enable the core functionality like code completion and navigation.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "Gitpod prebuilds allow you to improve it further by indexing before you start a new workspace.", "completion": ""}
{"prompt": "To leverage it:", "completion": ""}
{"prompt": "- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "jetbrains:", "completion": ""}
{"prompt": "prebuilds:", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "- push changes to your Git repository to apply.", "completion": ""}
{"prompt": "The `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: When using a Gitpod workspace you might experience performance issues caused by:", "completion": ""}
{"prompt": "- An application using more resources than expected", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: - For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).", "completion": ""}
{"prompt": "- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/webstorm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.", "completion": ""}
{"prompt": "Q: How do I are there any jetbrains optimizations i can make if my workspace is slow??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.", "completion": ""}
{"prompt": "> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.", "completion": ""}
{"prompt": "Q: How do I troubleshooting?", "completion": ""}
{"prompt": "- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: References", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Below are links to Gitpod reference material you may find helpful:", "completion": ""}
{"prompt": "- [Product Compatibility Matrix](/docs/references/compatibility?user)", "completion": ""}
{"prompt": "- [Command Line Interface](/docs/references/gitpod-cli)", "completion": ""}
{"prompt": "- [Gitpod Releases](/docs/help/public-roadmap/release-cycle)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "title: Security FAQ", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A:", "completion": ""}
{"prompt": "Q: How do I what type of data does gitpod collect??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Authentication occurs via OAuth tokens which can be revoked and/or re-authorized at any time.", "completion": ""}
{"prompt": "Q: How do I how is data secured within the gitpod platform??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Workspaces deploy as Kubernetes pods. Each Workspace operates within its own set of namespaces, so that they cannot interfere with each other.", "completion": ""}
{"prompt": "Q: How do I how is gitpod\u2019s infrastructure deployed??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: We are SOC 2 Type 2 compliant for two years running and conduct pentesting at least annually. Reports are available upon request and under MNDA; please contact your Account Manager.", "completion": ""}
{"prompt": "Q: How do I how does gitpod deploy??", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I february release 2019 \ud83c\udf89?", "completion": ""}
{"prompt": "This means we are going to have monthly release notes. They will pop up only once and you can easily dismiss them by pressing <kbd>[ESC]</kbd>.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can now navigate to GitHub directly from the editor. The GitHub URL of any editor position or selection can be accessed with a right-click, and used for example in GitHub issues or Pull Request comments to reference interesting code locations.", "completion": ""}
{"prompt": "![GitHub Links](../../../../../static/images/docs/release-notes/2019-02-15/github-navi.jpg)", "completion": ""}
{"prompt": "Q: How do I snapshots?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The possibilities to fine-tune the developer experience when using Gitpod on your repository have been improved. Here are the features you can define in your `.gitpod.yml`:", "completion": ""}
{"prompt": "Q: How do I tasks?", "completion": ""}
{"prompt": "The following config, for instance, will make sure that two terminals are opened next to each other.", "completion": ""}
{"prompt": "```yaml", "completion": ""}
{"prompt": "- command: echo 'left'", "completion": ""}
{"prompt": "openMode: split-right", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In addition we have introduced multiple lifecycle phases for the tasks, such as [init](/docs/configure/workspaces/tasks#init-command) and [before](/docs/configure/workspaces/tasks#before-command). The main purpose is to avoid rerunning unnecessary commands such as full builds, when restarting workspaces or opening snapshots.", "completion": ""}
{"prompt": "Check the table below for an overview of the different starting scenarios.", "completion": ""}
{"prompt": "<div class=\"overflow-x-auto\">", "completion": ""}
{"prompt": "| Start Mode        | Execution                   |", "completion": ""}
{"prompt": "| Fresh Workspace   | `before && init && command` |", "completion": ""}
{"prompt": "| Snapshot          | `before && command`         |", "completion": ""}
{"prompt": "</div>", "completion": ""}
{"prompt": "Q: How do I ports?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "ports:", "completion": ""}
{"prompt": "onOpen: open-preview", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod now understands YAML syntax and uses json schema specifications to validate and guide developers. While this works for any YAML files it comes in especially handy when editing `.gitpod.yml`.", "completion": ""}
{"prompt": "![yaml in action](../../../../../static/images/docs/release-notes/2019-02-15/yaml-support.png)", "completion": ""}
{"prompt": "Q: How do I gitpod cli?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: To get the best experience with Gitpod, you should configure your repository to have the right tools, run the right commands on start, etc. This information is stored in a `.gitpod.yml` file sitting in your repository.", "completion": ""}
{"prompt": "The `gp init` command walks you through the basic setup and generates a `.gitpod.yml` and if desired a corresponding `Dockerfile`.", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190", "completion": ""}
{"prompt": "\u25b8 default", "completion": ""}
{"prompt": "docker file", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: One of the things you do in a `.gitpod.yml` is declaring the exposed ports. Gitpod maps them to a specific subdomain in order to make them accessible. For instance if you have a dev server running on `0.0.0.0:3000` the `gp url` command gives you the external url for that service.", "completion": ""}
{"prompt": "Here is an example:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "https://3000-b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gitpod /workspace/release-notes $ gp url", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I gp preview?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "gp preview $(gp url 3000)my/special/path.html", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In addition to the `.gitpod.yml` you can provide a `Dockerfile` which is automatically picked up by Gitpod. See [this blog post](https://medium.com/gitpod/bring-your-own-docker-image-to-gitpod-52db1aa861de) for more information on setting up a Dockerfile for your project.", "completion": ""}
{"prompt": "For example, here is a Dockerfile that allows developing native UI applications in Go on Gitpod:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "RUN sudo apt-get update && \\", "completion": ""}
{"prompt": "sudo rm -rf /var/lib/apt/lists/*", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: As we continuously improve and expand Gitpod, there are times when things inevitably don't go as planned, occasionally causing downtime. If you're ever curious about the status of [gitpod.io](https://gitpod.io), or you'd like to follow how we resolve an incident, we made [status.gitpod.io](https://status.gitpod.io/) just for you.", "completion": ""}
{"prompt": "In fact, thanks to [Statusfy](https://github.com/bazzite/statusfy), it took us just a few hours to build an entire [open source status page](https://github.com/gitpod-io/gitpod-status). Learn more about this short adventure in [this blog post](https://medium.com/gitpod/status-update-gitpod-%EF%B8%8F-statusfy-ed8266d63a20).", "completion": ""}
{"prompt": "Q: How do I java debugging?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The new improved XML support not only does syntax highlighting for XML and XSD but also uses associated schemas to provide diagnostics, content assist and hover information.", "completion": ""}
{"prompt": "![XML Support](../../../../../static/images/docs/release-notes/2019-02-15/xml-support.png)", "completion": ""}
{"prompt": "Q: How do I better previews?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In addition to Markdown, Gitpod now also supports previewing AsciiDoc as you type.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>ASCIIdoc Support</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: These are just the most noteworthy features we have been working on.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "- [Merged PRs in Theia](https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=merged%3A%3E2018-11-01+merged%3A%3C2018-02-13+)", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/release-notes/2019-02-15/february-2019\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I april 2019?", "completion": ""}
{"prompt": "We want to thank all the beta testers who have provided great feedback. Gitpod wouldn't be what it is without you! \u2764\ufe0f", "completion": ""}
{"prompt": "You can read more about the announcement in [the blog post](/blog/gitpod-launch).", "completion": ""}
{"prompt": "Besides a complete relaunch of the website and app, we have added some very exciting new features:", "completion": ""}
{"prompt": "Q: How do I github app / prebuilt workspaces \ud83d\ude80?", "completion": ""}
{"prompt": "On GitHub pull requests this is communicated through a status check.", "completion": ""}
{"prompt": "![Prebuilt Check on PR](../../../../../static/images/docs/release-notes/2019-04-05/prebuilt-check.png)", "completion": ""}
{"prompt": "As a result, Gitpod is now the first IDE that builds your project, before you open it.", "completion": ""}
{"prompt": "Read more about this exciting feature in [the docs](/docs/configure/projects/prebuilds) and in [Chris' blog post](/blog/prebuilds).", "completion": ""}
{"prompt": "Q: How do I better `localhost` handling?", "completion": ""}
{"prompt": "Starting today, you no longer need to worry about that. Gitpod now forwards the port locally and rewrites the host headers,", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod now directly uses Microsoft's great Go support for VS Code.", "completion": ""}
{"prompt": "![VS Code Go Extension](../../../../../static/images/docs/release-notes/2019-04-05/vscode-go.png)", "completion": ""}
{"prompt": "Q: How do I unlimited hours?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: As part of the launch, we have refreshed the design of Gitpod. The website and dashboard now use a new dark theme that we hope you'll like, and the UI of the", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: You can now delete workspaces in the dashboard. Please note that deletion can not be reversed as we are really", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Besides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: With this release we have already added some VS Code extensions. Going forward we will double down on the integration.", "completion": ""}
{"prompt": "work as expected. Once we've reached a state where we are confident VS Code extensions work reliably in general, we will allow users to install them.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "export const load = () => {", "completion": ""}
{"prompt": "status: 301,", "completion": ""}
{"prompt": "}", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "export const prerender = true;", "completion": ""}
{"prompt": "return {", "completion": ""}
{"prompt": "redirect: \"/docs/release-notes/2019-06-17/june-2019\"", "completion": ""}
{"prompt": "};", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "---", "completion": ""}
{"prompt": "<script context=\"module\">", "completion": ""}
{"prompt": "</script>", "completion": ""}
{"prompt": "Q: How do I june 2019?", "completion": ""}
{"prompt": "as supporting VS Code extension. Although this work is not yet finished, we have added a bunch of new features on the way, which are listed below.", "completion": ""}
{"prompt": "Q: How do I toggle maximize?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Toggle Maximize\" src=\"/images/docs/release-notes/2019-06-17/maximize.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I links in terminals?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod allows users to inject environment variables into workspaces. Based on a simple pattern against the repository name", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "See the [docs](/docs/configure/projects/environment-variables) for more information.", "completion": ""}
{"prompt": "Q: How do I bi-directional scroll sync?", "completion": ""}
{"prompt": "Now you can scroll both the editor or the preview and see how the other part is scrolling with it, showing the corresponding sections.", "completion": ""}
{"prompt": "<figure>", "completion": ""}
{"prompt": "<figcaption>Scroll sync</figcaption>", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: In addition to the Go VS Code extension, Gitpod now also runs the official [Rust VS Code extensions](https://github.com/rust-lang/rls-vscode).", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: Gitpod comes with support for emmet, a web-developer\u2019s toolkit that can greatly improve your HTML & CSS workflow.", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "See the [cheat-sheet](https://docs.emmet.io/cheat-sheet/) for a quick overview of what's supported.", "completion": ""}
{"prompt": "Q: How do I debugging in java?", "completion": ""}
{"prompt": "This is now fixed.", "completion": ""}
{"prompt": "Q: How do I better upload?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"upload\" src=\"/images/docs/release-notes/2019-06-17/upload.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Q: How do I improved c++ language support?", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "A: The git amend UI has been improved so that you can amend / squash multiple commits but also", "completion": ""}
{"prompt": "", "completion": ""}
{"prompt": "<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Git amend\" src=\"/images/docs/release-notes/2019-06-17/git-amend.webm\" type=\"video/webm\"></video>", "completion": ""}
{"prompt": "</figure>", "completion": ""}
{"prompt": "Also the entire SCM widget has been rewritten to match VS Code's UX.", "completion": ""}
{"prompt": "Q: How do I config: port ranges?", "completion": ""}
{"prompt": "and tell Gitpod what to do when a service opens on one of those ports.", "completion": ""}
{"prompt": "Q: How do I cli: _gp await-port_?", "completion": ""}
{"prompt": "This is useful if you want to wait for a certain path and then take a specific action.", "completion": ""}
{"prompt": "Here's an example that will open a certain path in the preview once a service is a available port 3000:", "completion": ""}
{"prompt": "```sh", "completion": ""}
{"prompt": "```", "completion": ""}
{"prompt": "Q: How do I many small improvements?", "completion": ""}
{"prompt": "We have merged 146 PRs in Gitpod and [220 in Theia](https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-04-01+).", "completion": ""}
{"prompt": "Q: How do I what's next??", "completion": ""}
{"prompt": "The upcoming release will allow you to install arbitrary VS Code extensions and add that as configuration to your `.gitpod.yml` files.", "completion": ""}
{"prompt": "Finally, we are looking into optimizing start-up time improvements and, of course, bug-fixing and offering you a great development experience.", "completion": ""}
